// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57490
	yyEOFCode          = 57344
	abs                = 57451
	all                = 57414
	allDifferent       = 57458
	allProp            = 57473
	and                = 57391
	andand             = 57351
	andnot             = 57464
	any                = 57415
	arrayAgg           = 57428
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57465
	avg                = 57429
	begin              = 57401
	between            = 57392
	bitLit             = 57463
	booleanType        = 57404
	by                 = 57355
	caseKwd            = 57395
	cast               = 57438
	ceil               = 57452
	ceiling            = 57453
	cheapest           = 57417
	commit             = 57403
	cost               = 57419
	count              = 57430
	create             = 57356
	dateType           = 57407
	day                = 57408
	decLit             = 57460
	deleteKwd          = 57357
	desc               = 57358
	distinct           = 57400
	div                = 57487
	doubleAtIdentifier = 57349
	doubleType         = 57359
	drop               = 57360
	edge               = 57361
	edgeIncomingLeft   = 57478
	edgeIncomingRight  = 57479
	edgeOutgoingLeft   = 57476
	edgeOutgoingRight  = 57477
	elementNumber      = 57454
	elseKwd            = 57398
	empty              = 57484
	end                = 57402
	eq                 = 57466
	yyErrCode          = 57345
	exists             = 57362
	explain            = 57405
	extract            = 57435
	falseKwd           = 57363
	floatLit           = 57459
	floatType          = 57364
	floor              = 57455
	forkKwd            = 57427
	from               = 57365
	ge                 = 57467
	graph              = 57413
	group              = 57366
	hasLabel           = 57456
	having             = 57367
	hexLit             = 57462
	hour               = 57422
	id                 = 57457
	identifier         = 57346
	ifKwd              = 57368
	in                 = 57399
	inDegree           = 57446
	index              = 57369
	insert             = 57370
	intLit             = 57461
	intType            = 57373
	integerType        = 57371
	interval           = 57421
	into               = 57372
	invalid            = 57350
	is                 = 57374
	javaRegexpLike     = 57447
	label              = 57448
	labels             = 57393
	le                 = 57468
	leftArrow          = 57474
	limit              = 57375
	listagg            = 57431
	long               = 57439
	lower              = 57444
	lowerThanOn        = 57485
	match              = 57376
	matchNumber        = 57449
	max                = 57432
	min                = 57433
	minute             = 57423
	mod                = 57488
	month              = 57424
	neg                = 57489
	neq                = 57469
	neqSynonym         = 57470
	not                = 57377
	null               = 57378
	nulleq             = 57471
	offset             = 57412
	on                 = 57379
	or                 = 57390
	order              = 57380
	outDegree          = 57450
	paramMarker        = 57472
	path               = 57420
	pipes              = 57352
	pipesAsOr          = 57486
	prefix             = 57443
	properties         = 57394
	reachIncomingLeft  = 57482
	reachIncomingRight = 57483
	reachOutgoingLeft  = 57480
	reachOutgoingRight = 57481
	rightArrow         = 57475
	rollback           = 57411
	second             = 57425
	selectKwd          = 57381
	set                = 57382
	shortest           = 57416
	singleAtIdentifier = 57348
	stringKwd          = 57440
	stringLit          = 57347
	substring          = 57426
	sum                = 57434
	then               = 57396
	timeType           = 57410
	timestampType      = 57409
	timezoneHour       = 57436
	timezoneMinute     = 57437
	top                = 57418
	trueKwd            = 57383
	unique             = 57384
	update             = 57385
	uppper             = 57445
	use                = 57386
	vertex             = 57387
	when               = 57397
	where              = 57388
	with               = 57441
	xor                = 57389
	yearType           = 57406
	zone               = 57442

	yyMaxDepth = 200
	yyTabOfs   = -357
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (280x)
		57420: 1,   // path (271x)
		57344: 2,   // $end (268x)
		59:    3,   // ';' (267x)
		57419: 4,   // cost (259x)
		57402: 5,   // end (255x)
		57427: 6,   // forkKwd (249x)
		44:    7,   // ',' (246x)
		45:    8,   // '-' (245x)
		57377: 9,   // not (238x)
		57375: 10,  // limit (212x)
		57380: 11,  // order (207x)
		57367: 12,  // having (202x)
		57365: 13,  // from (200x)
		42:    14,  // '*' (196x)
		43:    15,  // '+' (194x)
		57374: 16,  // is (191x)
		57366: 17,  // group (186x)
		57391: 18,  // and (182x)
		57399: 19,  // in (181x)
		37:    20,  // '%' (180x)
		47:    21,  // '/' (180x)
		60:    22,  // '<' (180x)
		62:    23,  // '>' (180x)
		57466: 24,  // eq (180x)
		57467: 25,  // ge (180x)
		57468: 26,  // le (180x)
		57470: 27,  // neqSynonym (180x)
		57390: 28,  // or (180x)
		57352: 29,  // pipes (180x)
		57389: 30,  // xor (180x)
		57381: 31,  // selectKwd (179x)
		40:    32,  // '(' (178x)
		57357: 33,  // deleteKwd (175x)
		57370: 34,  // insert (175x)
		57385: 35,  // update (175x)
		57397: 36,  // when (159x)
		57354: 37,  // asc (158x)
		57358: 38,  // desc (158x)
		57398: 39,  // elseKwd (157x)
		57353: 40,  // as (156x)
		57396: 41,  // then (153x)
		57393: 42,  // labels (106x)
		57417: 43,  // cheapest (100x)
		57416: 44,  // shortest (100x)
		57412: 45,  // offset (99x)
		57414: 46,  // all (98x)
		57415: 47,  // any (98x)
		57410: 48,  // timeType (98x)
		57418: 49,  // top (98x)
		57401: 50,  // begin (97x)
		57403: 51,  // commit (97x)
		57408: 52,  // day (97x)
		57405: 53,  // explain (97x)
		57413: 54,  // graph (97x)
		57422: 55,  // hour (97x)
		57423: 56,  // minute (97x)
		57424: 57,  // month (97x)
		57411: 58,  // rollback (97x)
		57425: 59,  // second (97x)
		57441: 60,  // with (97x)
		57406: 61,  // yearType (97x)
		57442: 62,  // zone (97x)
		57404: 63,  // booleanType (96x)
		57407: 64,  // dateType (96x)
		57439: 65,  // long (96x)
		57443: 66,  // prefix (96x)
		57440: 67,  // stringKwd (96x)
		57409: 68,  // timestampType (96x)
		57436: 69,  // timezoneHour (96x)
		57437: 70,  // timezoneMinute (96x)
		57428: 71,  // arrayAgg (95x)
		57429: 72,  // avg (95x)
		57438: 73,  // cast (95x)
		57430: 74,  // count (95x)
		57435: 75,  // extract (95x)
		57346: 76,  // identifier (95x)
		57421: 77,  // interval (95x)
		57431: 78,  // listagg (95x)
		57432: 79,  // max (95x)
		57433: 80,  // min (95x)
		57426: 81,  // substring (95x)
		57434: 82,  // sum (95x)
		57388: 83,  // where (84x)
		57542: 84,  // Identifier (79x)
		57609: 85,  // UnReservedKeyword (79x)
		57379: 86,  // on (66x)
		46:    87,  // '.' (65x)
		57461: 88,  // intLit (64x)
		57347: 89,  // stringLit (63x)
		57472: 90,  // paramMarker (62x)
		57483: 91,  // reachIncomingRight (61x)
		123:   92,  // '{' (59x)
		57481: 93,  // reachOutgoingRight (59x)
		57463: 94,  // bitLit (58x)
		57362: 95,  // exists (58x)
		57462: 96,  // hexLit (58x)
		57479: 97,  // edgeIncomingRight (57x)
		58:    98,  // ':' (56x)
		63:    99,  // '?' (56x)
		57451: 100, // abs (56x)
		57458: 101, // allDifferent (56x)
		57395: 102, // caseKwd (56x)
		57452: 103, // ceil (56x)
		57453: 104, // ceiling (56x)
		57460: 105, // decLit (56x)
		57454: 106, // elementNumber (56x)
		57363: 107, // falseKwd (56x)
		57459: 108, // floatLit (56x)
		57455: 109, // floor (56x)
		57456: 110, // hasLabel (56x)
		57457: 111, // id (56x)
		57446: 112, // inDegree (56x)
		57447: 113, // javaRegexpLike (56x)
		57448: 114, // label (56x)
		57444: 115, // lower (56x)
		57449: 116, // matchNumber (56x)
		57450: 117, // outDegree (56x)
		57383: 118, // trueKwd (56x)
		57445: 119, // uppper (56x)
		57477: 120, // edgeOutgoingRight (55x)
		57615: 121, // VariableName (54x)
		57617: 122, // VariableReference (54x)
		57361: 123, // edge (53x)
		57394: 124, // properties (53x)
		57387: 125, // vertex (53x)
		124:   126, // '|' (50x)
		57583: 127, // PropertyAccess (50x)
		57605: 128, // StringLiteral (49x)
		61:    129, // '=' (48x)
		57392: 130, // between (48x)
		57382: 131, // set (48x)
		57606: 132, // Subquery (48x)
		57491: 133, // Aggregation (47x)
		57494: 134, // ArithmeticExpression (47x)
		57496: 135, // BindVariable (47x)
		57497: 136, // BooleanLiteral (47x)
		57498: 137, // BracketedValueExpression (47x)
		57501: 138, // CaseExpression (47x)
		57502: 139, // CastSpecification (47x)
		57503: 140, // CharacterSubstring (47x)
		57511: 141, // DateLiteral (47x)
		57521: 142, // ExistsPredicate (47x)
		57525: 143, // ExtractFunction (47x)
		57530: 144, // FunctionInvocation (47x)
		57531: 145, // FunctionName (47x)
		57545: 146, // InPredicate (47x)
		57550: 147, // IntervalLiteral (47x)
		57553: 148, // IsNotNullPredicate (47x)
		57554: 149, // IsNullPredicate (47x)
		57566: 150, // Literal (47x)
		57567: 151, // LogicalExpression (47x)
		57570: 152, // NotInPredicate (47x)
		57571: 153, // NumericLiteral (47x)
		57590: 154, // RelationalExpression (47x)
		57593: 155, // ScalarSubquery (47x)
		57594: 156, // SearchedCase (47x)
		57599: 157, // SimpleCase (47x)
		57604: 158, // StringConcat (47x)
		57607: 159, // TimeLiteral (47x)
		57608: 160, // TimestampLiteral (47x)
		57612: 161, // ValueExpression (47x)
		57473: 162, // allProp (46x)
		57620: 163, // VertexPattern (19x)
		57614: 164, // VariableLengthPathPattern (10x)
		57478: 165, // edgeIncomingLeft (9x)
		57476: 166, // edgeOutgoingLeft (9x)
		57474: 167, // leftArrow (9x)
		57475: 168, // rightArrow (9x)
		57400: 169, // distinct (8x)
		57514: 170, // DistinctOpt (8x)
		57576: 171, // PathPatternMacro (6x)
		57616: 172, // VariableNameOpt (6x)
		57625: 173, // WhereClauseOpt (6x)
		57522: 174, // ExpAsVar (5x)
		57536: 175, // GraphName (5x)
		57555: 176, // LabelName (5x)
		57577: 177, // PathPatternMacroList (5x)
		57578: 178, // PathPatternMacroOpt (5x)
		57482: 179, // reachIncomingLeft (5x)
		57480: 180, // reachOutgoingLeft (5x)
		57598: 181, // SelectStmt (5x)
		125:   182, // '}' (4x)
		57529: 183, // FromClause (4x)
		57540: 184, // GroupByClauseOpt (4x)
		57541: 185, // HavingClauseOpt (4x)
		57368: 186, // ifKwd (4x)
		57369: 187, // index (4x)
		57563: 188, // LimitClauseOpt (4x)
		57573: 189, // OrderByClauseOpt (4x)
		57574: 190, // PathPattern (4x)
		57579: 191, // PatternQuantifier (4x)
		57580: 192, // PatternQuantifierOpt (4x)
		57600: 193, // SimplePathPattern (4x)
		57619: 194, // VariableSpec (4x)
		57623: 195, // WhenClause (4x)
		57499: 196, // ByItem (3x)
		57504: 197, // ColonOrIsKeyword (3x)
		57517: 198, // EdgePattern (3x)
		57532: 199, // GraphElementInsertion (3x)
		57557: 200, // LabelPredicate (3x)
		57562: 201, // LengthNum (3x)
		57564: 202, // LimitOption (3x)
		57584: 203, // PropertyAssignment (3x)
		57586: 204, // PropertyName (3x)
		57495: 205, // BeginStmt (2x)
		57355: 206, // by (2x)
		57500: 207, // ByList (2x)
		57505: 208, // CommitStmt (2x)
		57356: 209, // create (2x)
		57508: 210, // CreateGraphStmt (2x)
		57509: 211, // CreateIndexStmt (2x)
		57513: 212, // DeleteStmt (2x)
		57360: 213, // drop (2x)
		57515: 214, // DropGraphStmt (2x)
		57516: 215, // DropIndexStmt (2x)
		57518: 216, // ElseClauseOpt (2x)
		57519: 217, // EmptyStmt (2x)
		57523: 218, // ExplainStmt (2x)
		57533: 219, // GraphElementInsertionList (2x)
		57534: 220, // GraphElementUpdate (2x)
		57543: 221, // IfExists (2x)
		57544: 222, // IfNotExists (2x)
		57549: 223, // InsertStmt (2x)
		57372: 224, // into (2x)
		57551: 225, // IntoClause (2x)
		57552: 226, // IntoClauseOpt (2x)
		57546: 227, // InValueList (2x)
		57556: 228, // LabelNameList (2x)
		57561: 229, // LabelsAndProperties (2x)
		57559: 230, // LabelSpecification (2x)
		57560: 231, // LabelSpecificationOpt (2x)
		57376: 232, // match (2x)
		57568: 233, // MatchClause (2x)
		57378: 234, // null (2x)
		57585: 235, // PropertyAssignmentList (2x)
		57591: 236, // RollbackStmt (2x)
		57595: 237, // SelectClause (2x)
		57596: 238, // SelectEelement (2x)
		57602: 239, // Statement (2x)
		57610: 240, // UpdateStmt (2x)
		57386: 241, // use (2x)
		57611: 242, // UseStmt (2x)
		57621: 243, // VertexPatternOpt (2x)
		57622: 244, // VertexReference (2x)
		57624: 245, // WhenClauseList (2x)
		57492: 246, // AllPropertiesPrefixOpt (1x)
		57493: 247, // ArgumentList (1x)
		57506: 248, // CostClause (1x)
		57507: 249, // CostClauseOpt (1x)
		57510: 250, // DataType (1x)
		57512: 251, // DateTimeField (1x)
		57359: 252, // doubleType (1x)
		57520: 253, // Entry (1x)
		57524: 254, // ExtractField (1x)
		57526: 255, // FieldAsName (1x)
		57527: 256, // FieldAsNameOpt (1x)
		57364: 257, // floatType (1x)
		57528: 258, // ForStringLengthOpt (1x)
		57535: 259, // GraphElementUpdateList (1x)
		57537: 260, // GraphOnClause (1x)
		57538: 261, // GraphOnClauseOpt (1x)
		57539: 262, // GraphPattern (1x)
		57547: 263, // IndexKeyTypeOpt (1x)
		57371: 264, // integerType (1x)
		57373: 265, // intType (1x)
		57558: 266, // LabelPredicateOpt (1x)
		57565: 267, // ListaggSeparatorOpt (1x)
		57569: 268, // MatchClauseList (1x)
		57572: 269, // Order (1x)
		57575: 270, // PathPatternList (1x)
		57581: 271, // PropertiesSpecification (1x)
		57582: 272, // PropertiesSpecificationOpt (1x)
		57587: 273, // PropertyNameList (1x)
		57588: 274, // QuantifiedPathExpr (1x)
		57589: 275, // ReachabilityPathExpr (1x)
		57592: 276, // RowsPerMatchOpt (1x)
		57597: 277, // SelectElementList (1x)
		57601: 278, // StartPosition (1x)
		57603: 279, // StatementList (1x)
		57384: 280, // unique (1x)
		57613: 281, // ValueExpressionList (1x)
		57618: 282, // VariableReferenceList (1x)
		57490: 283, // $default (0x)
		38:    284, // '&' (0x)
		94:    285, // '^' (0x)
		126:   286, // '~' (0x)
		57351: 287, // andand (0x)
		57464: 288, // andnot (0x)
		57465: 289, // assignmentEq (0x)
		57487: 290, // div (0x)
		57349: 291, // doubleAtIdentifier (0x)
		57484: 292, // empty (0x)
		57345: 293, // error (0x)
		57548: 294, // IndexName (0x)
		57350: 295, // invalid (0x)
		57485: 296, // lowerThanOn (0x)
		57488: 297, // mod (0x)
		57489: 298, // neg (0x)
		57469: 299, // neq (0x)
		57471: 300, // nulleq (0x)
		57486: 301, // pipesAsOr (0x)
		57348: 302, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"cost",
		"end",
		"forkKwd",
		"','",
		"'-'",
		"not",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"selectKwd",
		"'('",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"then",
		"labels",
		"cheapest",
		"shortest",
		"offset",
		"all",
		"any",
		"timeType",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"booleanType",
		"dateType",
		"long",
		"prefix",
		"stringKwd",
		"timestampType",
		"timezoneHour",
		"timezoneMinute",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"interval",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"where",
		"Identifier",
		"UnReservedKeyword",
		"on",
		"'.'",
		"intLit",
		"stringLit",
		"paramMarker",
		"reachIncomingRight",
		"'{'",
		"reachOutgoingRight",
		"bitLit",
		"exists",
		"hexLit",
		"edgeIncomingRight",
		"':'",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"decLit",
		"elementNumber",
		"falseKwd",
		"floatLit",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"label",
		"lower",
		"matchNumber",
		"outDegree",
		"trueKwd",
		"uppper",
		"edgeOutgoingRight",
		"VariableName",
		"VariableReference",
		"edge",
		"properties",
		"vertex",
		"'|'",
		"PropertyAccess",
		"StringLiteral",
		"'='",
		"between",
		"set",
		"Subquery",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"allProp",
		"VertexPattern",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"LabelName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"ifKwd",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"IfExists",
		"IfNotExists",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelNameList",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"null",
		"PropertyAssignmentList",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"integerType",
		"intType",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{253, 1},
		{279, 1},
		{279, 3},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{239, 1},
		{217, 0},
		{205, 1},
		{208, 1},
		{210, 4},
		{211, 9},
		{263, 0},
		{263, 1},
		{212, 9},
		{282, 1},
		{282, 3},
		{214, 4},
		{215, 6},
		{218, 2},
		{223, 3},
		{223, 10},
		{226, 0},
		{226, 1},
		{225, 2},
		{219, 1},
		{219, 3},
		{199, 3},
		{199, 7},
		{244, 1},
		{229, 2},
		{231, 0},
		{231, 1},
		{230, 4},
		{272, 0},
		{272, 1},
		{271, 4},
		{235, 1},
		{235, 3},
		{203, 3},
		{127, 3},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{161, 1},
		{122, 1},
		{150, 1},
		{150, 1},
		{150, 1},
		{150, 1},
		{150, 1},
		{150, 1},
		{150, 1},
		{128, 1},
		{128, 1},
		{128, 1},
		{153, 1},
		{153, 1},
		{153, 1},
		{136, 1},
		{136, 1},
		{141, 2},
		{159, 2},
		{160, 2},
		{147, 3},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{251, 1},
		{135, 1},
		{134, 2},
		{134, 3},
		{134, 3},
		{134, 3},
		{134, 3},
		{134, 3},
		{154, 3},
		{154, 3},
		{154, 3},
		{154, 3},
		{154, 3},
		{154, 3},
		{151, 3},
		{151, 3},
		{151, 3},
		{151, 2},
		{158, 3},
		{137, 3},
		{144, 4},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{247, 1},
		{247, 3},
		{140, 7},
		{278, 1},
		{258, 0},
		{258, 2},
		{133, 4},
		{133, 5},
		{133, 5},
		{133, 5},
		{133, 5},
		{133, 5},
		{133, 5},
		{133, 6},
		{170, 0},
		{170, 1},
		{267, 0},
		{267, 2},
		{143, 6},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{149, 3},
		{148, 4},
		{139, 6},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 4},
		{250, 1},
		{250, 4},
		{138, 1},
		{138, 1},
		{157, 5},
		{156, 4},
		{245, 1},
		{245, 2},
		{195, 4},
		{216, 0},
		{216, 2},
		{146, 3},
		{152, 4},
		{227, 3},
		{281, 1},
		{281, 3},
		{142, 2},
		{132, 3},
		{155, 1},
		{236, 1},
		{181, 8},
		{237, 3},
		{237, 2},
		{277, 1},
		{277, 3},
		{238, 1},
		{238, 3},
		{174, 2},
		{246, 0},
		{246, 2},
		{256, 0},
		{256, 1},
		{255, 2},
		{255, 2},
		{183, 2},
		{268, 1},
		{268, 3},
		{233, 4},
		{260, 2},
		{261, 0},
		{261, 1},
		{276, 0},
		{262, 1},
		{262, 3},
		{270, 1},
		{270, 3},
		{190, 1},
		{190, 2},
		{190, 3},
		{190, 3},
		{190, 4},
		{190, 3},
		{190, 3},
		{190, 4},
		{190, 2},
		{193, 1},
		{193, 3},
		{193, 3},
		{164, 3},
		{275, 4},
		{275, 4},
		{275, 4},
		{163, 3},
		{243, 0},
		{243, 1},
		{198, 3},
		{198, 1},
		{198, 3},
		{198, 1},
		{198, 3},
		{198, 1},
		{194, 2},
		{172, 0},
		{172, 1},
		{200, 2},
		{266, 0},
		{266, 1},
		{197, 1},
		{197, 1},
		{228, 1},
		{228, 3},
		{274, 2},
		{274, 8},
		{248, 2},
		{249, 0},
		{249, 1},
		{191, 1},
		{191, 1},
		{191, 1},
		{191, 3},
		{191, 4},
		{191, 5},
		{191, 4},
		{192, 0},
		{192, 1},
		{178, 0},
		{178, 1},
		{177, 1},
		{177, 2},
		{171, 5},
		{173, 0},
		{173, 2},
		{184, 0},
		{184, 3},
		{207, 1},
		{207, 3},
		{196, 1},
		{196, 2},
		{269, 1},
		{269, 1},
		{185, 0},
		{185, 2},
		{189, 0},
		{189, 3},
		{188, 0},
		{188, 2},
		{188, 4},
		{188, 4},
		{202, 1},
		{202, 1},
		{201, 1},
		{240, 9},
		{259, 1},
		{259, 3},
		{220, 5},
		{242, 2},
		{221, 0},
		{221, 2},
		{222, 0},
		{222, 3},
		{175, 1},
		{204, 1},
		{294, 1},
		{176, 1},
		{121, 1},
		{84, 1},
		{84, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{273, 1},
		{273, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [595][]uint16{
		// 0
		{1: 385, 339, 339, 31: 87, 33: 87, 381, 87, 50: 375, 376, 53: 380, 58: 382, 171: 384, 177: 383, 378, 181: 372, 205: 362, 208: 363, 377, 364, 365, 366, 379, 367, 368, 217: 361, 369, 223: 370, 236: 371, 239: 360, 373, 386, 374, 253: 358, 279: 359},
		{2: 357},
		{2: 356, 950},
		{2: 355, 355},
		{2: 353, 353},
		// 5
		{2: 352, 352},
		{2: 351, 351},
		{2: 350, 350},
		{2: 349, 349},
		{2: 348, 348},
		// 10
		{2: 347, 347},
		{2: 346, 346},
		{2: 345, 345},
		{2: 344, 344},
		{2: 343, 343},
		// 15
		{2: 342, 342},
		{2: 341, 341},
		{2: 340, 340},
		{2: 338, 338},
		{2: 337, 337},
		// 20
		{54: 932, 187: 334, 263: 933, 280: 934},
		{31: 529, 33: 896, 897, 898, 237: 528},
		{54: 886, 187: 887},
		{1: 385, 31: 87, 171: 384, 177: 383, 527, 181: 885},
		{123: 324, 125: 324, 224: 849, 848, 847},
		// 25
		{2: 163, 163},
		{1: 385, 31: 86, 33: 86, 86, 86, 171: 846},
		{1: 85, 31: 85, 33: 85, 85, 85},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 434, 390},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 388, 390, 175: 387},
		// 30
		{2: 57, 57},
		{52, 2: 52, 52, 7: 52, 10: 52, 52, 52, 17: 52, 83: 52, 123: 52, 125: 52},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 83: 47, 86: 47, 47, 90: 47, 47, 47, 47, 97: 47, 47, 120: 47, 123: 47, 47, 47, 47, 129: 47, 47, 47, 162: 47},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 83: 46, 86: 46, 46, 90: 46, 46, 46, 46, 97: 46, 46, 120: 46, 123: 46, 46, 46, 46, 129: 46, 46, 46, 162: 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 83: 45, 86: 45, 45, 90: 45, 45, 45, 45, 97: 45, 45, 120: 45, 123: 45, 45, 45, 45, 129: 45, 45, 45, 162: 45},
		// 35
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 83: 44, 86: 44, 44, 90: 44, 44, 44, 44, 97: 44, 44, 120: 44, 123: 44, 44, 44, 44, 129: 44, 44, 44, 162: 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 83: 43, 86: 43, 43, 90: 43, 43, 43, 43, 97: 43, 43, 120: 43, 123: 43, 43, 43, 43, 129: 43, 43, 43, 162: 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 83: 42, 86: 42, 42, 90: 42, 42, 42, 42, 97: 42, 42, 120: 42, 123: 42, 42, 42, 42, 129: 42, 42, 42, 162: 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 83: 41, 86: 41, 41, 90: 41, 41, 41, 41, 97: 41, 41, 120: 41, 123: 41, 41, 41, 41, 129: 41, 41, 41, 162: 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 83: 40, 86: 40, 40, 90: 40, 40, 40, 40, 97: 40, 40, 120: 40, 123: 40, 40, 40, 40, 129: 40, 40, 40, 162: 40},
		// 40
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 83: 39, 86: 39, 39, 90: 39, 39, 39, 39, 97: 39, 39, 120: 39, 123: 39, 39, 39, 39, 129: 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 83: 38, 86: 38, 38, 90: 38, 38, 38, 38, 97: 38, 38, 120: 38, 123: 38, 38, 38, 38, 129: 38, 38, 38, 162: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 83: 37, 86: 37, 37, 90: 37, 37, 37, 37, 97: 37, 37, 120: 37, 123: 37, 37, 37, 37, 129: 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 83: 36, 86: 36, 36, 90: 36, 36, 36, 36, 97: 36, 36, 120: 36, 123: 36, 36, 36, 36, 129: 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 83: 35, 86: 35, 35, 90: 35, 35, 35, 35, 97: 35, 35, 120: 35, 123: 35, 35, 35, 35, 129: 35, 35, 35, 162: 35},
		// 45
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 83: 34, 86: 34, 34, 90: 34, 34, 34, 34, 97: 34, 34, 120: 34, 123: 34, 34, 34, 34, 129: 34, 34, 34, 162: 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 83: 33, 86: 33, 33, 90: 33, 33, 33, 33, 97: 33, 33, 120: 33, 123: 33, 33, 33, 33, 129: 33, 33, 33, 162: 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 83: 32, 86: 32, 32, 90: 32, 32, 32, 32, 97: 32, 32, 120: 32, 123: 32, 32, 32, 32, 129: 32, 32, 32, 162: 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 83: 31, 86: 31, 31, 90: 31, 31, 31, 31, 97: 31, 31, 120: 31, 123: 31, 31, 31, 31, 129: 31, 31, 31, 162: 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 83: 30, 86: 30, 30, 90: 30, 30, 30, 30, 97: 30, 30, 120: 30, 123: 30, 30, 30, 30, 129: 30, 30, 30, 162: 30},
		// 50
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 83: 29, 86: 29, 29, 90: 29, 29, 29, 29, 97: 29, 29, 120: 29, 123: 29, 29, 29, 29, 129: 29, 29, 29, 162: 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 83: 28, 86: 28, 28, 90: 28, 28, 28, 28, 97: 28, 28, 120: 28, 123: 28, 28, 28, 28, 129: 28, 28, 28, 162: 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 83: 27, 86: 27, 27, 90: 27, 27, 27, 27, 97: 27, 27, 120: 27, 123: 27, 27, 27, 27, 129: 27, 27, 27, 162: 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 83: 26, 86: 26, 26, 90: 26, 26, 26, 26, 97: 26, 26, 120: 26, 123: 26, 26, 26, 26, 129: 26, 26, 26, 162: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 83: 25, 86: 25, 25, 90: 25, 25, 25, 25, 97: 25, 25, 120: 25, 123: 25, 25, 25, 25, 129: 25, 25, 25},
		// 55
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 83: 24, 86: 24, 24, 90: 24, 24, 24, 24, 97: 24, 24, 120: 24, 123: 24, 24, 24, 24, 129: 24, 24, 24, 162: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 83: 23, 86: 23, 23, 90: 23, 23, 23, 23, 97: 23, 23, 120: 23, 123: 23, 23, 23, 23, 129: 23, 23, 23, 162: 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 83: 22, 86: 22, 22, 90: 22, 22, 22, 22, 97: 22, 22, 120: 22, 123: 22, 22, 22, 22, 129: 22, 22, 22, 162: 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 83: 21, 86: 21, 21, 90: 21, 21, 21, 21, 97: 21, 21, 120: 21, 123: 21, 21, 21, 21, 129: 21, 21, 21, 162: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 83: 20, 86: 20, 20, 90: 20, 20, 20, 20, 97: 20, 20, 120: 20, 123: 20, 20, 20, 20, 129: 20, 20, 20},
		// 60
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 83: 19, 86: 19, 19, 90: 19, 19, 19, 19, 97: 19, 19, 120: 19, 123: 19, 19, 19, 19, 129: 19, 19, 19, 162: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 83: 18, 86: 18, 18, 90: 18, 18, 18, 18, 97: 18, 18, 120: 18, 123: 18, 18, 18, 18, 129: 18, 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 83: 17, 86: 17, 17, 90: 17, 17, 17, 17, 97: 17, 17, 120: 17, 123: 17, 17, 17, 17, 129: 17, 17, 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 83: 16, 86: 16, 16, 90: 16, 16, 16, 16, 97: 16, 16, 120: 16, 123: 16, 16, 16, 16, 129: 16, 16, 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 83: 15, 86: 15, 15, 90: 15, 15, 15, 15, 97: 15, 15, 120: 15, 123: 15, 15, 15, 15, 129: 15, 15, 15},
		// 65
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 83: 14, 86: 14, 14, 90: 14, 14, 14, 14, 97: 14, 14, 120: 14, 123: 14, 14, 14, 14, 129: 14, 14, 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 83: 13, 86: 13, 13, 90: 13, 13, 13, 13, 97: 13, 13, 120: 13, 123: 13, 13, 13, 13, 129: 13, 13, 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 83: 12, 86: 12, 12, 90: 12, 12, 12, 12, 97: 12, 12, 120: 12, 123: 12, 12, 12, 12, 129: 12, 12, 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 83: 11, 86: 11, 11, 90: 11, 11, 11, 11, 97: 11, 11, 120: 11, 123: 11, 11, 11, 11, 129: 11, 11, 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 83: 10, 86: 10, 10, 90: 10, 10, 10, 10, 97: 10, 10, 120: 10, 123: 10, 10, 10, 10, 129: 10, 10, 10, 162: 10},
		// 70
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 83: 9, 86: 9, 9, 90: 9, 9, 9, 9, 97: 9, 9, 120: 9, 123: 9, 9, 9, 9, 129: 9, 9, 9, 162: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 83: 8, 86: 8, 8, 90: 8, 8, 8, 8, 97: 8, 8, 120: 8, 123: 8, 8, 8, 8, 129: 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 83: 7, 86: 7, 7, 90: 7, 7, 7, 7, 97: 7, 7, 120: 7, 123: 7, 7, 7, 7, 129: 7, 7, 7, 162: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 83: 6, 86: 6, 6, 90: 6, 6, 6, 6, 97: 6, 6, 120: 6, 123: 6, 6, 6, 6, 129: 6, 6, 6, 162: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 83: 5, 86: 5, 5, 90: 5, 5, 5, 5, 97: 5, 5, 120: 5, 123: 5, 5, 5, 5, 129: 5, 5, 5, 162: 5},
		// 75
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 83: 4, 86: 4, 4, 90: 4, 4, 4, 4, 97: 4, 4, 120: 4, 123: 4, 4, 4, 4, 129: 4, 4, 4, 162: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 83: 3, 86: 3, 3, 90: 3, 3, 3, 3, 97: 3, 3, 120: 3, 123: 3, 3, 3, 3, 129: 3, 3, 3, 162: 3},
		{40: 435},
		{32: 441, 46: 438, 437, 49: 439, 163: 440, 190: 442, 193: 436},
		{136, 136, 136, 136, 7: 136, 631, 10: 136, 136, 136, 17: 136, 31: 136, 33: 136, 136, 136, 83: 136, 86: 136, 165: 629, 627, 630, 628, 179: 836, 835, 198: 834, 275: 833},
		// 80
		{32: 441, 43: 674, 673, 163: 625, 672},
		{32: 441, 43: 668, 667, 163: 625, 669},
		{88: 621},
		{127, 127, 127, 127, 7: 127, 127, 10: 127, 127, 127, 17: 127, 31: 127, 33: 127, 127, 127, 83: 127, 86: 127, 165: 127, 127, 127, 127, 179: 127, 127},
		{110, 410, 4: 409, 392, 417, 16: 110, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 98: 110, 172: 608, 194: 607},
		// 85
		{1: 82, 31: 82, 33: 82, 82, 82, 83: 444, 173: 443},
		{1: 83, 31: 83, 33: 83, 83, 83},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 488},
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 33: 305, 305, 305, 305, 305, 305, 305, 305, 305, 87: 830},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 33: 304, 304, 304, 304, 304, 304, 304, 304, 304},
		// 90
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 33: 303, 303, 303, 303, 303, 303, 303, 303, 303},
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 33: 302, 302, 302, 302, 302, 302, 302, 302, 302},
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 33: 301, 301, 301, 301, 301, 301, 301, 301, 301},
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 33: 300, 300, 300, 300, 300, 300, 300, 300, 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 33: 299, 299, 299, 299, 299, 299, 299, 299, 299},
		// 95
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 33: 298, 298, 298, 298, 298, 298, 298, 298, 298},
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 33: 297, 297, 297, 297, 297, 297, 297, 297, 297},
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 33: 296, 296, 296, 296, 296, 296, 296, 296, 296},
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 33: 295, 295, 295, 295, 295, 295, 295, 295, 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 33: 294, 294, 294, 294, 294, 294, 294, 294, 294},
		// 100
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 33: 293, 293, 293, 293, 293, 293, 293, 293, 293},
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 33: 292, 292, 292, 292, 292, 292, 292, 292, 292},
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 33: 291, 291, 291, 291, 291, 291, 291, 291, 291},
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 33: 290, 290, 290, 290, 290, 290, 290, 290, 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 33: 289, 289, 289, 289, 289, 289, 289, 289, 289},
		// 105
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 33: 288, 288, 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 33: 287, 287, 287, 287, 287, 287, 287, 287, 287},
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 33: 286, 286, 286, 286, 286, 286, 286, 286, 286},
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 33: 285, 285, 285, 285, 285, 285, 285, 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 33: 284, 284, 284, 284, 284, 284, 284, 284, 284, 87: 284, 131: 284},
		// 110
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 33: 283, 283, 283, 283, 283, 283, 283, 283, 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 33: 282, 282, 282, 282, 282, 282, 282, 282, 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 33: 281, 281, 281, 281, 281, 281, 281, 281, 281},
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 33: 280, 280, 280, 280, 280, 280, 280, 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 33: 279, 279, 279, 279, 279, 279, 279, 279, 279},
		// 115
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 33: 278, 278, 278, 278, 278, 278, 278, 278, 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 33: 277, 277, 277, 277, 277, 277, 277, 277, 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 33: 276, 276, 276, 276, 276, 276, 276, 276, 276},
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 33: 275, 275, 275, 275, 275, 275, 275, 275, 275},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 33: 274, 274, 274, 274, 274, 274, 274, 274, 274},
		// 120
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 33: 273, 273, 273, 273, 273, 273, 273, 273, 273},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 33: 272, 272, 272, 272, 272, 272, 272, 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 33: 271, 271, 271, 271, 271, 271, 271, 271, 271},
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 33: 270, 270, 270, 270, 270, 270, 270, 270, 270},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 33: 269, 269, 269, 269, 269, 269, 269, 269, 269},
		// 125
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 33: 39, 39, 39, 39, 39, 39, 39, 39, 39, 87: 39, 89: 829, 162: 39},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 33: 36, 36, 36, 36, 36, 36, 36, 36, 36, 87: 36, 89: 828, 162: 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 33: 37, 37, 37, 37, 37, 37, 37, 37, 37, 87: 37, 89: 827, 162: 37},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 33: 25, 25, 25, 25, 25, 25, 25, 25, 25, 87: 25, 89: 819, 162: 25},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 33: 258, 258, 258, 258, 258, 258, 258, 258, 258},
		// 130
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 818},
		{81, 81, 81, 81, 81, 8: 548, 561, 81, 81, 81, 14: 544, 547, 559, 81, 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 81, 33: 81, 81, 81},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 817},
		{1: 815, 4: 409, 392, 417, 8: 487, 489, 31: 87, 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 814, 171: 384, 177: 383, 527, 181: 526},
		{32: 808},
		// 135
		{32: 238},
		{32: 237},
		{32: 236},
		{32: 235},
		{32: 234},
		// 140
		{32: 233},
		{32: 232},
		{32: 231},
		{32: 230},
		{32: 229},
		// 145
		{32: 228},
		{32: 227},
		{32: 226},
		{32: 225},
		{32: 224},
		// 150
		{32: 223},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 799, 20, 20, 20, 20, 20, 20, 20, 20, 20, 87: 20, 162: 20},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 793, 16, 16, 16, 16, 16, 16, 16, 16, 16, 87: 16, 162: 16},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 789, 13, 13, 13, 13, 13, 13, 13, 13, 13, 87: 13, 162: 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 785, 14, 14, 14, 14, 14, 14, 14, 14, 14, 87: 14, 162: 14},
		// 155
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 781, 17, 17, 17, 17, 17, 17, 17, 17, 17, 87: 17, 162: 17},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 777, 12, 12, 12, 12, 12, 12, 12, 12, 12, 87: 12, 162: 12},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 773, 18, 18, 18, 18, 18, 18, 18, 18, 18, 87: 18, 162: 18},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 766, 15, 15, 15, 15, 15, 15, 15, 15, 15, 87: 15, 162: 15},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 753, 11, 11, 11, 11, 11, 11, 11, 11, 11, 87: 11, 162: 11},
		// 160
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 732, 8, 8, 8, 8, 8, 8, 8, 8, 8, 87: 8, 162: 8},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 33: 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 33: 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 36: 720, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 717, 195: 719, 245: 718},
		{32: 525, 132: 524},
		// 165
		{164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 33: 164, 164, 164, 164, 164, 164, 164, 164, 164},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 33: 48, 48, 48, 48, 48, 48, 48, 48, 48, 87: 48, 131: 48},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 33: 166, 166, 166, 166, 166, 166, 166, 166, 166},
		{1: 385, 31: 87, 171: 384, 177: 383, 527, 181: 526},
		{716},
		// 170
		{31: 529, 237: 528},
		{13: 595, 183: 594},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 14: 532, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 531},
		{1: 207, 4: 207, 207, 207, 8: 207, 207, 32: 207, 42: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 88: 207, 207, 94: 207, 207, 207, 99: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 537, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 533, 174: 536, 238: 535, 277: 534},
		// 175
		{13: 160},
		{152, 2: 152, 152, 7: 152, 548, 561, 152, 152, 152, 152, 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 37: 152, 152, 40: 564, 255: 563, 562},
		{7: 542, 13: 161},
		{7: 159, 13: 159},
		{7: 157, 13: 157},
		// 180
		{7: 48, 48, 48, 13: 48, 48, 48, 48, 18: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 40: 48, 87: 48, 162: 538},
		{7: 154, 13: 154, 66: 540, 246: 539},
		{7: 156, 13: 156},
		{89: 474, 94: 476, 96: 475, 128: 541},
		{7: 153, 13: 153},
		// 185
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 537, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 533, 174: 536, 238: 543},
		{7: 158, 13: 158},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 593},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 592},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 591},
		// 190
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 590},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 589},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 588},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 587},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 586},
		// 195
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 585},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 584},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 583},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 582},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 581},
		// 200
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 580},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 579},
		{9: 577, 234: 576},
		{32: 569, 227: 575},
		{19: 567},
		// 205
		{155, 2: 155, 155, 7: 155, 10: 155, 155, 155, 155, 37: 155, 155},
		{151, 2: 151, 151, 7: 151, 10: 151, 151, 151, 151, 37: 151, 151},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 565, 390, 89: 566},
		{150, 2: 150, 150, 7: 150, 10: 150, 150, 150, 150, 37: 150, 150},
		{149, 2: 149, 149, 7: 149, 10: 149, 149, 149, 149, 37: 149, 149},
		// 210
		{32: 569, 227: 568},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 33: 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 570, 281: 571},
		{168, 7: 168, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{572, 7: 573},
		// 215
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 33: 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 574},
		{167, 7: 167, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 33: 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 33: 195, 195, 195, 195, 195, 195, 195, 195, 195},
		// 220
		{234: 578},
		{194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 33: 194, 194, 194, 194, 194, 194, 194, 194, 194},
		{241, 241, 241, 241, 241, 241, 241, 241, 548, 561, 241, 241, 241, 241, 544, 547, 559, 241, 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 241, 241, 556, 241, 33: 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{243, 243, 243, 243, 243, 243, 243, 243, 548, 561, 243, 243, 243, 243, 544, 547, 559, 243, 243, 560, 546, 545, 552, 551, 549, 553, 554, 550, 243, 243, 243, 243, 33: 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{244, 244, 244, 244, 244, 244, 244, 244, 548, 561, 244, 244, 244, 244, 544, 547, 559, 244, 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 244, 244, 244, 244, 33: 244, 244, 244, 244, 244, 244, 244, 244, 244},
		// 225
		{245, 245, 245, 245, 245, 245, 245, 245, 548, 561, 245, 245, 245, 245, 544, 547, 559, 245, 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 245, 245, 556, 245, 33: 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{246, 246, 246, 246, 246, 246, 246, 246, 548, 561, 246, 246, 246, 246, 544, 547, 246, 246, 246, 246, 546, 545, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 33: 246, 246, 246, 246, 246, 246, 246, 246, 246},
		{247, 247, 247, 247, 247, 247, 247, 247, 548, 561, 247, 247, 247, 247, 544, 547, 247, 247, 247, 247, 546, 545, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 33: 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{248, 248, 248, 248, 248, 248, 248, 248, 548, 561, 248, 248, 248, 248, 544, 547, 248, 248, 248, 248, 546, 545, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 33: 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{249, 249, 249, 249, 249, 249, 249, 249, 548, 561, 249, 249, 249, 249, 544, 547, 249, 249, 249, 249, 546, 545, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 33: 249, 249, 249, 249, 249, 249, 249, 249, 249},
		// 230
		{250, 250, 250, 250, 250, 250, 250, 250, 548, 561, 250, 250, 250, 250, 544, 547, 250, 250, 250, 250, 546, 545, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 33: 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{251, 251, 251, 251, 251, 251, 251, 251, 548, 561, 251, 251, 251, 251, 544, 547, 251, 251, 251, 251, 546, 545, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 33: 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{252, 252, 252, 252, 252, 252, 252, 252, 252, 561, 252, 252, 252, 252, 544, 252, 252, 252, 252, 252, 546, 545, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 33: 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{253, 253, 253, 253, 253, 253, 253, 253, 253, 561, 253, 253, 253, 253, 544, 253, 253, 253, 253, 253, 546, 545, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 33: 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 561, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 33: 254, 254, 254, 254, 254, 254, 254, 254, 254},
		// 235
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 561, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 33: 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 561, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 33: 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{82, 2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 444, 173: 687},
		{232: 598, 597, 268: 596},
		{148, 2: 148, 148, 7: 685, 10: 148, 148, 148, 17: 148, 83: 148},
		// 240
		{147, 2: 147, 147, 7: 147, 10: 147, 147, 147, 17: 147, 83: 147},
		{32: 601, 46: 438, 437, 49: 439, 163: 440, 190: 600, 193: 436, 262: 599},
		{143, 2: 143, 143, 7: 143, 10: 143, 143, 143, 17: 143, 83: 143, 86: 681, 260: 682, 680},
		{140, 2: 140, 140, 7: 140, 10: 140, 140, 140, 17: 140, 83: 140, 86: 140},
		{110, 410, 4: 409, 392, 417, 16: 110, 32: 441, 43: 407, 406, 402, 605, 604, 400, 606, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 98: 110, 163: 440, 172: 608, 190: 603, 193: 436, 607, 270: 602},
		// 245
		{677, 7: 678},
		{138, 7: 138},
		{31, 16: 31, 32: 441, 43: 674, 673, 98: 31, 163: 625, 672},
		{32, 16: 32, 32: 441, 43: 668, 667, 98: 32, 163: 625, 669},
		{28, 16: 28, 88: 621, 98: 28},
		// 250
		{620},
		{107, 16: 614, 97: 107, 613, 120: 107, 197: 611, 200: 612, 266: 610},
		{109, 2: 109, 109, 7: 109, 13: 109, 16: 109, 42: 109, 97: 109, 109, 120: 109, 124: 109, 130: 109},
		{111, 97: 111, 120: 111},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 617, 390, 176: 616, 228: 615},
		// 255
		{106, 97: 106, 120: 106},
		{1: 105, 4: 105, 105, 105, 43: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{1: 104, 4: 104, 104, 104, 43: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{108, 14: 108, 108, 90: 108, 108, 108, 108, 97: 108, 120: 108, 126: 618},
		{103, 14: 103, 103, 90: 103, 103, 103, 103, 97: 103, 120: 103, 126: 103},
		// 260
		{49, 2: 49, 49, 14: 49, 49, 32: 49, 90: 49, 49, 49, 49, 97: 49, 120: 49, 126: 49},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 617, 390, 176: 619},
		{102, 14: 102, 102, 90: 102, 102, 102, 102, 97: 102, 120: 102, 126: 102},
		{120, 120, 120, 120, 120, 7: 120, 120, 10: 120, 120, 120, 17: 120, 31: 120, 120, 120, 120, 120, 83: 120, 86: 120, 165: 120, 120, 120, 120, 179: 120, 120},
		{43: 623, 622},
		// 265
		{32: 441, 163: 625, 666},
		{32: 441, 163: 625, 624},
		{129, 129, 129, 129, 7: 129, 10: 129, 129, 129, 17: 129, 31: 129, 33: 129, 129, 129, 83: 129, 86: 129},
		{8: 631, 32: 633, 165: 629, 627, 630, 628, 198: 632, 274: 626},
		{32: 441, 163: 665},
		// 270
		{1: 410, 4: 409, 392, 417, 16: 110, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 97: 110, 110, 120: 110, 172: 608, 194: 662},
		{116, 4: 116, 14: 116, 116, 32: 116, 83: 116, 90: 116, 92: 116},
		{1: 410, 4: 409, 392, 417, 16: 110, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 97: 110, 110, 172: 608, 194: 660},
		{114, 4: 114, 14: 114, 114, 32: 114, 83: 114, 90: 114, 92: 114},
		{112, 4: 112, 14: 112, 112, 32: 112, 83: 112, 90: 112, 92: 112},
		// 275
		{14: 645, 646, 32: 89, 90: 647, 92: 648, 191: 649, 659},
		{8: 119, 32: 441, 163: 634, 165: 119, 119, 119, 119, 243: 635},
		{118, 4: 118, 8: 118, 83: 118, 165: 118, 118, 118, 118},
		{8: 631, 165: 629, 627, 630, 628, 198: 636},
		{119, 4: 119, 32: 441, 83: 119, 163: 634, 243: 637},
		// 280
		{82, 4: 82, 83: 444, 173: 638},
		{98, 4: 640, 248: 641, 639},
		{643},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 642},
		{97},
		// 285
		{99, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{14: 645, 646, 32: 89, 90: 647, 92: 648, 191: 649, 644},
		{32: 100},
		{32: 96, 91: 96, 93: 96},
		{32: 95, 91: 95, 93: 95},
		// 290
		{32: 94, 91: 94, 93: 94},
		{7: 651, 88: 650},
		{32: 88, 91: 88, 93: 88},
		{7: 655, 182: 654},
		{88: 652},
		// 295
		{182: 653},
		{32: 90, 91: 90, 93: 90},
		{32: 93, 91: 93, 93: 93},
		{88: 657, 182: 656},
		{32: 92, 91: 92, 93: 92},
		// 300
		{182: 658},
		{32: 91, 91: 91, 93: 91},
		{32: 101},
		{97: 661},
		{115, 4: 115, 14: 115, 115, 32: 115, 83: 115, 90: 115, 92: 115},
		// 305
		{97: 664, 120: 663},
		{117, 4: 117, 14: 117, 117, 32: 117, 83: 117, 90: 117, 92: 117},
		{113, 4: 113, 14: 113, 113, 32: 113, 83: 113, 90: 113, 92: 113},
		{124, 124, 124, 124, 7: 124, 10: 124, 124, 124, 17: 124, 31: 124, 33: 124, 124, 124, 83: 124, 86: 124},
		{132, 132, 132, 132, 7: 132, 10: 132, 132, 132, 17: 132, 31: 132, 33: 132, 132, 132, 83: 132, 86: 132},
		// 310
		{32: 441, 163: 625, 671},
		{32: 441, 163: 625, 670},
		{128, 128, 128, 128, 7: 128, 10: 128, 128, 128, 17: 128, 31: 128, 33: 128, 128, 128, 83: 128, 86: 128},
		{130, 130, 130, 130, 7: 130, 10: 130, 130, 130, 17: 130, 31: 130, 33: 130, 130, 130, 83: 130, 86: 130},
		{133, 133, 133, 133, 7: 133, 10: 133, 133, 133, 17: 133, 31: 133, 33: 133, 133, 133, 83: 133, 86: 133},
		// 315
		{135, 135, 135, 135, 7: 135, 10: 135, 135, 135, 17: 135, 31: 135, 33: 135, 135, 135, 83: 135, 86: 135},
		{32: 441, 163: 625, 676},
		{32: 441, 163: 625, 675},
		{131, 131, 131, 131, 7: 131, 10: 131, 131, 131, 17: 131, 31: 131, 33: 131, 131, 131, 83: 131, 86: 131},
		{134, 134, 134, 134, 7: 134, 10: 134, 134, 134, 17: 134, 31: 134, 33: 134, 134, 134, 83: 134, 86: 134},
		// 320
		{139, 2: 139, 139, 7: 139, 10: 139, 139, 139, 17: 139, 83: 139, 86: 139},
		{32: 441, 46: 438, 437, 49: 439, 163: 440, 190: 679, 193: 436},
		{137, 7: 137},
		{141, 2: 141, 141, 7: 141, 10: 141, 141, 141, 17: 141, 83: 141, 276: 684},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 388, 390, 175: 683},
		// 325
		{142, 2: 142, 142, 7: 142, 10: 142, 142, 142, 17: 142, 83: 142},
		{144, 2: 144, 144, 7: 144, 10: 144, 144, 144, 17: 144, 83: 144},
		{145, 2: 145, 145, 7: 145, 10: 145, 145, 145, 17: 145, 83: 145},
		{232: 598, 686},
		{146, 2: 146, 146, 7: 146, 10: 146, 146, 146, 17: 146, 83: 146},
		// 330
		{80, 2: 80, 80, 10: 80, 80, 80, 17: 689, 184: 688},
		{72, 2: 72, 72, 10: 72, 72, 700, 185: 699},
		{206: 690},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 533, 174: 693, 196: 692, 207: 691},
		{79, 2: 79, 79, 7: 697, 10: 79, 79, 79},
		// 335
		{78, 2: 78, 78, 7: 78, 10: 78, 78, 78},
		{76, 2: 76, 76, 7: 76, 10: 76, 76, 76, 37: 695, 696, 269: 694},
		{75, 2: 75, 75, 7: 75, 10: 75, 75, 75},
		{74, 2: 74, 74, 7: 74, 10: 74, 74, 74},
		{73, 2: 73, 73, 7: 73, 10: 73, 73, 73},
		// 340
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 533, 174: 693, 196: 698},
		{77, 2: 77, 77, 7: 77, 10: 77, 77, 77},
		{70, 2: 70, 70, 10: 70, 703, 189: 702},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 701},
		{71, 2: 71, 71, 8: 548, 561, 71, 71, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		// 345
		{68, 2: 68, 68, 10: 707, 188: 706},
		{206: 704},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 533, 174: 693, 196: 692, 207: 705},
		{69, 2: 69, 69, 7: 697, 10: 69},
		{162, 2: 162, 162},
		// 350
		{88: 711, 90: 710, 201: 709, 708},
		{67, 2: 67, 67, 7: 712, 45: 713},
		{64, 2: 64, 64, 7: 64, 45: 64},
		{63, 2: 63, 63, 7: 63, 45: 63},
		{62, 2: 62, 62, 7: 62, 45: 62},
		// 355
		{88: 711, 90: 710, 201: 709, 715},
		{88: 711, 90: 710, 201: 709, 714},
		{65, 2: 65, 65},
		{66, 2: 66, 66},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 33: 165, 165, 165, 165, 165, 165, 165, 165, 165},
		// 360
		{8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 36: 720, 195: 719, 245: 729},
		{5: 173, 36: 720, 39: 726, 195: 725, 216: 724},
		{5: 176, 36: 176, 39: 176},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 721},
		{8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 41: 722},
		// 365
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 723},
		{5: 174, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 36: 174, 39: 174},
		{5: 728},
		{5: 175, 36: 175, 39: 175},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 727},
		// 370
		{5: 172, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 33: 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{5: 173, 36: 720, 39: 726, 195: 725, 216: 730},
		{5: 731},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 33: 178, 178, 178, 178, 178, 178, 178, 178, 178},
		// 375
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 733},
		{8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 40: 734},
		{48: 744, 63: 737, 743, 740, 67: 736, 745, 250: 735, 252: 742, 257: 741, 264: 738, 739},
		{752},
		{192},
		// 380
		{191},
		{190},
		{189},
		{188},
		{187},
		// 385
		{186},
		{185},
		{184, 60: 749},
		{182, 60: 746},
		{48: 747},
		// 390
		{62: 748},
		{181},
		{48: 750},
		{62: 751},
		{183},
		// 395
		{193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 33: 193, 193, 193, 193, 193, 193, 193, 193, 193},
		{52: 757, 55: 758, 759, 756, 59: 760, 61: 755, 69: 761, 762, 254: 754},
		{13: 763},
		{13: 203},
		{13: 202},
		// 400
		{13: 201},
		{13: 200},
		{13: 199},
		{13: 198},
		{13: 197},
		// 405
		{13: 196},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 764},
		{765, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 33: 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 767},
		// 410
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 768},
		{206, 7: 770, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556, 267: 769},
		{772},
		{89: 474, 94: 476, 96: 475, 128: 771},
		{205},
		// 415
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 33: 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 774},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 775},
		{776, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 33: 210, 210, 210, 210, 210, 210, 210, 210, 210},
		// 420
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 778},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 779},
		{780, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 782},
		// 425
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 783},
		{784, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 786},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 787},
		// 430
		{788, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 790},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 791},
		{792, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		// 435
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{1: 208, 4: 208, 208, 208, 8: 208, 208, 14: 794, 32: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 88: 208, 208, 94: 208, 208, 208, 99: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 169: 530, 795},
		{798},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 796},
		{797, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		// 440
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 800},
		{8: 548, 561, 13: 801, 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 802, 278: 803},
		// 445
		{219, 6: 219, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{218, 6: 805, 258: 804},
		{807},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 806},
		{217, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		// 450
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 33: 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 809, 247: 810},
		{222, 7: 222, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{811, 7: 812},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 33: 239, 239, 239, 239, 239, 239, 239, 239, 239},
		// 455
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 813},
		{221, 7: 221, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{816, 8: 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{26, 410, 4: 409, 392, 417, 8: 26, 26, 14: 26, 26, 26, 18: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 434, 390, 87: 26},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 33: 240, 240, 240, 240, 240, 240, 240, 240, 240},
		// 460
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 561, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 33: 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 561, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 33: 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{52: 823, 55: 824, 825, 822, 59: 826, 61: 821, 251: 820},
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 33: 265, 265, 265, 265, 265, 265, 265, 265, 265},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 33: 264, 264, 264, 264, 264, 264, 264, 264, 264},
		// 465
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 33: 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 33: 262, 262, 262, 262, 262, 262, 262, 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 33: 261, 261, 261, 261, 261, 261, 261, 261, 261},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 33: 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 33: 259, 259, 259, 259, 259, 259, 259, 259, 259},
		// 470
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 33: 266, 266, 266, 266, 266, 266, 266, 266, 266},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 33: 267, 267, 267, 267, 267, 267, 267, 267, 267},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 33: 268, 268, 268, 268, 268, 268, 268, 268, 268},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 832, 390, 204: 831},
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 33: 306, 306, 306, 306, 306, 306, 306, 306, 306, 129: 306},
		// 475
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 33: 51, 51, 51, 51, 51, 51, 51, 51, 51, 129: 51},
		{32: 441, 163: 845},
		{32: 441, 163: 844},
		{16: 614, 98: 613, 197: 611, 200: 840},
		{16: 614, 98: 613, 197: 611, 200: 837},
		// 480
		{14: 645, 646, 90: 647, 89, 648, 191: 649, 838},
		{91: 839},
		{32: 122},
		{14: 645, 646, 90: 647, 89, 648, 89, 191: 649, 841},
		{91: 843, 93: 842},
		// 485
		{32: 123},
		{32: 121},
		{125, 125, 125, 125, 7: 125, 125, 10: 125, 125, 125, 17: 125, 31: 125, 33: 125, 125, 125, 83: 125, 86: 125, 165: 125, 125, 125, 125, 179: 125, 125},
		{126, 126, 126, 126, 7: 126, 126, 10: 126, 126, 126, 17: 126, 31: 126, 33: 126, 126, 126, 83: 126, 86: 126, 165: 126, 126, 126, 126, 179: 126, 126},
		{1: 84, 31: 84, 33: 84, 84, 84},
		// 490
		{123: 854, 125: 853, 199: 852, 219: 851},
		{123: 323, 125: 323},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 388, 390, 175: 850},
		{123: 322, 125: 322},
		{2: 326, 326, 7: 883},
		// 495
		{2: 321, 321, 7: 321, 13: 321},
		{1: 410, 110, 110, 409, 392, 417, 110, 13: 110, 42: 110, 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 124: 110, 172: 881},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 609, 390, 130: 110, 172: 855},
		{130: 856},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 858, 390, 244: 857},
		// 500
		{18: 859},
		{2: 317, 317, 7: 317, 13: 317, 18: 317, 42: 317, 124: 317},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 858, 390, 244: 860},
		{2: 315, 315, 7: 315, 13: 315, 42: 864, 124: 315, 229: 861, 863, 862},
		{2: 318, 318, 7: 318, 13: 318},
		// 505
		{2: 312, 312, 7: 312, 13: 312, 124: 870, 271: 869, 868},
		{2: 314, 314, 7: 314, 13: 314, 124: 314},
		{32: 865},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 617, 390, 176: 616, 228: 866},
		{867, 126: 618},
		// 510
		{2: 313, 313, 7: 313, 13: 313, 124: 313},
		{2: 316, 316, 7: 316, 13: 316},
		{2: 311, 311, 7: 311, 13: 311},
		{32: 871},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 875, 127: 874, 203: 873, 235: 872},
		// 515
		{878, 7: 879},
		{309, 7: 309},
		{129: 876},
		{87: 830},
		{1: 410, 4: 409, 392, 417, 8: 487, 489, 32: 490, 42: 501, 407, 406, 402, 404, 405, 483, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 482, 429, 433, 430, 484, 426, 427, 514, 512, 517, 509, 516, 389, 485, 515, 511, 510, 508, 513, 84: 523, 390, 88: 477, 474, 94: 476, 521, 475, 99: 486, 495, 507, 520, 496, 497, 478, 504, 480, 479, 498, 502, 499, 505, 494, 500, 492, 503, 506, 481, 493, 121: 466, 445, 127: 446, 467, 132: 522, 456, 449, 448, 469, 453, 461, 460, 455, 470, 464, 457, 454, 491, 462, 473, 459, 458, 447, 451, 463, 468, 450, 465, 519, 518, 452, 471, 472, 877},
		// 520
		{307, 7: 307, 548, 561, 14: 544, 547, 559, 18: 557, 560, 546, 545, 552, 551, 549, 553, 554, 550, 555, 558, 556},
		{2: 310, 310, 7: 310, 13: 310},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 875, 127: 874, 203: 880},
		{308, 7: 308},
		{2: 315, 315, 7: 315, 13: 315, 42: 864, 124: 315, 229: 882, 863, 862},
		// 525
		{2: 319, 319, 7: 319, 13: 319},
		{123: 854, 125: 853, 199: 884},
		{2: 320, 320, 7: 320, 13: 320},
		{2: 327, 327},
		{1: 56, 4: 56, 56, 56, 43: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 186: 889, 221: 894},
		// 530
		{1: 56, 4: 56, 56, 56, 43: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 186: 889, 221: 888},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 891, 390},
		{95: 890},
		{1: 55, 4: 55, 55, 55, 43: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{86: 892},
		// 535
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 617, 390, 176: 893},
		{2: 328, 328},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 388, 390, 175: 895},
		{2: 329, 329},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 923, 282: 922},
		// 540
		{123: 324, 125: 324, 224: 849, 848, 914},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 901, 220: 900, 259: 899},
		{7: 907, 13: 595, 183: 906},
		{7: 60, 13: 60},
		{131: 902},
		// 545
		{32: 903},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 875, 127: 874, 203: 873, 235: 904},
		{905, 7: 879},
		{7: 58, 13: 58},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 444, 173: 909},
		// 550
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 901, 220: 908},
		{7: 59, 13: 59},
		{2: 80, 80, 10: 80, 80, 80, 17: 689, 184: 910},
		{2: 72, 72, 10: 72, 72, 700, 185: 911},
		{2: 70, 70, 10: 70, 703, 189: 912},
		// 555
		{2: 68, 68, 10: 707, 188: 913},
		{2: 61, 61},
		{123: 854, 125: 853, 199: 852, 219: 915},
		{7: 883, 13: 595, 183: 916},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 444, 173: 917},
		// 560
		{2: 80, 80, 10: 80, 80, 80, 17: 689, 184: 918},
		{2: 72, 72, 10: 72, 72, 700, 185: 919},
		{2: 70, 70, 10: 70, 703, 189: 920},
		{2: 68, 68, 10: 707, 188: 921},
		{2: 325, 325},
		// 565
		{7: 925, 13: 595, 183: 924},
		{7: 331, 13: 331},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 444, 173: 927},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 523, 390, 121: 466, 926},
		{7: 330, 13: 330},
		// 570
		{2: 80, 80, 10: 80, 80, 80, 17: 689, 184: 928},
		{2: 72, 72, 10: 72, 72, 700, 185: 929},
		{2: 70, 70, 10: 70, 703, 189: 930},
		{2: 68, 68, 10: 707, 188: 931},
		{2: 332, 332},
		// 575
		{1: 54, 4: 54, 54, 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 186: 937, 222: 948},
		{187: 935},
		{187: 333},
		{86: 54, 186: 937, 222: 936},
		{86: 940},
		// 580
		{9: 938},
		{95: 939},
		{1: 53, 4: 53, 53, 53, 43: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 86: 53},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 617, 390, 176: 941},
		{32: 942},
		// 585
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 832, 390, 204: 944, 273: 943},
		{945, 7: 946},
		{2, 7: 2},
		{2: 335, 335},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 832, 390, 204: 947},
		// 590
		{1, 7: 1},
		{1: 410, 4: 409, 392, 417, 43: 407, 406, 402, 404, 405, 400, 408, 391, 393, 398, 395, 403, 412, 413, 414, 401, 415, 431, 396, 432, 394, 397, 429, 433, 430, 399, 426, 427, 418, 419, 428, 420, 425, 389, 411, 421, 422, 423, 416, 424, 84: 388, 390, 175: 949},
		{2: 336, 336},
		{1: 385, 339, 339, 31: 87, 33: 87, 381, 87, 50: 375, 376, 53: 380, 58: 382, 171: 384, 177: 383, 378, 181: 372, 205: 362, 208: 363, 377, 364, 365, 366, 379, 367, 368, 217: 361, 369, 223: 370, 236: 371, 239: 951, 373, 386, 374},
		{2: 354, 354},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 293

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 18:
		{
			parser.yyVAL.statement = nil
		}
	case 19:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 20:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-7].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-5].item.(bool),
				LabelName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 23:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 24:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 25:
		{
			ds := &ast.DeleteStmt{
				VariableReferences: yyS[yypt-6].item.([]*ast.VariableReference),
				From:               yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 26:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 27:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.VariableReference), yyS[yypt-0].expr.(*ast.VariableReference))
		}
	case 28:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 29:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-3].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-2].ident),
				LabelName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 30:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 31:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-0].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-1].item != nil {
				is.IntoGraphName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.statement = is
		}
	case 32:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
				From:       yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 33:
		{
			parser.yyVAL.item = nil
		}
	case 35:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 36:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 37:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 38:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 39:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].ident,
				To:                  yyS[yypt-1].ident,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 41:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 42:
		{
			parser.yyVAL.item = nil
		}
	case 44:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 45:
		{
			parser.yyVAL.item = nil
		}
	case 47:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 48:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 49:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 50:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 51:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].expr.(*ast.VariableReference),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 73:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].ident,
			}
		}
	case 81:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 82:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 83:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 84:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 85:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 86:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 87:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 88:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 89:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 90:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 91:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 92:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 93:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 94:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 95:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 96:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 97:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 98:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 99:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 100:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 101:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 102:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 103:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 104:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 105:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 106:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 107:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 108:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 109:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 110:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 111:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 112:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 115:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 135:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 136:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 137:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 139:
		{
			parser.yyVAL.expr = nil
		}
	case 140:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 142:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 143:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 144:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 145:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 146:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 147:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 148:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 149:
		{
			parser.yyVAL.item = false
		}
	case 150:
		{
			parser.yyVAL.item = true
		}
	case 151:
		{
			parser.yyVAL.expr = nil
		}
	case 152:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 153:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 154:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 155:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 156:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 157:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 158:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 159:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 160:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 161:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 162:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 163:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 164:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(ast.DataType),
			}
		}
	case 165:
		{
			parser.yyVAL.item = ast.DataTypeString
		}
	case 166:
		{
			parser.yyVAL.item = ast.DataTypeBoolean
		}
	case 167:
		{
			parser.yyVAL.item = ast.DataTypeInteger
		}
	case 168:
		{
			parser.yyVAL.item = ast.DataTypeInt
		}
	case 169:
		{
			parser.yyVAL.item = ast.DataTypeLong
		}
	case 170:
		{
			parser.yyVAL.item = ast.DataTypeFloat
		}
	case 171:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 172:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 173:
		{
			parser.yyVAL.item = ast.DataTypeTime
		}
	case 174:
		{
			parser.yyVAL.item = ast.DataTypeTimeWithZone
		}
	case 175:
		{
			parser.yyVAL.item = ast.DataTypeTimestamp
		}
	case 176:
		{
			parser.yyVAL.item = ast.DataTypeTimestampWithZone
		}
	case 179:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 180:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 181:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 182:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 183:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 184:
		{
			parser.yyVAL.expr = nil
		}
	case 185:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 186:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 187:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 188:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 189:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 190:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 191:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 192:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 195:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 196:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 197:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 198:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 199:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 200:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 201:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 202:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 203:
		{
			parser.yyVAL.item = ""
		}
	case 204:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 205:
		{
			parser.yyVAL.item = nil
		}
	case 206:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 207:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 208:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 209:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 210:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 211:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 212:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 213:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 214:
		{
			parser.yyVAL.item = nil
		}
	case 217:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 218:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 219:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 220:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 221:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 222:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 223:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 224:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 225:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 226:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 227:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 228:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 229:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 230:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 231:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 232:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 233:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 234:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 235:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 236:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 237:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 238:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 240:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 241:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 242:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 243:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 244:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 245:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 246:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 247:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 248:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 249:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 250:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 254:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 255:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 256:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 257:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 258:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 259:
		{
			parser.yyVAL.item = nil
		}
	case 261:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 262:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 263:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 264:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 265:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 266:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 267:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 268:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 270:
		{
			parser.yyVAL.item = nil
		}
	case 272:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 273:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 274:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 275:
		{
			parser.yyVAL.item = nil
		}
	case 276:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 277:
		{
			parser.yyVAL.item = nil
		}
	case 278:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 279:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 280:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 281:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 282:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 283:
		{
			parser.yyVAL.item = false
		}
	case 284:
		{
			parser.yyVAL.item = true
		}
	case 285:
		{
			parser.yyVAL.item = nil
		}
	case 286:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 287:
		{
			parser.yyVAL.item = nil
		}
	case 288:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 289:
		{
			parser.yyVAL.item = nil
		}
	case 290:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 291:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 292:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 294:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 295:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 296:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 297:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 298:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 299:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].expr.(*ast.VariableReference),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 300:
		{
			parser.yyVAL.statement = &ast.UseStmt{}
		}
	case 301:
		{
			parser.yyVAL.item = false
		}
	case 302:
		{
			parser.yyVAL.item = true
		}
	case 303:
		{
			parser.yyVAL.item = false
		}
	case 304:
		{
			parser.yyVAL.item = true
		}
	case 305:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 306:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 307:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 308:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 356:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
