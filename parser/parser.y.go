// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57491
	yyEOFCode          = 57344
	abs                = 57452
	all                = 57416
	allDifferent       = 57459
	allProp            = 57474
	and                = 57391
	andand             = 57351
	andnot             = 57465
	any                = 57417
	arrayAgg           = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57466
	avg                = 57431
	begin              = 57401
	between            = 57392
	bitLit             = 57464
	booleanType        = 57405
	by                 = 57355
	caseKwd            = 57395
	cast               = 57440
	ceil               = 57453
	ceiling            = 57454
	cheapest           = 57419
	comment            = 57403
	commit             = 57404
	cost               = 57421
	count              = 57432
	create             = 57356
	dateType           = 57409
	day                = 57410
	decLit             = 57461
	decimalType        = 57406
	defaultKwd         = 57357
	deleteKwd          = 57358
	desc               = 57359
	distinct           = 57400
	div                = 57488
	doubleAtIdentifier = 57349
	doubleType         = 57360
	drop               = 57361
	edge               = 57362
	edgeIncomingLeft   = 57479
	edgeIncomingRight  = 57480
	edgeOutgoingLeft   = 57477
	edgeOutgoingRight  = 57478
	elementNumber      = 57455
	elseKwd            = 57398
	empty              = 57485
	end                = 57402
	eq                 = 57467
	yyErrCode          = 57345
	exists             = 57363
	explain            = 57407
	extract            = 57437
	falseKwd           = 57364
	floatLit           = 57460
	floatType          = 57365
	floor              = 57456
	forkKwd            = 57429
	from               = 57366
	ge                 = 57468
	graph              = 57415
	group              = 57367
	hasLabel           = 57457
	having             = 57368
	hexLit             = 57463
	hour               = 57424
	id                 = 57458
	identifier         = 57346
	ifKwd              = 57369
	in                 = 57399
	inDegree           = 57447
	index              = 57370
	insert             = 57371
	intLit             = 57462
	integerType        = 57372
	interval           = 57423
	into               = 57373
	invalid            = 57350
	is                 = 57374
	javaRegexpLike     = 57448
	label              = 57449
	labels             = 57393
	le                 = 57469
	leftArrow          = 57475
	limit              = 57375
	listagg            = 57433
	lower              = 57445
	lowerThanOn        = 57486
	match              = 57376
	matchNumber        = 57450
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57489
	month              = 57426
	neg                = 57490
	neq                = 57470
	neqSynonym         = 57471
	not                = 57377
	null               = 57378
	nulleq             = 57472
	offset             = 57414
	on                 = 57379
	or                 = 57390
	order              = 57380
	outDegree          = 57451
	paramMarker        = 57473
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57487
	prefix             = 57444
	properties         = 57394
	reachIncomingLeft  = 57483
	reachIncomingRight = 57484
	reachOutgoingLeft  = 57481
	reachOutgoingRight = 57482
	rightArrow         = 57476
	rollback           = 57413
	second             = 57427
	selectKwd          = 57381
	set                = 57382
	shortest           = 57418
	singleAtIdentifier = 57348
	stringKwd          = 57441
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57396
	timeType           = 57412
	timestampType      = 57411
	timezoneHour       = 57438
	timezoneMinute     = 57439
	top                = 57420
	trueKwd            = 57383
	unique             = 57384
	update             = 57385
	uppper             = 57446
	use                = 57386
	vertex             = 57387
	when               = 57397
	where              = 57388
	with               = 57442
	xor                = 57389
	yearType           = 57408
	zone               = 57443

	yyMaxDepth = 200
	yyTabOfs   = -372
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (290x)
		57422: 1,   // path (278x)
		57344: 2,   // $end (273x)
		59:    3,   // ';' (272x)
		44:    4,   // ',' (266x)
		57421: 5,   // cost (266x)
		57402: 6,   // end (262x)
		57429: 7,   // forkKwd (256x)
		57377: 8,   // not (256x)
		45:    9,   // '-' (244x)
		57375: 10,  // limit (227x)
		57380: 11,  // order (222x)
		57368: 12,  // having (217x)
		57367: 13,  // group (201x)
		57366: 14,  // from (198x)
		42:    15,  // '*' (195x)
		43:    16,  // '+' (193x)
		57374: 17,  // is (190x)
		57391: 18,  // and (180x)
		57467: 19,  // eq (180x)
		57399: 20,  // in (180x)
		37:    21,  // '%' (179x)
		47:    22,  // '/' (179x)
		60:    23,  // '<' (179x)
		62:    24,  // '>' (179x)
		57468: 25,  // ge (179x)
		57469: 26,  // le (179x)
		57471: 27,  // neqSynonym (179x)
		57390: 28,  // or (179x)
		57352: 29,  // pipes (179x)
		57389: 30,  // xor (179x)
		40:    31,  // '(' (178x)
		57381: 32,  // selectKwd (178x)
		57358: 33,  // deleteKwd (174x)
		57371: 34,  // insert (174x)
		57385: 35,  // update (174x)
		57397: 36,  // when (158x)
		57354: 37,  // asc (157x)
		57359: 38,  // desc (157x)
		57398: 39,  // elseKwd (156x)
		57353: 40,  // as (155x)
		57412: 41,  // timeType (153x)
		57396: 42,  // then (152x)
		57409: 43,  // dateType (151x)
		57411: 44,  // timestampType (151x)
		57405: 45,  // booleanType (150x)
		57441: 46,  // stringKwd (150x)
		57419: 47,  // cheapest (108x)
		57418: 48,  // shortest (108x)
		57414: 49,  // offset (107x)
		57416: 50,  // all (106x)
		57417: 51,  // any (106x)
		57420: 52,  // top (106x)
		57401: 53,  // begin (105x)
		57404: 54,  // commit (105x)
		57410: 55,  // day (105x)
		57407: 56,  // explain (105x)
		57415: 57,  // graph (105x)
		57424: 58,  // hour (105x)
		57393: 59,  // labels (105x)
		57425: 60,  // minute (105x)
		57426: 61,  // month (105x)
		57413: 62,  // rollback (105x)
		57427: 63,  // second (105x)
		57442: 64,  // with (105x)
		57408: 65,  // yearType (105x)
		57443: 66,  // zone (105x)
		57423: 67,  // interval (104x)
		57444: 68,  // prefix (104x)
		57438: 69,  // timezoneHour (104x)
		57439: 70,  // timezoneMinute (104x)
		57430: 71,  // arrayAgg (103x)
		57431: 72,  // avg (103x)
		57440: 73,  // cast (103x)
		57432: 74,  // count (103x)
		57437: 75,  // extract (103x)
		57346: 76,  // identifier (103x)
		57433: 77,  // listagg (103x)
		57434: 78,  // max (103x)
		57435: 79,  // min (103x)
		57428: 80,  // substring (103x)
		57436: 81,  // sum (103x)
		57388: 82,  // where (100x)
		57546: 83,  // Identifier (84x)
		57619: 84,  // UnReservedKeyword (84x)
		57347: 85,  // stringLit (69x)
		57462: 86,  // intLit (65x)
		57379: 87,  // on (64x)
		46:    88,  // '.' (63x)
		57625: 89,  // VariableName (62x)
		57473: 90,  // paramMarker (61x)
		57484: 91,  // reachIncomingRight (60x)
		57464: 92,  // bitLit (59x)
		57463: 93,  // hexLit (59x)
		123:   94,  // '{' (58x)
		57363: 95,  // exists (58x)
		57449: 96,  // label (58x)
		57482: 97,  // reachOutgoingRight (58x)
		57461: 98,  // decLit (57x)
		57480: 99,  // edgeIncomingRight (57x)
		57364: 100, // falseKwd (57x)
		57460: 101, // floatLit (57x)
		57383: 102, // trueKwd (57x)
		58:    103, // ':' (56x)
		63:    104, // '?' (56x)
		57452: 105, // abs (56x)
		57459: 106, // allDifferent (56x)
		57395: 107, // caseKwd (56x)
		57453: 108, // ceil (56x)
		57454: 109, // ceiling (56x)
		57455: 110, // elementNumber (56x)
		57456: 111, // floor (56x)
		57457: 112, // hasLabel (56x)
		57458: 113, // id (56x)
		57447: 114, // inDegree (56x)
		57448: 115, // javaRegexpLike (56x)
		57445: 116, // lower (56x)
		57450: 117, // matchNumber (56x)
		57451: 118, // outDegree (56x)
		57446: 119, // uppper (56x)
		57478: 120, // edgeOutgoingRight (55x)
		57394: 121, // properties (52x)
		57362: 122, // edge (50x)
		57590: 123, // PropertyAccess (50x)
		57615: 124, // StringLiteral (50x)
		57387: 125, // vertex (50x)
		124:   126, // '|' (49x)
		57392: 127, // between (48x)
		57498: 128, // BooleanLiteral (48x)
		57513: 129, // DateLiteral (48x)
		57554: 130, // IntervalLiteral (48x)
		57573: 131, // Literal (48x)
		57578: 132, // NumericLiteral (48x)
		57616: 133, // Subquery (48x)
		57617: 134, // TimeLiteral (48x)
		57618: 135, // TimestampLiteral (48x)
		57492: 136, // Aggregation (47x)
		57495: 137, // ArithmeticExpression (47x)
		57497: 138, // BindVariable (47x)
		57499: 139, // BracketedValueExpression (47x)
		57502: 140, // CaseExpression (47x)
		57503: 141, // CastSpecification (47x)
		57504: 142, // CharacterSubstring (47x)
		57406: 143, // decimalType (47x)
		57360: 144, // doubleType (47x)
		57524: 145, // ExistsPredicate (47x)
		57528: 146, // ExtractFunction (47x)
		57365: 147, // floatType (47x)
		57534: 148, // FunctionInvocation (47x)
		57535: 149, // FunctionName (47x)
		57549: 150, // InPredicate (47x)
		57372: 151, // integerType (47x)
		57557: 152, // IsNotNullPredicate (47x)
		57558: 153, // IsNullPredicate (47x)
		57574: 154, // LogicalExpression (47x)
		57577: 155, // NotInPredicate (47x)
		57378: 156, // null (47x)
		57600: 157, // RelationalExpression (47x)
		57603: 158, // ScalarSubquery (47x)
		57604: 159, // SearchedCase (47x)
		57609: 160, // SimpleCase (47x)
		57614: 161, // StringConcat (47x)
		57622: 162, // ValueExpression (47x)
		57628: 163, // VariableReference (47x)
		57382: 164, // set (46x)
		57474: 165, // allProp (45x)
		57403: 166, // comment (44x)
		57357: 167, // defaultKwd (44x)
		57630: 168, // VertexPattern (19x)
		57624: 169, // VariableLengthPathPattern (10x)
		57479: 170, // edgeIncomingLeft (9x)
		57477: 171, // edgeOutgoingLeft (9x)
		57475: 172, // leftArrow (9x)
		57476: 173, // rightArrow (9x)
		57400: 174, // distinct (8x)
		57516: 175, // DistinctOpt (8x)
		57559: 176, // LabelName (7x)
		57369: 177, // ifKwd (6x)
		57583: 178, // PathPatternMacro (6x)
		57627: 179, // VariableNameOpt (6x)
		57634: 180, // WhereClauseOpt (6x)
		57525: 181, // ExpAsVar (5x)
		57540: 182, // GraphName (5x)
		57584: 183, // PathPatternMacroList (5x)
		57585: 184, // PathPatternMacroOpt (5x)
		57593: 185, // PropertyName (5x)
		57483: 186, // reachIncomingLeft (5x)
		57481: 187, // reachOutgoingLeft (5x)
		57608: 188, // SelectStmt (5x)
		125:   189, // '}' (4x)
		57532: 190, // FromClause (4x)
		57544: 191, // GroupByClauseOpt (4x)
		57545: 192, // HavingClauseOpt (4x)
		57370: 193, // index (4x)
		57570: 194, // LimitClauseOpt (4x)
		57580: 195, // OrderByClauseOpt (4x)
		57581: 196, // PathPattern (4x)
		57586: 197, // PatternQuantifier (4x)
		57587: 198, // PatternQuantifierOpt (4x)
		57610: 199, // SimplePathPattern (4x)
		57629: 200, // VariableSpec (4x)
		57632: 201, // WhenClause (4x)
		57500: 202, // ByItem (3x)
		57505: 203, // ColonOrIsKeyword (3x)
		57520: 204, // EdgePattern (3x)
		57547: 205, // IfExists (3x)
		57548: 206, // IfNotExists (3x)
		57561: 207, // LabelPredicate (3x)
		57569: 208, // LengthNum (3x)
		57571: 209, // LimitOption (3x)
		57591: 210, // PropertyAssignment (3x)
		57496: 211, // BeginStmt (2x)
		57355: 212, // by (2x)
		57501: 213, // ByList (2x)
		57506: 214, // CommitStmt (2x)
		57356: 215, // create (2x)
		57509: 216, // CreateGraphStmt (2x)
		57510: 217, // CreateIndexStmt (2x)
		57511: 218, // CreateLabelStmt (2x)
		57512: 219, // DataType (2x)
		57515: 220, // DeleteStmt (2x)
		57361: 221, // drop (2x)
		57517: 222, // DropGraphStmt (2x)
		57518: 223, // DropIndexStmt (2x)
		57519: 224, // DropLabelStmt (2x)
		57521: 225, // ElseClauseOpt (2x)
		57522: 226, // EmptyStmt (2x)
		57526: 227, // ExplainStmt (2x)
		57536: 228, // GraphElementInsertion (2x)
		57538: 229, // GraphElementUpdate (2x)
		57553: 230, // InsertStmt (2x)
		57550: 231, // InValueList (2x)
		57560: 232, // LabelNameList (2x)
		57563: 233, // LabelPropertyDef (2x)
		57568: 234, // LabelsAndProperties (2x)
		57566: 235, // LabelSpecification (2x)
		57567: 236, // LabelSpecificationOpt (2x)
		57376: 237, // match (2x)
		57575: 238, // MatchClause (2x)
		57592: 239, // PropertyAssignmentList (2x)
		57595: 240, // PropertyOption (2x)
		57601: 241, // RollbackStmt (2x)
		57605: 242, // SelectClause (2x)
		57606: 243, // SelectEelement (2x)
		57612: 244, // Statement (2x)
		57620: 245, // UpdateStmt (2x)
		57386: 246, // use (2x)
		57621: 247, // UseStmt (2x)
		57631: 248, // VertexPatternOpt (2x)
		57633: 249, // WhenClauseList (2x)
		57493: 250, // AllPropertiesPrefixOpt (1x)
		57494: 251, // ArgumentList (1x)
		57507: 252, // CostClause (1x)
		57508: 253, // CostClauseOpt (1x)
		57514: 254, // DateTimeField (1x)
		57523: 255, // Entry (1x)
		57527: 256, // ExtractField (1x)
		57529: 257, // FieldAsName (1x)
		57530: 258, // FieldAsNameOpt (1x)
		57531: 259, // ForStringLengthOpt (1x)
		57533: 260, // FromClauseOpt (1x)
		57537: 261, // GraphElementInsertionList (1x)
		57539: 262, // GraphElementUpdateList (1x)
		57541: 263, // GraphOnClause (1x)
		57542: 264, // GraphOnClauseOpt (1x)
		57543: 265, // GraphPattern (1x)
		57551: 266, // IndexKeyTypeOpt (1x)
		57552: 267, // IndexName (1x)
		57373: 268, // into (1x)
		57555: 269, // IntoClause (1x)
		57556: 270, // IntoClauseOpt (1x)
		57562: 271, // LabelPredicateOpt (1x)
		57564: 272, // LabelPropertyList (1x)
		57565: 273, // LabelPropertyListOpt (1x)
		57572: 274, // ListaggSeparatorOpt (1x)
		57576: 275, // MatchClauseList (1x)
		57579: 276, // Order (1x)
		57582: 277, // PathPatternList (1x)
		57588: 278, // PropertiesSpecification (1x)
		57589: 279, // PropertiesSpecificationOpt (1x)
		57594: 280, // PropertyNameList (1x)
		57596: 281, // PropertyOptionList (1x)
		57597: 282, // PropertyOptionListOpt (1x)
		57598: 283, // QuantifiedPathExpr (1x)
		57599: 284, // ReachabilityPathExpr (1x)
		57602: 285, // RowsPerMatchOpt (1x)
		57607: 286, // SelectElementList (1x)
		57611: 287, // StartPosition (1x)
		57613: 288, // StatementList (1x)
		57384: 289, // unique (1x)
		57623: 290, // ValueExpressionList (1x)
		57626: 291, // VariableNameList (1x)
		57491: 292, // $default (0x)
		38:    293, // '&' (0x)
		94:    294, // '^' (0x)
		126:   295, // '~' (0x)
		57351: 296, // andand (0x)
		57465: 297, // andnot (0x)
		57466: 298, // assignmentEq (0x)
		57488: 299, // div (0x)
		57349: 300, // doubleAtIdentifier (0x)
		57485: 301, // empty (0x)
		57345: 302, // error (0x)
		57350: 303, // invalid (0x)
		57486: 304, // lowerThanOn (0x)
		57489: 305, // mod (0x)
		57490: 306, // neg (0x)
		57470: 307, // neq (0x)
		57472: 308, // nulleq (0x)
		57487: 309, // pipesAsOr (0x)
		57348: 310, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"','",
		"cost",
		"end",
		"forkKwd",
		"not",
		"'-'",
		"limit",
		"order",
		"having",
		"group",
		"from",
		"'*'",
		"'+'",
		"is",
		"and",
		"eq",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"'('",
		"selectKwd",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"timeType",
		"then",
		"dateType",
		"timestampType",
		"booleanType",
		"stringKwd",
		"cheapest",
		"shortest",
		"offset",
		"all",
		"any",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"labels",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"interval",
		"prefix",
		"timezoneHour",
		"timezoneMinute",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"where",
		"Identifier",
		"UnReservedKeyword",
		"stringLit",
		"intLit",
		"on",
		"'.'",
		"VariableName",
		"paramMarker",
		"reachIncomingRight",
		"bitLit",
		"hexLit",
		"'{'",
		"exists",
		"label",
		"reachOutgoingRight",
		"decLit",
		"edgeIncomingRight",
		"falseKwd",
		"floatLit",
		"trueKwd",
		"':'",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"elementNumber",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"lower",
		"matchNumber",
		"outDegree",
		"uppper",
		"edgeOutgoingRight",
		"properties",
		"edge",
		"PropertyAccess",
		"StringLiteral",
		"vertex",
		"'|'",
		"between",
		"BooleanLiteral",
		"DateLiteral",
		"IntervalLiteral",
		"Literal",
		"NumericLiteral",
		"Subquery",
		"TimeLiteral",
		"TimestampLiteral",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"decimalType",
		"doubleType",
		"ExistsPredicate",
		"ExtractFunction",
		"floatType",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"integerType",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"LogicalExpression",
		"NotInPredicate",
		"null",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"ValueExpression",
		"VariableReference",
		"set",
		"allProp",
		"comment",
		"defaultKwd",
		"VertexPattern",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"LabelName",
		"ifKwd",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"PropertyName",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"IfExists",
		"IfNotExists",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"CreateLabelStmt",
		"DataType",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"DropLabelStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertion",
		"GraphElementUpdate",
		"InsertStmt",
		"InValueList",
		"LabelNameList",
		"LabelPropertyDef",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"PropertyAssignmentList",
		"PropertyOption",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DateTimeField",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"ForStringLengthOpt",
		"FromClauseOpt",
		"GraphElementInsertionList",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"IndexName",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"LabelPredicateOpt",
		"LabelPropertyList",
		"LabelPropertyListOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"PropertyOptionList",
		"PropertyOptionListOpt",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableNameList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{255, 1},
		{288, 1},
		{288, 3},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{244, 1},
		{226, 0},
		{211, 1},
		{214, 1},
		{216, 4},
		{218, 5},
		{273, 0},
		{273, 3},
		{272, 1},
		{272, 3},
		{233, 3},
		{282, 0},
		{282, 1},
		{281, 1},
		{281, 2},
		{240, 2},
		{240, 1},
		{240, 2},
		{240, 2},
		{217, 10},
		{266, 0},
		{266, 1},
		{220, 9},
		{222, 4},
		{224, 4},
		{223, 6},
		{227, 2},
		{230, 10},
		{270, 0},
		{270, 1},
		{269, 2},
		{261, 1},
		{261, 3},
		{228, 3},
		{228, 7},
		{234, 2},
		{236, 0},
		{236, 1},
		{235, 4},
		{279, 0},
		{279, 1},
		{278, 4},
		{239, 1},
		{239, 3},
		{210, 3},
		{123, 3},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{162, 1},
		{163, 1},
		{131, 1},
		{131, 1},
		{131, 1},
		{131, 1},
		{131, 1},
		{131, 1},
		{131, 1},
		{124, 1},
		{124, 1},
		{124, 1},
		{132, 1},
		{132, 1},
		{132, 1},
		{128, 1},
		{128, 1},
		{129, 2},
		{134, 2},
		{135, 2},
		{130, 3},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{254, 1},
		{138, 1},
		{137, 2},
		{137, 3},
		{137, 3},
		{137, 3},
		{137, 3},
		{137, 3},
		{157, 3},
		{157, 3},
		{157, 3},
		{157, 3},
		{157, 3},
		{157, 3},
		{154, 3},
		{154, 3},
		{154, 3},
		{154, 2},
		{161, 3},
		{139, 3},
		{148, 4},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{149, 1},
		{251, 1},
		{251, 3},
		{142, 7},
		{287, 1},
		{259, 0},
		{259, 2},
		{136, 4},
		{136, 5},
		{136, 5},
		{136, 5},
		{136, 5},
		{136, 5},
		{136, 5},
		{136, 6},
		{175, 0},
		{175, 1},
		{274, 0},
		{274, 2},
		{146, 6},
		{256, 1},
		{256, 1},
		{256, 1},
		{256, 1},
		{256, 1},
		{256, 1},
		{256, 1},
		{256, 1},
		{153, 3},
		{152, 4},
		{141, 6},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 1},
		{219, 4},
		{219, 1},
		{219, 4},
		{140, 1},
		{140, 1},
		{160, 5},
		{159, 4},
		{249, 1},
		{249, 2},
		{201, 4},
		{225, 0},
		{225, 2},
		{150, 3},
		{155, 4},
		{231, 3},
		{290, 1},
		{290, 3},
		{145, 2},
		{133, 3},
		{158, 1},
		{241, 1},
		{188, 8},
		{242, 3},
		{242, 2},
		{286, 1},
		{286, 3},
		{243, 1},
		{243, 3},
		{181, 2},
		{250, 0},
		{250, 2},
		{258, 0},
		{258, 1},
		{257, 2},
		{257, 2},
		{190, 2},
		{260, 0},
		{260, 1},
		{275, 1},
		{275, 3},
		{238, 4},
		{263, 2},
		{264, 0},
		{264, 1},
		{285, 0},
		{265, 1},
		{265, 3},
		{277, 1},
		{277, 3},
		{196, 1},
		{196, 2},
		{196, 3},
		{196, 3},
		{196, 4},
		{196, 3},
		{196, 3},
		{196, 4},
		{196, 2},
		{199, 1},
		{199, 3},
		{199, 3},
		{169, 3},
		{284, 4},
		{284, 4},
		{284, 4},
		{168, 3},
		{248, 0},
		{248, 1},
		{204, 3},
		{204, 1},
		{204, 3},
		{204, 1},
		{204, 3},
		{204, 1},
		{200, 2},
		{89, 1},
		{179, 0},
		{179, 1},
		{291, 1},
		{291, 3},
		{207, 2},
		{271, 0},
		{271, 1},
		{203, 1},
		{203, 1},
		{232, 1},
		{232, 3},
		{283, 2},
		{283, 8},
		{252, 2},
		{253, 0},
		{253, 1},
		{197, 1},
		{197, 1},
		{197, 1},
		{197, 3},
		{197, 4},
		{197, 5},
		{197, 4},
		{198, 0},
		{198, 1},
		{184, 0},
		{184, 1},
		{183, 1},
		{183, 2},
		{178, 5},
		{180, 0},
		{180, 2},
		{191, 0},
		{191, 3},
		{213, 1},
		{213, 3},
		{202, 1},
		{202, 2},
		{276, 1},
		{276, 1},
		{192, 0},
		{192, 2},
		{195, 0},
		{195, 3},
		{194, 0},
		{194, 2},
		{194, 4},
		{194, 4},
		{209, 1},
		{209, 1},
		{208, 1},
		{245, 9},
		{262, 1},
		{262, 3},
		{229, 5},
		{247, 2},
		{205, 0},
		{205, 2},
		{206, 0},
		{206, 3},
		{182, 1},
		{185, 1},
		{267, 1},
		{176, 1},
		{83, 1},
		{83, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{280, 1},
		{280, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [624][]uint16{
		// 0
		{1: 401, 352, 352, 32: 85, 85, 85, 85, 53: 392, 393, 56: 397, 62: 398, 178: 400, 183: 399, 395, 188: 389, 211: 377, 214: 378, 394, 379, 381, 380, 220: 382, 396, 383, 385, 384, 226: 376, 386, 230: 387, 241: 388, 244: 375, 390, 402, 391, 255: 373, 288: 374},
		{2: 372},
		{2: 371, 994},
		{2: 370, 370},
		{2: 368, 368},
		// 5
		{2: 367, 367},
		{2: 366, 366},
		{2: 365, 365},
		{2: 364, 364},
		{2: 363, 363},
		// 10
		{2: 362, 362},
		{2: 361, 361},
		{2: 360, 360},
		{2: 359, 359},
		{2: 358, 358},
		// 15
		{2: 357, 357},
		{2: 356, 356},
		{2: 355, 355},
		{2: 354, 354},
		{2: 353, 353},
		// 20
		{2: 351, 351},
		{2: 350, 350},
		{57: 947, 96: 948, 193: 333, 266: 949, 289: 950},
		{32: 544, 875, 876, 877, 242: 543},
		{57: 862, 96: 863, 193: 864},
		// 25
		{1: 401, 32: 85, 178: 400, 183: 399, 542, 188: 861},
		{2: 166, 166},
		{1: 401, 32: 84, 84, 84, 84, 178: 860},
		{1: 83, 32: 83, 83, 83, 83},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 449, 406},
		// 30
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 404, 406, 182: 403},
		{2: 55, 55},
		{50, 2: 50, 50, 50, 10: 50, 50, 50, 50, 82: 50, 122: 50, 125: 50},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 59: 46, 82: 46, 87: 46, 46, 90: 46, 46, 94: 46, 97: 46, 99: 46, 103: 46, 120: 46, 46, 46, 125: 46, 46, 46, 143: 46, 46, 147: 46, 151: 46, 164: 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 59: 45, 82: 45, 87: 45, 45, 90: 45, 45, 94: 45, 97: 45, 99: 45, 103: 45, 120: 45, 45, 45, 125: 45, 45, 45, 143: 45, 45, 147: 45, 151: 45, 164: 45, 45},
		// 35
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 59: 44, 82: 44, 87: 44, 44, 90: 44, 44, 94: 44, 97: 44, 99: 44, 103: 44, 120: 44, 44, 44, 125: 44, 44, 44, 143: 44, 44, 147: 44, 151: 44, 164: 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 59: 43, 82: 43, 87: 43, 43, 90: 43, 43, 94: 43, 97: 43, 99: 43, 103: 43, 120: 43, 43, 43, 125: 43, 43, 43, 143: 43, 43, 147: 43, 151: 43, 164: 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 59: 42, 82: 42, 87: 42, 42, 90: 42, 42, 94: 42, 97: 42, 99: 42, 103: 42, 120: 42, 42, 42, 125: 42, 42, 42, 143: 42, 42, 147: 42, 151: 42, 164: 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 59: 41, 82: 41, 87: 41, 41, 90: 41, 41, 94: 41, 97: 41, 99: 41, 103: 41, 120: 41, 41, 41, 125: 41, 41, 41, 143: 41, 41, 147: 41, 151: 41, 164: 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 59: 40, 82: 40, 87: 40, 40, 90: 40, 40, 94: 40, 97: 40, 99: 40, 103: 40, 120: 40, 40, 40, 125: 40, 40, 40, 143: 40, 40, 147: 40, 151: 40, 164: 40, 40},
		// 40
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 59: 39, 82: 39, 87: 39, 39, 90: 39, 39, 94: 39, 97: 39, 99: 39, 103: 39, 120: 39, 39, 39, 125: 39, 39, 39, 143: 39, 39, 147: 39, 151: 39, 164: 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 59: 38, 82: 38, 87: 38, 38, 90: 38, 38, 94: 38, 97: 38, 99: 38, 103: 38, 120: 38, 38, 38, 125: 38, 38, 38, 143: 38, 38, 147: 38, 151: 38, 164: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 59: 37, 82: 37, 87: 37, 37, 90: 37, 37, 94: 37, 97: 37, 99: 37, 103: 37, 120: 37, 37, 37, 125: 37, 37, 37, 143: 37, 37, 147: 37, 151: 37, 164: 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 59: 36, 82: 36, 87: 36, 36, 90: 36, 36, 94: 36, 97: 36, 99: 36, 103: 36, 120: 36, 36, 36, 125: 36, 36, 36, 143: 36, 36, 147: 36, 151: 36, 164: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 59: 35, 82: 35, 87: 35, 35, 90: 35, 35, 94: 35, 97: 35, 99: 35, 103: 35, 120: 35, 35, 35, 125: 35, 35, 35, 143: 35, 35, 147: 35, 151: 35, 164: 35},
		// 45
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 59: 34, 82: 34, 87: 34, 34, 90: 34, 34, 94: 34, 97: 34, 99: 34, 103: 34, 120: 34, 34, 34, 125: 34, 34, 34, 143: 34, 34, 147: 34, 151: 34, 164: 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 59: 33, 82: 33, 87: 33, 33, 90: 33, 33, 94: 33, 97: 33, 99: 33, 103: 33, 120: 33, 33, 33, 125: 33, 33, 33, 143: 33, 33, 147: 33, 151: 33, 164: 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 59: 32, 82: 32, 87: 32, 32, 90: 32, 32, 94: 32, 97: 32, 99: 32, 103: 32, 120: 32, 32, 32, 125: 32, 32, 32, 143: 32, 32, 147: 32, 151: 32, 164: 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 59: 31, 82: 31, 87: 31, 31, 90: 31, 31, 94: 31, 97: 31, 99: 31, 103: 31, 120: 31, 31, 31, 125: 31, 31, 31, 143: 31, 31, 147: 31, 151: 31, 164: 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 59: 30, 82: 30, 87: 30, 30, 90: 30, 30, 94: 30, 97: 30, 99: 30, 103: 30, 120: 30, 30, 30, 125: 30, 30, 30, 143: 30, 30, 147: 30, 151: 30, 164: 30, 30},
		// 50
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 59: 29, 82: 29, 87: 29, 29, 90: 29, 29, 94: 29, 97: 29, 99: 29, 103: 29, 120: 29, 29, 29, 125: 29, 29, 29, 143: 29, 29, 147: 29, 151: 29, 164: 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 59: 28, 82: 28, 87: 28, 28, 90: 28, 28, 94: 28, 97: 28, 99: 28, 103: 28, 120: 28, 28, 28, 125: 28, 28, 28, 143: 28, 28, 147: 28, 151: 28, 164: 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 59: 27, 82: 27, 87: 27, 27, 90: 27, 27, 94: 27, 97: 27, 99: 27, 103: 27, 120: 27, 27, 27, 125: 27, 27, 27, 143: 27, 27, 147: 27, 151: 27, 164: 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 59: 26, 82: 26, 87: 26, 26, 90: 26, 26, 94: 26, 97: 26, 99: 26, 103: 26, 120: 26, 26, 26, 125: 26, 26, 26, 143: 26, 26, 147: 26, 151: 26, 164: 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 59: 25, 82: 25, 87: 25, 25, 90: 25, 25, 94: 25, 97: 25, 99: 25, 103: 25, 120: 25, 25, 25, 125: 25, 25, 25, 143: 25, 25, 147: 25, 151: 25, 164: 25, 25},
		// 55
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 59: 24, 82: 24, 87: 24, 24, 90: 24, 24, 94: 24, 97: 24, 99: 24, 103: 24, 120: 24, 24, 24, 125: 24, 24, 24, 143: 24, 24, 147: 24, 151: 24, 164: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 59: 23, 82: 23, 87: 23, 23, 90: 23, 23, 94: 23, 97: 23, 99: 23, 103: 23, 120: 23, 23, 23, 125: 23, 23, 23, 143: 23, 23, 147: 23, 151: 23, 164: 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 59: 22, 82: 22, 87: 22, 22, 90: 22, 22, 94: 22, 97: 22, 99: 22, 103: 22, 120: 22, 22, 22, 125: 22, 22, 22, 143: 22, 22, 147: 22, 151: 22, 164: 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 59: 21, 82: 21, 87: 21, 21, 90: 21, 21, 94: 21, 97: 21, 99: 21, 103: 21, 120: 21, 21, 21, 125: 21, 21, 21, 143: 21, 21, 147: 21, 151: 21, 164: 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 59: 20, 82: 20, 87: 20, 20, 90: 20, 20, 94: 20, 97: 20, 99: 20, 103: 20, 120: 20, 20, 20, 125: 20, 20, 20, 143: 20, 20, 147: 20, 151: 20, 164: 20, 20},
		// 60
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 59: 19, 82: 19, 87: 19, 19, 90: 19, 19, 94: 19, 97: 19, 99: 19, 103: 19, 120: 19, 19, 19, 125: 19, 19, 19, 143: 19, 19, 147: 19, 151: 19, 164: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 59: 18, 82: 18, 87: 18, 18, 90: 18, 18, 94: 18, 97: 18, 99: 18, 103: 18, 120: 18, 18, 18, 125: 18, 18, 18, 143: 18, 18, 147: 18, 151: 18, 164: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 59: 17, 82: 17, 87: 17, 17, 90: 17, 17, 94: 17, 97: 17, 99: 17, 103: 17, 120: 17, 17, 17, 125: 17, 17, 17, 143: 17, 17, 147: 17, 151: 17, 164: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 59: 16, 82: 16, 87: 16, 16, 90: 16, 16, 94: 16, 97: 16, 99: 16, 103: 16, 120: 16, 16, 16, 125: 16, 16, 16, 143: 16, 16, 147: 16, 151: 16, 164: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 59: 15, 82: 15, 87: 15, 15, 90: 15, 15, 94: 15, 97: 15, 99: 15, 103: 15, 120: 15, 15, 15, 125: 15, 15, 15, 143: 15, 15, 147: 15, 151: 15, 164: 15},
		// 65
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 59: 14, 82: 14, 87: 14, 14, 90: 14, 14, 94: 14, 97: 14, 99: 14, 103: 14, 120: 14, 14, 14, 125: 14, 14, 14, 143: 14, 14, 147: 14, 151: 14, 164: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 59: 13, 82: 13, 87: 13, 13, 90: 13, 13, 94: 13, 97: 13, 99: 13, 103: 13, 120: 13, 13, 13, 125: 13, 13, 13, 143: 13, 13, 147: 13, 151: 13, 164: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 59: 12, 82: 12, 87: 12, 12, 90: 12, 12, 94: 12, 97: 12, 99: 12, 103: 12, 120: 12, 12, 12, 125: 12, 12, 12, 143: 12, 12, 147: 12, 151: 12, 164: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 59: 11, 82: 11, 87: 11, 11, 90: 11, 11, 94: 11, 97: 11, 99: 11, 103: 11, 120: 11, 11, 11, 125: 11, 11, 11, 143: 11, 11, 147: 11, 151: 11, 164: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 59: 10, 82: 10, 87: 10, 10, 90: 10, 10, 94: 10, 97: 10, 99: 10, 103: 10, 120: 10, 10, 10, 125: 10, 10, 10, 143: 10, 10, 147: 10, 151: 10, 164: 10},
		// 70
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 59: 9, 82: 9, 87: 9, 9, 90: 9, 9, 94: 9, 97: 9, 99: 9, 103: 9, 120: 9, 9, 9, 125: 9, 9, 9, 143: 9, 9, 147: 9, 151: 9, 164: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 59: 8, 82: 8, 87: 8, 8, 90: 8, 8, 94: 8, 97: 8, 99: 8, 103: 8, 120: 8, 8, 8, 125: 8, 8, 8, 143: 8, 8, 147: 8, 151: 8, 164: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 59: 7, 82: 7, 87: 7, 7, 90: 7, 7, 94: 7, 97: 7, 99: 7, 103: 7, 120: 7, 7, 7, 125: 7, 7, 7, 143: 7, 7, 147: 7, 151: 7, 164: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 59: 6, 82: 6, 87: 6, 6, 90: 6, 6, 94: 6, 97: 6, 99: 6, 103: 6, 120: 6, 6, 6, 125: 6, 6, 6, 143: 6, 6, 147: 6, 151: 6, 164: 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 59: 5, 82: 5, 87: 5, 5, 90: 5, 5, 94: 5, 97: 5, 99: 5, 103: 5, 120: 5, 5, 5, 125: 5, 5, 5, 143: 5, 5, 147: 5, 151: 5, 164: 5, 5},
		// 75
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 59: 4, 82: 4, 87: 4, 4, 90: 4, 4, 94: 4, 97: 4, 99: 4, 103: 4, 120: 4, 4, 4, 125: 4, 4, 4, 143: 4, 4, 147: 4, 151: 4, 164: 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 82: 3, 87: 3, 3, 90: 3, 3, 94: 3, 97: 3, 99: 3, 103: 3, 120: 3, 3, 3, 125: 3, 3, 3, 143: 3, 3, 147: 3, 151: 3, 164: 3, 3},
		{40: 450},
		{31: 456, 50: 453, 452, 454, 168: 455, 196: 457, 199: 451},
		{137, 137, 137, 137, 137, 9: 646, 137, 137, 137, 137, 32: 137, 137, 137, 137, 82: 137, 87: 137, 170: 644, 642, 645, 643, 186: 850, 849, 204: 848, 284: 847},
		// 80
		{31: 456, 47: 689, 688, 168: 640, 687},
		{31: 456, 47: 683, 682, 168: 640, 684},
		{86: 636},
		{128, 128, 128, 128, 128, 9: 128, 128, 128, 128, 128, 32: 128, 128, 128, 128, 82: 128, 87: 128, 170: 128, 128, 128, 128, 186: 128, 128},
		{110, 426, 5: 425, 408, 433, 17: 110, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 624, 103: 110, 179: 623, 200: 622},
		// 85
		{1: 80, 32: 80, 80, 80, 80, 82: 459, 180: 458},
		{1: 81, 32: 81, 81, 81, 81},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 503, 461},
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 32: 286, 286, 286, 286, 286, 286, 286, 286, 286, 42: 286, 88: 844},
		{307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 32: 307, 307, 307, 307, 307, 307, 307, 307, 307, 42: 307},
		// 90
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 32: 306, 306, 306, 306, 306, 306, 306, 306, 306, 42: 306},
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 32: 305, 305, 305, 305, 305, 305, 305, 305, 305, 42: 305},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 32: 304, 304, 304, 304, 304, 304, 304, 304, 304, 42: 304},
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 32: 303, 303, 303, 303, 303, 303, 303, 303, 303, 42: 303},
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 32: 302, 302, 302, 302, 302, 302, 302, 302, 302, 42: 302},
		// 95
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 32: 301, 301, 301, 301, 301, 301, 301, 301, 301, 42: 301},
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 32: 300, 300, 300, 300, 300, 300, 300, 300, 300, 42: 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 32: 299, 299, 299, 299, 299, 299, 299, 299, 299, 42: 299},
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 32: 298, 298, 298, 298, 298, 298, 298, 298, 298, 42: 298},
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 32: 297, 297, 297, 297, 297, 297, 297, 297, 297, 42: 297},
		// 100
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 32: 296, 296, 296, 296, 296, 296, 296, 296, 296, 42: 296},
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 32: 295, 295, 295, 295, 295, 295, 295, 295, 295, 42: 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 32: 294, 294, 294, 294, 294, 294, 294, 294, 294, 42: 294},
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 32: 293, 293, 293, 293, 293, 293, 293, 293, 293, 42: 293},
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 32: 292, 292, 292, 292, 292, 292, 292, 292, 292, 42: 292},
		// 105
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 32: 291, 291, 291, 291, 291, 291, 291, 291, 291, 42: 291},
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 32: 290, 290, 290, 290, 290, 290, 290, 290, 290, 42: 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 32: 289, 289, 289, 289, 289, 289, 289, 289, 289, 42: 289},
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 32: 288, 288, 288, 288, 288, 288, 288, 288, 288, 42: 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 32: 287, 287, 287, 287, 287, 287, 287, 287, 287, 42: 287},
		// 110
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 32: 285, 285, 285, 285, 285, 285, 285, 285, 285, 42: 285, 156: 285, 166: 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 32: 284, 284, 284, 284, 284, 284, 284, 284, 284, 42: 284, 156: 284, 166: 284, 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 32: 283, 283, 283, 283, 283, 283, 283, 283, 283, 42: 283, 156: 283, 166: 283, 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 32: 282, 282, 282, 282, 282, 282, 282, 282, 282, 42: 282, 156: 282, 166: 282, 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 32: 281, 281, 281, 281, 281, 281, 281, 281, 281, 42: 281, 156: 281, 166: 281, 281},
		// 115
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 32: 280, 280, 280, 280, 280, 280, 280, 280, 280, 42: 280, 156: 280, 166: 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 32: 279, 279, 279, 279, 279, 279, 279, 279, 279, 42: 279, 156: 279, 166: 279, 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 32: 278, 278, 278, 278, 278, 278, 278, 278, 278, 42: 278, 156: 278, 166: 278, 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 32: 277, 277, 277, 277, 277, 277, 277, 277, 277, 42: 277, 156: 277, 166: 277, 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 32: 276, 276, 276, 276, 276, 276, 276, 276, 276, 42: 276, 156: 276, 166: 276, 276},
		// 120
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 32: 275, 275, 275, 275, 275, 275, 275, 275, 275, 42: 275, 156: 275, 166: 275, 275},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 32: 274, 274, 274, 274, 274, 274, 274, 274, 274, 42: 274, 156: 274, 166: 274, 274},
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 32: 273, 273, 273, 273, 273, 273, 273, 273, 273, 42: 273, 156: 273, 166: 273, 273},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 32: 272, 272, 272, 272, 272, 272, 272, 272, 272, 42: 272, 156: 272, 166: 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 32: 271, 271, 271, 271, 271, 271, 271, 271, 271, 42: 271, 156: 271, 166: 271, 271},
		// 125
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 32: 38, 38, 38, 38, 38, 38, 38, 38, 38, 42: 38, 85: 843, 88: 38, 165: 38},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32: 35, 35, 35, 35, 35, 35, 35, 35, 35, 42: 35, 85: 842, 88: 35, 165: 35},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 32: 36, 36, 36, 36, 36, 36, 36, 36, 36, 42: 36, 85: 841, 88: 36, 165: 36},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32: 24, 24, 24, 24, 24, 24, 24, 24, 24, 42: 24, 85: 833, 88: 24, 165: 24},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 32: 260, 260, 260, 260, 260, 260, 260, 260, 260, 42: 260},
		// 130
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 832, 461},
		{79, 79, 79, 79, 5: 79, 8: 576, 563, 79, 79, 79, 79, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 32: 79, 79, 79, 79},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 831, 461},
		{1: 829, 5: 425, 408, 433, 504, 502, 31: 505, 85, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 828, 461, 178: 400, 183: 399, 542, 188: 541},
		{31: 822},
		// 135
		{31: 240},
		{31: 239},
		{31: 238},
		{31: 237},
		{31: 236},
		// 140
		{31: 235},
		{31: 234},
		{31: 233},
		{31: 232},
		{31: 231},
		// 145
		{31: 230},
		{31: 229},
		{31: 228},
		{31: 227},
		{31: 226},
		// 150
		{31: 225},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 813, 19, 19, 19, 19, 19, 19, 19, 19, 19, 42: 19, 88: 19, 165: 19},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 807, 15, 15, 15, 15, 15, 15, 15, 15, 15, 42: 15, 88: 15, 165: 15},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 803, 12, 12, 12, 12, 12, 12, 12, 12, 12, 42: 12, 88: 12, 165: 12},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 799, 13, 13, 13, 13, 13, 13, 13, 13, 13, 42: 13, 88: 13, 165: 13},
		// 155
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 795, 16, 16, 16, 16, 16, 16, 16, 16, 16, 42: 16, 88: 16, 165: 16},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 791, 11, 11, 11, 11, 11, 11, 11, 11, 11, 42: 11, 88: 11, 165: 11},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 787, 17, 17, 17, 17, 17, 17, 17, 17, 17, 42: 17, 88: 17, 165: 17},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 780, 14, 14, 14, 14, 14, 14, 14, 14, 14, 42: 14, 88: 14, 165: 14},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 767, 10, 10, 10, 10, 10, 10, 10, 10, 10, 42: 10, 88: 10, 165: 10},
		// 160
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 747, 7, 7, 7, 7, 7, 7, 7, 7, 7, 42: 7, 88: 7, 165: 7},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 32: 183, 183, 183, 183, 183, 183, 183, 183, 183, 42: 183},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 32: 182, 182, 182, 182, 182, 182, 182, 182, 182, 42: 182},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 36: 735, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 732, 461, 201: 734, 249: 733},
		{31: 540, 133: 539},
		// 165
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 32: 167, 167, 167, 167, 167, 167, 167, 167, 167, 42: 167},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 32: 111, 111, 111, 111, 111, 111, 111, 111, 111, 42: 111, 59: 111, 82: 111, 88: 111, 99: 111, 103: 111, 120: 111, 111, 127: 111, 164: 111},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 32: 169, 169, 169, 169, 169, 169, 169, 169, 169, 42: 169},
		{1: 401, 32: 85, 178: 400, 183: 399, 542, 188: 541},
		{731},
		// 170
		{32: 544, 242: 543},
		{14: 610, 190: 609},
		{1: 210, 5: 210, 210, 210, 210, 210, 15: 547, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 546},
		{1: 209, 5: 209, 209, 209, 209, 209, 31: 209, 41: 209, 43: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 85: 209, 209, 92: 209, 209, 95: 209, 209, 98: 209, 100: 209, 209, 209, 104: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 552, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 548, 461, 181: 551, 243: 550, 286: 549},
		// 175
		{14: 163},
		{155, 2: 155, 155, 155, 8: 576, 563, 155, 155, 155, 14: 155, 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 37: 155, 155, 40: 579, 257: 578, 577},
		{4: 557, 14: 164},
		{4: 162, 14: 162},
		{4: 160, 14: 160},
		// 180
		{4: 111, 8: 111, 111, 14: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 40: 111, 88: 111, 165: 553},
		{4: 157, 14: 157, 68: 555, 250: 554},
		{4: 159, 14: 159},
		{85: 489, 92: 491, 490, 124: 556},
		{4: 156, 14: 156},
		// 185
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 552, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 548, 461, 181: 551, 243: 558},
		{4: 161, 14: 161},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 608, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 607, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 606, 461},
		// 190
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 605, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 604, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 603, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 602, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 601, 461},
		// 195
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 600, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 599, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 598, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 597, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 596, 461},
		// 200
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 595, 461},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 594, 461},
		{8: 592, 156: 591},
		{31: 584, 231: 590},
		{20: 582},
		// 205
		{158, 2: 158, 158, 158, 10: 158, 158, 158, 14: 158, 37: 158, 158},
		{154, 2: 154, 154, 154, 10: 154, 154, 154, 14: 154, 37: 154, 154},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 580, 406, 581},
		{153, 2: 153, 153, 153, 10: 153, 153, 153, 14: 153, 37: 153, 153},
		{152, 2: 152, 152, 152, 10: 152, 152, 152, 14: 152, 37: 152, 152},
		// 210
		{31: 584, 231: 583},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 32: 173, 173, 173, 173, 173, 173, 173, 173, 173, 42: 173},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 585, 461, 290: 586},
		{171, 4: 171, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{587, 4: 588},
		// 215
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 32: 172, 172, 172, 172, 172, 172, 172, 172, 172, 42: 172},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 589, 461},
		{170, 4: 170, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 32: 174, 174, 174, 174, 174, 174, 174, 174, 174, 42: 174},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 32: 197, 197, 197, 197, 197, 197, 197, 197, 197, 42: 197},
		// 220
		{156: 593},
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 32: 196, 196, 196, 196, 196, 196, 196, 196, 196, 42: 196},
		{243, 243, 243, 243, 243, 243, 243, 243, 576, 563, 243, 243, 243, 243, 243, 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 243, 243, 571, 32: 243, 243, 243, 243, 243, 243, 243, 243, 243, 42: 243},
		{245, 245, 245, 245, 245, 245, 245, 245, 576, 563, 245, 245, 245, 245, 245, 559, 562, 574, 245, 564, 575, 561, 560, 567, 566, 568, 569, 565, 245, 245, 245, 32: 245, 245, 245, 245, 245, 245, 245, 245, 245, 42: 245},
		{246, 246, 246, 246, 246, 246, 246, 246, 576, 563, 246, 246, 246, 246, 246, 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 246, 246, 246, 32: 246, 246, 246, 246, 246, 246, 246, 246, 246, 42: 246},
		// 225
		{247, 247, 247, 247, 247, 247, 247, 247, 576, 563, 247, 247, 247, 247, 247, 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 247, 247, 571, 32: 247, 247, 247, 247, 247, 247, 247, 247, 247, 42: 247},
		{248, 248, 248, 248, 248, 248, 248, 248, 576, 563, 248, 248, 248, 248, 248, 559, 562, 248, 248, 248, 248, 561, 560, 248, 248, 248, 248, 248, 248, 248, 248, 32: 248, 248, 248, 248, 248, 248, 248, 248, 248, 42: 248},
		{249, 249, 249, 249, 249, 249, 249, 249, 576, 563, 249, 249, 249, 249, 249, 559, 562, 249, 249, 249, 249, 561, 560, 249, 249, 249, 249, 249, 249, 249, 249, 32: 249, 249, 249, 249, 249, 249, 249, 249, 249, 42: 249},
		{250, 250, 250, 250, 250, 250, 250, 250, 576, 563, 250, 250, 250, 250, 250, 559, 562, 250, 250, 250, 250, 561, 560, 250, 250, 250, 250, 250, 250, 250, 250, 32: 250, 250, 250, 250, 250, 250, 250, 250, 250, 42: 250},
		{251, 251, 251, 251, 251, 251, 251, 251, 576, 563, 251, 251, 251, 251, 251, 559, 562, 251, 251, 251, 251, 561, 560, 251, 251, 251, 251, 251, 251, 251, 251, 32: 251, 251, 251, 251, 251, 251, 251, 251, 251, 42: 251},
		// 230
		{252, 252, 252, 252, 252, 252, 252, 252, 576, 563, 252, 252, 252, 252, 252, 559, 562, 252, 252, 252, 252, 561, 560, 252, 252, 252, 252, 252, 252, 252, 252, 32: 252, 252, 252, 252, 252, 252, 252, 252, 252, 42: 252},
		{253, 253, 253, 253, 253, 253, 253, 253, 576, 563, 253, 253, 253, 253, 253, 559, 562, 253, 253, 253, 253, 561, 560, 253, 253, 253, 253, 253, 253, 253, 253, 32: 253, 253, 253, 253, 253, 253, 253, 253, 253, 42: 253},
		{254, 254, 254, 254, 254, 254, 254, 254, 576, 254, 254, 254, 254, 254, 254, 559, 254, 254, 254, 254, 254, 561, 560, 254, 254, 254, 254, 254, 254, 254, 254, 32: 254, 254, 254, 254, 254, 254, 254, 254, 254, 42: 254},
		{255, 255, 255, 255, 255, 255, 255, 255, 576, 255, 255, 255, 255, 255, 255, 559, 255, 255, 255, 255, 255, 561, 560, 255, 255, 255, 255, 255, 255, 255, 255, 32: 255, 255, 255, 255, 255, 255, 255, 255, 255, 42: 255},
		{256, 256, 256, 256, 256, 256, 256, 256, 576, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 32: 256, 256, 256, 256, 256, 256, 256, 256, 256, 42: 256},
		// 235
		{257, 257, 257, 257, 257, 257, 257, 257, 576, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 32: 257, 257, 257, 257, 257, 257, 257, 257, 257, 42: 257},
		{258, 258, 258, 258, 258, 258, 258, 258, 576, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 32: 258, 258, 258, 258, 258, 258, 258, 258, 258, 42: 258},
		{80, 2: 80, 80, 10: 80, 80, 80, 80, 82: 459, 180: 702},
		{237: 613, 612, 275: 611},
		{151, 2: 151, 151, 700, 10: 151, 151, 151, 151, 82: 151},
		// 240
		{148, 2: 148, 148, 148, 10: 148, 148, 148, 148, 82: 148},
		{31: 616, 50: 453, 452, 454, 168: 455, 196: 615, 199: 451, 265: 614},
		{144, 2: 144, 144, 144, 10: 144, 144, 144, 144, 82: 144, 87: 696, 263: 697, 695},
		{141, 2: 141, 141, 141, 10: 141, 141, 141, 141, 82: 141, 87: 141},
		{110, 426, 5: 425, 408, 433, 17: 110, 31: 456, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 620, 619, 621, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 624, 103: 110, 168: 455, 179: 623, 196: 618, 199: 451, 622, 277: 617},
		// 245
		{692, 4: 693},
		{139, 4: 139},
		{30, 17: 30, 31: 456, 47: 689, 688, 103: 30, 168: 640, 687},
		{31, 17: 31, 31: 456, 47: 683, 682, 103: 31, 168: 640, 684},
		{27, 17: 27, 86: 636, 103: 27},
		// 250
		{635},
		{105, 17: 629, 99: 105, 103: 628, 120: 105, 203: 626, 207: 627, 271: 625},
		{109, 2: 109, 109, 109, 10: 109, 109, 109, 109, 109, 17: 109, 59: 109, 82: 109, 99: 109, 103: 109, 120: 109, 109, 127: 109},
		{112, 99: 112, 120: 112},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 631, 232: 630},
		// 255
		{104, 99: 104, 120: 104},
		{1: 103, 5: 103, 103, 103, 41: 103, 43: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 60: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{1: 102, 5: 102, 102, 102, 41: 102, 43: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 60: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{106, 15: 106, 106, 90: 106, 106, 94: 106, 97: 106, 99: 106, 120: 106, 126: 633},
		{101, 15: 101, 101, 90: 101, 101, 94: 101, 97: 101, 99: 101, 120: 101, 126: 101},
		// 260
		{47, 2: 47, 47, 15: 47, 47, 31: 47, 90: 47, 47, 94: 47, 97: 47, 99: 47, 120: 47, 126: 47},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 634},
		{100, 15: 100, 100, 90: 100, 100, 94: 100, 97: 100, 99: 100, 120: 100, 126: 100},
		{121, 121, 121, 121, 121, 121, 9: 121, 121, 121, 121, 121, 31: 121, 121, 121, 121, 121, 82: 121, 87: 121, 170: 121, 121, 121, 121, 186: 121, 121},
		{47: 638, 637},
		// 265
		{31: 456, 168: 640, 681},
		{31: 456, 168: 640, 639},
		{130, 130, 130, 130, 130, 10: 130, 130, 130, 130, 32: 130, 130, 130, 130, 82: 130, 87: 130},
		{9: 646, 31: 648, 170: 644, 642, 645, 643, 204: 647, 283: 641},
		{31: 456, 168: 680},
		// 270
		{1: 426, 5: 425, 408, 433, 17: 110, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 624, 99: 110, 103: 110, 120: 110, 179: 623, 200: 677},
		{117, 5: 117, 15: 117, 117, 31: 117, 82: 117, 90: 117, 94: 117},
		{1: 426, 5: 425, 408, 433, 17: 110, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 624, 99: 110, 103: 110, 179: 623, 200: 675},
		{115, 5: 115, 15: 115, 115, 31: 115, 82: 115, 90: 115, 94: 115},
		{113, 5: 113, 15: 113, 113, 31: 113, 82: 113, 90: 113, 94: 113},
		// 275
		{15: 660, 661, 31: 87, 90: 662, 94: 663, 197: 664, 674},
		{9: 120, 31: 456, 168: 649, 170: 120, 120, 120, 120, 248: 650},
		{119, 5: 119, 9: 119, 82: 119, 170: 119, 119, 119, 119},
		{9: 646, 170: 644, 642, 645, 643, 204: 651},
		{120, 5: 120, 31: 456, 82: 120, 168: 649, 248: 652},
		// 280
		{80, 5: 80, 82: 459, 180: 653},
		{96, 5: 655, 252: 656, 654},
		{658},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 657, 461},
		{95},
		// 285
		{97, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{15: 660, 661, 31: 87, 90: 662, 94: 663, 197: 664, 659},
		{31: 98},
		{31: 94, 91: 94, 97: 94},
		{31: 93, 91: 93, 97: 93},
		// 290
		{31: 92, 91: 92, 97: 92},
		{4: 666, 86: 665},
		{31: 86, 91: 86, 97: 86},
		{4: 670, 189: 669},
		{86: 667},
		// 295
		{189: 668},
		{31: 88, 91: 88, 97: 88},
		{31: 91, 91: 91, 97: 91},
		{86: 672, 189: 671},
		{31: 90, 91: 90, 97: 90},
		// 300
		{189: 673},
		{31: 89, 91: 89, 97: 89},
		{31: 99},
		{99: 676},
		{116, 5: 116, 15: 116, 116, 31: 116, 82: 116, 90: 116, 94: 116},
		// 305
		{99: 679, 120: 678},
		{118, 5: 118, 15: 118, 118, 31: 118, 82: 118, 90: 118, 94: 118},
		{114, 5: 114, 15: 114, 114, 31: 114, 82: 114, 90: 114, 94: 114},
		{125, 125, 125, 125, 125, 10: 125, 125, 125, 125, 32: 125, 125, 125, 125, 82: 125, 87: 125},
		{133, 133, 133, 133, 133, 10: 133, 133, 133, 133, 32: 133, 133, 133, 133, 82: 133, 87: 133},
		// 310
		{31: 456, 168: 640, 686},
		{31: 456, 168: 640, 685},
		{129, 129, 129, 129, 129, 10: 129, 129, 129, 129, 32: 129, 129, 129, 129, 82: 129, 87: 129},
		{131, 131, 131, 131, 131, 10: 131, 131, 131, 131, 32: 131, 131, 131, 131, 82: 131, 87: 131},
		{134, 134, 134, 134, 134, 10: 134, 134, 134, 134, 32: 134, 134, 134, 134, 82: 134, 87: 134},
		// 315
		{136, 136, 136, 136, 136, 10: 136, 136, 136, 136, 32: 136, 136, 136, 136, 82: 136, 87: 136},
		{31: 456, 168: 640, 691},
		{31: 456, 168: 640, 690},
		{132, 132, 132, 132, 132, 10: 132, 132, 132, 132, 32: 132, 132, 132, 132, 82: 132, 87: 132},
		{135, 135, 135, 135, 135, 10: 135, 135, 135, 135, 32: 135, 135, 135, 135, 82: 135, 87: 135},
		// 320
		{140, 2: 140, 140, 140, 10: 140, 140, 140, 140, 82: 140, 87: 140},
		{31: 456, 50: 453, 452, 454, 168: 455, 196: 694, 199: 451},
		{138, 4: 138},
		{142, 2: 142, 142, 142, 10: 142, 142, 142, 142, 82: 142, 285: 699},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 404, 406, 182: 698},
		// 325
		{143, 2: 143, 143, 143, 10: 143, 143, 143, 143, 82: 143},
		{145, 2: 145, 145, 145, 10: 145, 145, 145, 145, 82: 145},
		{146, 2: 146, 146, 146, 10: 146, 146, 146, 146, 82: 146},
		{237: 613, 701},
		{147, 2: 147, 147, 147, 10: 147, 147, 147, 147, 82: 147},
		// 330
		{78, 2: 78, 78, 10: 78, 78, 78, 704, 191: 703},
		{70, 2: 70, 70, 10: 70, 70, 715, 192: 714},
		{212: 705},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 548, 461, 181: 708, 202: 707, 213: 706},
		{77, 2: 77, 77, 712, 10: 77, 77, 77},
		// 335
		{76, 2: 76, 76, 76, 10: 76, 76, 76},
		{74, 2: 74, 74, 74, 10: 74, 74, 74, 37: 710, 711, 276: 709},
		{73, 2: 73, 73, 73, 10: 73, 73, 73},
		{72, 2: 72, 72, 72, 10: 72, 72, 72},
		{71, 2: 71, 71, 71, 10: 71, 71, 71},
		// 340
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 548, 461, 181: 708, 202: 713},
		{75, 2: 75, 75, 75, 10: 75, 75, 75},
		{68, 2: 68, 68, 10: 68, 718, 195: 717},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 716, 461},
		{69, 2: 69, 69, 8: 576, 563, 69, 69, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		// 345
		{66, 2: 66, 66, 10: 722, 194: 721},
		{212: 719},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 548, 461, 181: 708, 202: 707, 213: 720},
		{67, 2: 67, 67, 712, 10: 67},
		{165, 2: 165, 165},
		// 350
		{86: 726, 90: 725, 208: 724, 723},
		{65, 2: 65, 65, 727, 49: 728},
		{62, 2: 62, 62, 62, 49: 62},
		{61, 2: 61, 61, 61, 49: 61},
		{60, 2: 60, 60, 60, 49: 60},
		// 355
		{86: 726, 90: 725, 208: 724, 730},
		{86: 726, 90: 725, 208: 724, 729},
		{63, 2: 63, 63},
		{64, 2: 64, 64},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 32: 168, 168, 168, 168, 168, 168, 168, 168, 168, 42: 168},
		// 360
		{8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 36: 735, 201: 734, 249: 744},
		{6: 176, 36: 735, 39: 741, 201: 740, 225: 739},
		{6: 179, 36: 179, 39: 179},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 736, 461},
		{8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 42: 737},
		// 365
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 738, 461},
		{6: 177, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 36: 177, 39: 177},
		{6: 743},
		{6: 178, 36: 178, 39: 178},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 742, 461},
		// 370
		{6: 175, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 32: 180, 180, 180, 180, 180, 180, 180, 180, 180, 42: 180},
		{6: 176, 36: 735, 39: 741, 201: 740, 225: 745},
		{6: 746},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 32: 181, 181, 181, 181, 181, 181, 181, 181, 181, 42: 181},
		// 375
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 748, 461},
		{8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 40: 749},
		{41: 758, 43: 757, 759, 752, 751, 143: 756, 755, 147: 754, 151: 753, 219: 750},
		{766},
		{194, 4: 194, 8: 194, 156: 194, 166: 194, 194},
		// 380
		{193, 4: 193, 8: 193, 156: 193, 166: 193, 193},
		{192, 4: 192, 8: 192, 156: 192, 166: 192, 192},
		{191, 4: 191, 8: 191, 156: 191, 166: 191, 191},
		{190, 4: 190, 8: 190, 156: 190, 166: 190, 190},
		{189, 4: 189, 8: 189, 156: 189, 166: 189, 189},
		// 385
		{188, 4: 188, 8: 188, 156: 188, 166: 188, 188},
		{187, 4: 187, 8: 187, 64: 763, 156: 187, 166: 187, 187},
		{185, 4: 185, 8: 185, 64: 760, 156: 185, 166: 185, 185},
		{41: 761},
		{66: 762},
		// 390
		{184, 4: 184, 8: 184, 156: 184, 166: 184, 184},
		{41: 764},
		{66: 765},
		{186, 4: 186, 8: 186, 156: 186, 166: 186, 186},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 32: 195, 195, 195, 195, 195, 195, 195, 195, 195, 42: 195},
		// 395
		{55: 771, 58: 772, 60: 773, 770, 63: 774, 65: 769, 69: 775, 776, 256: 768},
		{14: 777},
		{14: 205},
		{14: 204},
		{14: 203},
		// 400
		{14: 202},
		{14: 201},
		{14: 200},
		{14: 199},
		{14: 198},
		// 405
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 778, 461},
		{779, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 32: 206, 206, 206, 206, 206, 206, 206, 206, 206, 42: 206},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 781},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 782, 461},
		// 410
		{208, 4: 784, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571, 274: 783},
		{786},
		{85: 489, 92: 491, 490, 124: 785},
		{207},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 32: 211, 211, 211, 211, 211, 211, 211, 211, 211, 42: 211},
		// 415
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 788},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 789, 461},
		{790, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 32: 212, 212, 212, 212, 212, 212, 212, 212, 212, 42: 212},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 792},
		// 420
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 793, 461},
		{794, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 32: 213, 213, 213, 213, 213, 213, 213, 213, 213, 42: 213},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 796},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 797, 461},
		// 425
		{798, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 32: 214, 214, 214, 214, 214, 214, 214, 214, 214, 42: 214},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 800},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 801, 461},
		{802, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		// 430
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 32: 215, 215, 215, 215, 215, 215, 215, 215, 215, 42: 215},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 804},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 805, 461},
		{806, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 32: 216, 216, 216, 216, 216, 216, 216, 216, 216, 42: 216},
		// 435
		{1: 210, 5: 210, 210, 210, 210, 210, 15: 808, 31: 210, 41: 210, 43: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 210, 92: 210, 210, 95: 210, 210, 98: 210, 100: 210, 210, 210, 104: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 174: 545, 809},
		{812},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 810, 461},
		{811, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 32: 217, 217, 217, 217, 217, 217, 217, 217, 217, 42: 217},
		// 440
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 32: 218, 218, 218, 218, 218, 218, 218, 218, 218, 42: 218},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 814, 461},
		{8: 576, 563, 14: 815, 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 816, 461, 287: 817},
		{221, 7: 221, 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		// 445
		{220, 7: 819, 259: 818},
		{821},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 820, 461},
		{219, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 32: 222, 222, 222, 222, 222, 222, 222, 222, 222, 42: 222},
		// 450
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 823, 461, 251: 824},
		{224, 4: 224, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{825, 4: 826},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 32: 241, 241, 241, 241, 241, 241, 241, 241, 241, 42: 241},
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 827, 461},
		// 455
		{223, 4: 223, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{830, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{25, 426, 5: 425, 408, 433, 25, 25, 15: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 449, 406, 88: 25},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 32: 242, 242, 242, 242, 242, 242, 242, 242, 242, 42: 242},
		{244, 244, 244, 244, 244, 244, 244, 244, 576, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 32: 244, 244, 244, 244, 244, 244, 244, 244, 244, 42: 244},
		// 460
		{259, 259, 259, 259, 259, 259, 259, 259, 576, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 32: 259, 259, 259, 259, 259, 259, 259, 259, 259, 42: 259},
		{55: 837, 58: 838, 60: 839, 836, 63: 840, 65: 835, 254: 834},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 32: 267, 267, 267, 267, 267, 267, 267, 267, 267, 42: 267, 156: 267, 166: 267, 267},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 32: 266, 266, 266, 266, 266, 266, 266, 266, 266, 42: 266, 156: 266, 166: 266, 266},
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 32: 265, 265, 265, 265, 265, 265, 265, 265, 265, 42: 265, 156: 265, 166: 265, 265},
		// 465
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 32: 264, 264, 264, 264, 264, 264, 264, 264, 264, 42: 264, 156: 264, 166: 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 32: 263, 263, 263, 263, 263, 263, 263, 263, 263, 42: 263, 156: 263, 166: 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 32: 262, 262, 262, 262, 262, 262, 262, 262, 262, 42: 262, 156: 262, 166: 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 32: 261, 261, 261, 261, 261, 261, 261, 261, 261, 42: 261, 156: 261, 166: 261, 261},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 32: 268, 268, 268, 268, 268, 268, 268, 268, 268, 42: 268, 156: 268, 166: 268, 268},
		// 470
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 32: 269, 269, 269, 269, 269, 269, 269, 269, 269, 42: 269, 156: 269, 166: 269, 269},
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 32: 270, 270, 270, 270, 270, 270, 270, 270, 270, 42: 270, 156: 270, 166: 270, 270},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 846, 406, 185: 845},
		{308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 32: 308, 308, 308, 308, 308, 308, 308, 308, 308, 42: 308},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 32: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 143: 49, 49, 147: 49, 151: 49},
		// 475
		{31: 456, 168: 859},
		{31: 456, 168: 858},
		{17: 629, 103: 628, 203: 626, 207: 854},
		{17: 629, 103: 628, 203: 626, 207: 851},
		{15: 660, 661, 90: 662, 87, 94: 663, 197: 664, 852},
		// 480
		{91: 853},
		{31: 123},
		{15: 660, 661, 90: 662, 87, 94: 663, 97: 87, 197: 664, 855},
		{91: 857, 97: 856},
		{31: 124},
		// 485
		{31: 122},
		{126, 126, 126, 126, 126, 9: 126, 126, 126, 126, 126, 32: 126, 126, 126, 126, 82: 126, 87: 126, 170: 126, 126, 126, 126, 186: 126, 126},
		{127, 127, 127, 127, 127, 9: 127, 127, 127, 127, 127, 32: 127, 127, 127, 127, 82: 127, 87: 127, 170: 127, 127, 127, 127, 186: 127, 127},
		{1: 82, 32: 82, 82, 82, 82},
		{2: 327, 327},
		// 490
		{1: 54, 5: 54, 54, 54, 41: 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 60: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 177: 866, 205: 873},
		{1: 54, 5: 54, 54, 54, 41: 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 60: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 177: 866, 205: 871},
		{1: 54, 5: 54, 54, 54, 41: 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 60: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 177: 866, 205: 865},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 868, 406},
		{95: 867},
		// 495
		{1: 53, 5: 53, 53, 53, 41: 53, 43: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 60: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{87: 869},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 870},
		{2: 328, 328},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 872},
		// 500
		{2: 329, 329},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 404, 406, 182: 874},
		{2: 330, 330},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 938, 291: 937},
		{122: 325, 125: 325, 268: 902, 901, 900},
		// 505
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 880, 229: 879, 262: 878},
		{4: 893, 14: 610, 190: 892},
		{4: 58, 14: 58},
		{164: 881},
		{31: 882},
		// 510
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 886, 123: 885, 210: 883, 239: 884},
		{311, 4: 311},
		{890, 4: 889},
		{19: 887},
		{88: 844},
		// 515
		{1: 426, 5: 425, 408, 433, 504, 502, 31: 505, 41: 498, 43: 497, 499, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 516, 429, 430, 417, 431, 446, 412, 447, 500, 448, 442, 443, 529, 527, 532, 524, 531, 405, 530, 526, 525, 523, 528, 83: 538, 406, 489, 492, 89: 460, 92: 491, 490, 95: 536, 515, 98: 493, 100: 495, 494, 496, 104: 501, 510, 522, 535, 511, 512, 519, 513, 517, 514, 520, 509, 507, 518, 521, 508, 123: 462, 482, 128: 484, 485, 488, 463, 483, 537, 486, 487, 472, 465, 464, 469, 477, 476, 471, 145: 480, 473, 148: 470, 506, 478, 152: 475, 474, 467, 479, 157: 466, 481, 534, 533, 468, 888, 461},
		{309, 4: 309, 8: 576, 563, 15: 559, 562, 574, 572, 564, 575, 561, 560, 567, 566, 568, 569, 565, 570, 573, 571},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 886, 123: 885, 210: 891},
		{4: 56, 14: 56},
		{310, 4: 310},
		// 520
		{2: 80, 80, 10: 80, 80, 80, 80, 82: 459, 180: 895},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 880, 229: 894},
		{4: 57, 14: 57},
		{2: 78, 78, 10: 78, 78, 78, 704, 191: 896},
		{2: 70, 70, 10: 70, 70, 715, 192: 897},
		// 525
		{2: 68, 68, 10: 68, 718, 195: 898},
		{2: 66, 66, 10: 722, 194: 899},
		{2: 59, 59},
		{122: 907, 125: 906, 228: 905, 261: 904},
		{122: 324, 125: 324},
		// 530
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 404, 406, 182: 903},
		{122: 323, 125: 323},
		{2: 150, 150, 929, 10: 150, 150, 150, 150, 610, 82: 150, 190: 930, 260: 928},
		{2: 322, 322, 322, 10: 322, 322, 322, 322, 322, 82: 322},
		{1: 426, 110, 110, 110, 425, 408, 433, 10: 110, 110, 110, 110, 110, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 110, 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 110, 538, 406, 89: 624, 121: 110, 179: 926},
		// 535
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 624, 127: 110, 179: 908},
		{127: 909},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 910},
		{18: 911},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 912},
		// 540
		{2: 317, 317, 317, 10: 317, 317, 317, 317, 317, 59: 916, 82: 317, 121: 317, 234: 913, 915, 914},
		{2: 319, 319, 319, 10: 319, 319, 319, 319, 319, 82: 319},
		{2: 314, 314, 314, 10: 314, 314, 314, 314, 314, 82: 314, 121: 922, 278: 921, 920},
		{2: 316, 316, 316, 10: 316, 316, 316, 316, 316, 82: 316, 121: 316},
		{31: 917},
		// 545
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 631, 232: 918},
		{919, 126: 633},
		{2: 315, 315, 315, 10: 315, 315, 315, 315, 315, 82: 315, 121: 315},
		{2: 318, 318, 318, 10: 318, 318, 318, 318, 318, 82: 318},
		{2: 313, 313, 313, 10: 313, 313, 313, 313, 313, 82: 313},
		// 550
		{31: 923},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 886, 123: 885, 210: 883, 239: 924},
		{925, 4: 889},
		{2: 312, 312, 312, 10: 312, 312, 312, 312, 312, 82: 312},
		{2: 317, 317, 317, 10: 317, 317, 317, 317, 317, 59: 916, 82: 317, 121: 317, 234: 927, 915, 914},
		// 555
		{2: 320, 320, 320, 10: 320, 320, 320, 320, 320, 82: 320},
		{2: 80, 80, 10: 80, 80, 80, 80, 82: 459, 180: 932},
		{122: 907, 125: 906, 228: 931},
		{2: 149, 149, 10: 149, 149, 149, 149, 82: 149},
		{2: 321, 321, 321, 10: 321, 321, 321, 321, 321, 82: 321},
		// 560
		{2: 78, 78, 10: 78, 78, 78, 704, 191: 933},
		{2: 70, 70, 10: 70, 70, 715, 192: 934},
		{2: 68, 68, 10: 68, 718, 195: 935},
		{2: 66, 66, 10: 722, 194: 936},
		{2: 326, 326},
		// 565
		{4: 940, 14: 610, 190: 939},
		{4: 108, 14: 108},
		{2: 80, 80, 10: 80, 80, 80, 80, 82: 459, 180: 942},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 538, 406, 89: 941},
		{4: 107, 14: 107},
		// 570
		{2: 78, 78, 10: 78, 78, 78, 704, 191: 943},
		{2: 70, 70, 10: 70, 70, 715, 192: 944},
		{2: 68, 68, 10: 68, 718, 195: 945},
		{2: 66, 66, 10: 722, 194: 946},
		{2: 331, 331},
		// 575
		{1: 52, 5: 52, 52, 52, 41: 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 60: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 177: 953, 206: 992},
		{1: 52, 5: 52, 52, 52, 41: 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 60: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 177: 953, 206: 966},
		{193: 951},
		{193: 332},
		{1: 52, 5: 52, 52, 52, 41: 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 60: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 177: 953, 206: 952},
		// 580
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 957, 406, 267: 956},
		{8: 954},
		{95: 955},
		{1: 51, 5: 51, 51, 51, 41: 51, 43: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 60: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{87: 958},
		// 585
		{87: 48},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 959},
		{31: 960},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 846, 406, 185: 962, 280: 961},
		{963, 4: 964},
		// 590
		{2, 4: 2},
		{2: 334, 334},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 846, 406, 185: 965},
		{1, 4: 1},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 632, 406, 176: 967},
		// 595
		{2: 347, 347, 31: 969, 273: 968},
		{2: 348, 348},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 846, 406, 185: 972, 233: 971, 272: 970},
		{989, 4: 990},
		{345, 4: 345},
		// 600
		{41: 758, 43: 757, 759, 752, 751, 143: 756, 755, 147: 754, 151: 753, 219: 973},
		{342, 4: 342, 8: 977, 156: 978, 166: 980, 979, 240: 976, 281: 975, 974},
		{343, 4: 343},
		{341, 4: 341, 8: 977, 156: 978, 166: 980, 979, 240: 988},
		{340, 4: 340, 8: 340, 156: 340, 166: 340, 340},
		// 605
		{156: 987},
		{337, 4: 337, 8: 337, 156: 337, 166: 337, 337},
		{41: 984, 43: 983, 985, 67: 986, 85: 489, 492, 92: 491, 490, 98: 493, 100: 495, 494, 496, 124: 482, 128: 484, 485, 488, 982, 483, 134: 486, 487},
		{85: 981},
		{335, 4: 335, 8: 335, 156: 335, 166: 335, 335},
		// 610
		{336, 4: 336, 8: 336, 156: 336, 166: 336, 336},
		{85: 843},
		{85: 842},
		{85: 841},
		{85: 833},
		// 615
		{338, 4: 338, 8: 338, 156: 338, 166: 338, 338},
		{339, 4: 339, 8: 339, 156: 339, 166: 339, 339},
		{2: 346, 346},
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 846, 406, 185: 972, 233: 991},
		{344, 4: 344},
		// 620
		{1: 426, 5: 425, 408, 433, 41: 416, 43: 413, 415, 410, 445, 423, 422, 418, 420, 421, 424, 407, 409, 414, 411, 419, 428, 60: 429, 430, 417, 431, 446, 412, 447, 427, 448, 442, 443, 434, 435, 444, 436, 441, 405, 437, 438, 439, 432, 440, 83: 404, 406, 182: 993},
		{2: 349, 349},
		{1: 401, 352, 352, 32: 85, 85, 85, 85, 53: 392, 393, 56: 397, 62: 398, 178: 400, 183: 399, 395, 188: 389, 211: 377, 214: 378, 394, 379, 381, 380, 220: 382, 396, 383, 385, 384, 226: 376, 386, 230: 387, 241: 388, 244: 995, 390, 402, 391},
		{2: 369, 369},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 302

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 20:
		{
			parser.yyVAL.statement = nil
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 23:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 24:
		{
			cl := &ast.CreateLabelStmt{
				IfNotExists: yyS[yypt-2].item.(bool),
				Label:       yyS[yypt-1].item.(model.CIStr),
			}
			if yyS[yypt-0].item != nil {
				cl.Properties = yyS[yypt-0].item.([]*ast.LabelProperty)
			}
			parser.yyVAL.statement = cl
		}
	case 25:
		{
			parser.yyVAL.item = nil
		}
	case 26:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 27:
		{
			parser.yyVAL.item = []*ast.LabelProperty{yyS[yypt-0].item.(*ast.LabelProperty)}
		}
	case 28:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.LabelProperty), yyS[yypt-0].item.(*ast.LabelProperty))
		}
	case 29:
		{
			lp := &ast.LabelProperty{
				Name: yyS[yypt-2].item.(model.CIStr),
				Type: yyS[yypt-1].item.(types.DataType),
			}
			if yyS[yypt-0].item != nil {
				lp.Options = yyS[yypt-0].item.([]*ast.LabelPropertyOption)
			}
			parser.yyVAL.item = lp
		}
	case 30:
		{
			parser.yyVAL.item = nil
		}
	case 32:
		{
			parser.yyVAL.item = []*ast.LabelPropertyOption{yyS[yypt-0].item.(*ast.LabelPropertyOption)}
		}
	case 33:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.LabelPropertyOption), yyS[yypt-0].item.(*ast.LabelPropertyOption))
		}
	case 34:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNotNull,
			}
		}
	case 35:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNull,
			}
		}
	case 36:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeDefault,
				Data: yyS[yypt-0].expr,
			}
		}
	case 37:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeComment,
				Data: yyS[yypt-0].ident,
			}
		}
	case 38:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-8].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-6].item.(bool),
				IndexName:   yyS[yypt-5].item.(model.CIStr),
				LabelName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 39:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 40:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 41:
		{
			ds := &ast.DeleteStmt{
				VariableNames: yyS[yypt-6].item.([]model.CIStr),
				From:          yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 42:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 43:
		{
			parser.yyVAL.statement = &ast.DropLabelStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Label:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 44:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-3].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-2].ident),
				LabelName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 45:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 46:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-5].item != nil {
				is.From = yyS[yypt-5].item.(*ast.MatchClauseList)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 47:
		{
			parser.yyVAL.item = nil
		}
	case 49:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 50:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 51:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 52:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 53:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].item.(model.CIStr),
				To:                  yyS[yypt-1].item.(model.CIStr),
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 54:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 55:
		{
			parser.yyVAL.item = nil
		}
	case 57:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 58:
		{
			parser.yyVAL.item = nil
		}
	case 60:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 61:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 62:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 63:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 64:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].item.(model.CIStr),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 86:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 94:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 95:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 96:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 97:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 98:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 99:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 100:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 101:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 102:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 103:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 104:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 105:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 106:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 107:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 108:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 109:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 110:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 111:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 112:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 115:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 119:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 120:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 121:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 122:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 123:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 124:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 125:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 126:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 127:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 128:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 129:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 130:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 131:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 148:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 149:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 150:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 152:
		{
			parser.yyVAL.expr = nil
		}
	case 153:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 154:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 155:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 156:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 157:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 158:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 159:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 160:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 161:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 162:
		{
			parser.yyVAL.item = false
		}
	case 163:
		{
			parser.yyVAL.item = true
		}
	case 164:
		{
			parser.yyVAL.expr = nil
		}
	case 165:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 166:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 167:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 168:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 169:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 170:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 171:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 172:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 173:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 174:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 175:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 176:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 177:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(types.DataType),
			}
		}
	case 178:
		{
			parser.yyVAL.item = types.DataTypeString
		}
	case 179:
		{
			parser.yyVAL.item = types.DataTypeBoolean
		}
	case 180:
		{
			parser.yyVAL.item = types.DataTypeInteger
		}
	case 181:
		{
			parser.yyVAL.item = types.DataTypeFloat
		}
	case 182:
		{
			parser.yyVAL.item = types.DataTypeDouble
		}
	case 183:
		{
			parser.yyVAL.item = types.DataTypeDecimal
		}
	case 184:
		{
			parser.yyVAL.item = types.DataTypeDate
		}
	case 185:
		{
			parser.yyVAL.item = types.DataTypeTime
		}
	case 186:
		{
			parser.yyVAL.item = types.DataTypeTimeWithZone
		}
	case 187:
		{
			parser.yyVAL.item = types.DataTypeTimestamp
		}
	case 188:
		{
			parser.yyVAL.item = types.DataTypeTimestampWithZone
		}
	case 191:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 192:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 193:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 194:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 195:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 196:
		{
			parser.yyVAL.expr = nil
		}
	case 197:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 198:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 199:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 200:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 201:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 202:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 203:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 204:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 207:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 208:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 209:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 210:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 211:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 212:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 213:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 214:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 215:
		{
			parser.yyVAL.item = ""
		}
	case 216:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 217:
		{
			parser.yyVAL.item = nil
		}
	case 218:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 219:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 220:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 221:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 222:
		{
			parser.yyVAL.item = nil
		}
	case 223:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 224:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 225:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 226:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 227:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 228:
		{
			parser.yyVAL.item = nil
		}
	case 231:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 232:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 233:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 234:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 235:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 236:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 237:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 238:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 239:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 240:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 241:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 242:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 243:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 244:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 245:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 246:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 247:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 248:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 249:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 250:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 251:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 252:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 254:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 255:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 256:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 257:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 258:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 259:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 260:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 261:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 262:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 264:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 265:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 266:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 267:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 271:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 272:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 273:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 274:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 275:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 276:
		{
			parser.yyVAL.item = nil
		}
	case 278:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 279:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 280:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 281:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 282:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 283:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 284:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 285:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 287:
		{
			parser.yyVAL.item = nil
		}
	case 289:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 290:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 291:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 292:
		{
			parser.yyVAL.item = nil
		}
	case 293:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 294:
		{
			parser.yyVAL.item = nil
		}
	case 295:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 296:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 297:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 298:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 299:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 300:
		{
			parser.yyVAL.item = false
		}
	case 301:
		{
			parser.yyVAL.item = true
		}
	case 302:
		{
			parser.yyVAL.item = nil
		}
	case 303:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 304:
		{
			parser.yyVAL.item = nil
		}
	case 305:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 306:
		{
			parser.yyVAL.item = nil
		}
	case 307:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 308:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 309:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 311:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 312:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 313:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 314:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 315:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 316:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].item.(model.CIStr),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 317:
		{
			parser.yyVAL.statement = &ast.UseStmt{
				GraphName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 318:
		{
			parser.yyVAL.item = false
		}
	case 319:
		{
			parser.yyVAL.item = true
		}
	case 320:
		{
			parser.yyVAL.item = false
		}
	case 321:
		{
			parser.yyVAL.item = true
		}
	case 322:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 323:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 324:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 325:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 370:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 371:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
