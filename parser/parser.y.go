// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57491
	yyEOFCode          = 57344
	abs                = 57452
	all                = 57416
	allDifferent       = 57459
	allProp            = 57474
	and                = 57391
	andand             = 57351
	andnot             = 57465
	any                = 57417
	arrayAgg           = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57466
	avg                = 57431
	begin              = 57401
	between            = 57392
	bitLit             = 57464
	booleanType        = 57405
	by                 = 57355
	caseKwd            = 57395
	cast               = 57440
	ceil               = 57453
	ceiling            = 57454
	cheapest           = 57419
	comment            = 57403
	commit             = 57404
	cost               = 57421
	count              = 57432
	create             = 57356
	dateType           = 57409
	day                = 57410
	decLit             = 57461
	decimalType        = 57406
	defaultKwd         = 57357
	deleteKwd          = 57358
	desc               = 57359
	distinct           = 57400
	div                = 57488
	doubleAtIdentifier = 57349
	doubleType         = 57360
	drop               = 57361
	edge               = 57362
	edgeIncomingLeft   = 57479
	edgeIncomingRight  = 57480
	edgeOutgoingLeft   = 57477
	edgeOutgoingRight  = 57478
	elementNumber      = 57455
	elseKwd            = 57398
	empty              = 57485
	end                = 57402
	eq                 = 57467
	yyErrCode          = 57345
	exists             = 57363
	explain            = 57407
	extract            = 57437
	falseKwd           = 57364
	floatLit           = 57460
	floatType          = 57365
	floor              = 57456
	forkKwd            = 57429
	from               = 57366
	ge                 = 57468
	graph              = 57415
	group              = 57367
	hasLabel           = 57457
	having             = 57368
	hexLit             = 57463
	hour               = 57424
	id                 = 57458
	identifier         = 57346
	ifKwd              = 57369
	in                 = 57399
	inDegree           = 57447
	index              = 57370
	insert             = 57371
	intLit             = 57462
	integerType        = 57372
	interval           = 57423
	into               = 57373
	invalid            = 57350
	is                 = 57374
	javaRegexpLike     = 57448
	label              = 57449
	labels             = 57393
	le                 = 57469
	leftArrow          = 57475
	limit              = 57375
	listagg            = 57433
	lower              = 57445
	lowerThanOn        = 57486
	match              = 57376
	matchNumber        = 57450
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57489
	month              = 57426
	neg                = 57490
	neq                = 57470
	neqSynonym         = 57471
	not                = 57377
	null               = 57378
	nulleq             = 57472
	offset             = 57414
	on                 = 57379
	or                 = 57390
	order              = 57380
	outDegree          = 57451
	paramMarker        = 57473
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57487
	prefix             = 57444
	properties         = 57394
	reachIncomingLeft  = 57483
	reachIncomingRight = 57484
	reachOutgoingLeft  = 57481
	reachOutgoingRight = 57482
	rightArrow         = 57476
	rollback           = 57413
	second             = 57427
	selectKwd          = 57381
	set                = 57382
	shortest           = 57418
	singleAtIdentifier = 57348
	stringKwd          = 57441
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57396
	timeType           = 57412
	timestampType      = 57411
	timezoneHour       = 57438
	timezoneMinute     = 57439
	top                = 57420
	trueKwd            = 57383
	unique             = 57384
	update             = 57385
	uppper             = 57446
	use                = 57386
	vertex             = 57387
	when               = 57397
	where              = 57388
	with               = 57442
	xor                = 57389
	yearType           = 57408
	zone               = 57443

	yyMaxDepth = 200
	yyTabOfs   = -359
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (278x)
		57422: 1,   // path (274x)
		57344: 2,   // $end (271x)
		59:    3,   // ';' (270x)
		57421: 4,   // cost (262x)
		57402: 5,   // end (258x)
		57429: 6,   // forkKwd (252x)
		45:    7,   // '-' (244x)
		44:    8,   // ',' (243x)
		57377: 9,   // not (237x)
		57375: 10,  // limit (227x)
		57380: 11,  // order (222x)
		57368: 12,  // having (217x)
		57367: 13,  // group (201x)
		57366: 14,  // from (198x)
		42:    15,  // '*' (195x)
		43:    16,  // '+' (193x)
		57374: 17,  // is (190x)
		57391: 18,  // and (180x)
		57467: 19,  // eq (180x)
		57399: 20,  // in (180x)
		37:    21,  // '%' (179x)
		47:    22,  // '/' (179x)
		60:    23,  // '<' (179x)
		62:    24,  // '>' (179x)
		57468: 25,  // ge (179x)
		57469: 26,  // le (179x)
		57471: 27,  // neqSynonym (179x)
		57390: 28,  // or (179x)
		57352: 29,  // pipes (179x)
		57389: 30,  // xor (179x)
		57381: 31,  // selectKwd (178x)
		40:    32,  // '(' (177x)
		57358: 33,  // deleteKwd (174x)
		57371: 34,  // insert (174x)
		57385: 35,  // update (174x)
		57397: 36,  // when (158x)
		57354: 37,  // asc (157x)
		57359: 38,  // desc (157x)
		57398: 39,  // elseKwd (156x)
		57353: 40,  // as (155x)
		57396: 41,  // then (152x)
		57393: 42,  // labels (105x)
		57419: 43,  // cheapest (104x)
		57418: 44,  // shortest (104x)
		57414: 45,  // offset (103x)
		57416: 46,  // all (102x)
		57417: 47,  // any (102x)
		57412: 48,  // timeType (102x)
		57420: 49,  // top (102x)
		57401: 50,  // begin (101x)
		57404: 51,  // commit (101x)
		57410: 52,  // day (101x)
		57407: 53,  // explain (101x)
		57415: 54,  // graph (101x)
		57424: 55,  // hour (101x)
		57425: 56,  // minute (101x)
		57426: 57,  // month (101x)
		57413: 58,  // rollback (101x)
		57427: 59,  // second (101x)
		57442: 60,  // with (101x)
		57408: 61,  // yearType (101x)
		57443: 62,  // zone (101x)
		57405: 63,  // booleanType (100x)
		57409: 64,  // dateType (100x)
		57444: 65,  // prefix (100x)
		57441: 66,  // stringKwd (100x)
		57411: 67,  // timestampType (100x)
		57438: 68,  // timezoneHour (100x)
		57439: 69,  // timezoneMinute (100x)
		57388: 70,  // where (100x)
		57430: 71,  // arrayAgg (99x)
		57431: 72,  // avg (99x)
		57440: 73,  // cast (99x)
		57432: 74,  // count (99x)
		57437: 75,  // extract (99x)
		57346: 76,  // identifier (99x)
		57423: 77,  // interval (99x)
		57433: 78,  // listagg (99x)
		57434: 79,  // max (99x)
		57435: 80,  // min (99x)
		57428: 81,  // substring (99x)
		57436: 82,  // sum (99x)
		57546: 83,  // Identifier (80x)
		57613: 84,  // UnReservedKeyword (80x)
		57462: 85,  // intLit (64x)
		46:    86,  // '.' (63x)
		57347: 87,  // stringLit (63x)
		57619: 88,  // VariableName (62x)
		57473: 89,  // paramMarker (61x)
		57484: 90,  // reachIncomingRight (60x)
		123:   91,  // '{' (58x)
		57464: 92,  // bitLit (58x)
		57363: 93,  // exists (58x)
		57463: 94,  // hexLit (58x)
		57449: 95,  // label (58x)
		57482: 96,  // reachOutgoingRight (58x)
		57480: 97,  // edgeIncomingRight (57x)
		58:    98,  // ':' (56x)
		63:    99,  // '?' (56x)
		57452: 100, // abs (56x)
		57459: 101, // allDifferent (56x)
		57395: 102, // caseKwd (56x)
		57453: 103, // ceil (56x)
		57454: 104, // ceiling (56x)
		57461: 105, // decLit (56x)
		57455: 106, // elementNumber (56x)
		57364: 107, // falseKwd (56x)
		57460: 108, // floatLit (56x)
		57456: 109, // floor (56x)
		57457: 110, // hasLabel (56x)
		57458: 111, // id (56x)
		57447: 112, // inDegree (56x)
		57448: 113, // javaRegexpLike (56x)
		57445: 114, // lower (56x)
		57450: 115, // matchNumber (56x)
		57451: 116, // outDegree (56x)
		57383: 117, // trueKwd (56x)
		57446: 118, // uppper (56x)
		57478: 119, // edgeOutgoingRight (55x)
		57394: 120, // properties (52x)
		57362: 121, // edge (50x)
		57587: 122, // PropertyAccess (50x)
		57387: 123, // vertex (50x)
		124:   124, // '|' (49x)
		57609: 125, // StringLiteral (49x)
		57392: 126, // between (48x)
		57610: 127, // Subquery (48x)
		57492: 128, // Aggregation (47x)
		57495: 129, // ArithmeticExpression (47x)
		57497: 130, // BindVariable (47x)
		57498: 131, // BooleanLiteral (47x)
		57499: 132, // BracketedValueExpression (47x)
		57502: 133, // CaseExpression (47x)
		57503: 134, // CastSpecification (47x)
		57504: 135, // CharacterSubstring (47x)
		57513: 136, // DateLiteral (47x)
		57524: 137, // ExistsPredicate (47x)
		57528: 138, // ExtractFunction (47x)
		57534: 139, // FunctionInvocation (47x)
		57535: 140, // FunctionName (47x)
		57549: 141, // InPredicate (47x)
		57554: 142, // IntervalLiteral (47x)
		57557: 143, // IsNotNullPredicate (47x)
		57558: 144, // IsNullPredicate (47x)
		57570: 145, // Literal (47x)
		57571: 146, // LogicalExpression (47x)
		57574: 147, // NotInPredicate (47x)
		57575: 148, // NumericLiteral (47x)
		57594: 149, // RelationalExpression (47x)
		57597: 150, // ScalarSubquery (47x)
		57598: 151, // SearchedCase (47x)
		57603: 152, // SimpleCase (47x)
		57608: 153, // StringConcat (47x)
		57611: 154, // TimeLiteral (47x)
		57612: 155, // TimestampLiteral (47x)
		57616: 156, // ValueExpression (47x)
		57622: 157, // VariableReference (47x)
		57382: 158, // set (46x)
		57474: 159, // allProp (45x)
		57624: 160, // VertexPattern (19x)
		57379: 161, // on (17x)
		57618: 162, // VariableLengthPathPattern (10x)
		57479: 163, // edgeIncomingLeft (9x)
		57477: 164, // edgeOutgoingLeft (9x)
		57475: 165, // leftArrow (9x)
		57476: 166, // rightArrow (9x)
		57400: 167, // distinct (8x)
		57516: 168, // DistinctOpt (8x)
		57369: 169, // ifKwd (6x)
		57580: 170, // PathPatternMacro (6x)
		57621: 171, // VariableNameOpt (6x)
		57628: 172, // WhereClauseOpt (6x)
		57525: 173, // ExpAsVar (5x)
		57540: 174, // GraphName (5x)
		57559: 175, // LabelName (5x)
		57581: 176, // PathPatternMacroList (5x)
		57582: 177, // PathPatternMacroOpt (5x)
		57483: 178, // reachIncomingLeft (5x)
		57481: 179, // reachOutgoingLeft (5x)
		57602: 180, // SelectStmt (5x)
		125:   181, // '}' (4x)
		57532: 182, // FromClause (4x)
		57544: 183, // GroupByClauseOpt (4x)
		57545: 184, // HavingClauseOpt (4x)
		57370: 185, // index (4x)
		57567: 186, // LimitClauseOpt (4x)
		57577: 187, // OrderByClauseOpt (4x)
		57578: 188, // PathPattern (4x)
		57583: 189, // PatternQuantifier (4x)
		57584: 190, // PatternQuantifierOpt (4x)
		57604: 191, // SimplePathPattern (4x)
		57623: 192, // VariableSpec (4x)
		57626: 193, // WhenClause (4x)
		57500: 194, // ByItem (3x)
		57505: 195, // ColonOrIsKeyword (3x)
		57520: 196, // EdgePattern (3x)
		57547: 197, // IfExists (3x)
		57548: 198, // IfNotExists (3x)
		57561: 199, // LabelPredicate (3x)
		57566: 200, // LengthNum (3x)
		57568: 201, // LimitOption (3x)
		57588: 202, // PropertyAssignment (3x)
		57590: 203, // PropertyName (3x)
		57496: 204, // BeginStmt (2x)
		57355: 205, // by (2x)
		57501: 206, // ByList (2x)
		57506: 207, // CommitStmt (2x)
		57356: 208, // create (2x)
		57509: 209, // CreateGraphStmt (2x)
		57510: 210, // CreateIndexStmt (2x)
		57511: 211, // CreateLabelStmt (2x)
		57515: 212, // DeleteStmt (2x)
		57361: 213, // drop (2x)
		57517: 214, // DropGraphStmt (2x)
		57518: 215, // DropIndexStmt (2x)
		57519: 216, // DropLabelStmt (2x)
		57521: 217, // ElseClauseOpt (2x)
		57522: 218, // EmptyStmt (2x)
		57526: 219, // ExplainStmt (2x)
		57536: 220, // GraphElementInsertion (2x)
		57538: 221, // GraphElementUpdate (2x)
		57553: 222, // InsertStmt (2x)
		57550: 223, // InValueList (2x)
		57560: 224, // LabelNameList (2x)
		57565: 225, // LabelsAndProperties (2x)
		57563: 226, // LabelSpecification (2x)
		57564: 227, // LabelSpecificationOpt (2x)
		57376: 228, // match (2x)
		57572: 229, // MatchClause (2x)
		57378: 230, // null (2x)
		57589: 231, // PropertyAssignmentList (2x)
		57595: 232, // RollbackStmt (2x)
		57599: 233, // SelectClause (2x)
		57600: 234, // SelectEelement (2x)
		57606: 235, // Statement (2x)
		57614: 236, // UpdateStmt (2x)
		57386: 237, // use (2x)
		57615: 238, // UseStmt (2x)
		57625: 239, // VertexPatternOpt (2x)
		57627: 240, // WhenClauseList (2x)
		57493: 241, // AllPropertiesPrefixOpt (1x)
		57494: 242, // ArgumentList (1x)
		57507: 243, // CostClause (1x)
		57508: 244, // CostClauseOpt (1x)
		57512: 245, // DataType (1x)
		57514: 246, // DateTimeField (1x)
		57406: 247, // decimalType (1x)
		57360: 248, // doubleType (1x)
		57523: 249, // Entry (1x)
		57527: 250, // ExtractField (1x)
		57529: 251, // FieldAsName (1x)
		57530: 252, // FieldAsNameOpt (1x)
		57365: 253, // floatType (1x)
		57531: 254, // ForStringLengthOpt (1x)
		57533: 255, // FromClauseOpt (1x)
		57537: 256, // GraphElementInsertionList (1x)
		57539: 257, // GraphElementUpdateList (1x)
		57541: 258, // GraphOnClause (1x)
		57542: 259, // GraphOnClauseOpt (1x)
		57543: 260, // GraphPattern (1x)
		57551: 261, // IndexKeyTypeOpt (1x)
		57552: 262, // IndexName (1x)
		57372: 263, // integerType (1x)
		57373: 264, // into (1x)
		57555: 265, // IntoClause (1x)
		57556: 266, // IntoClauseOpt (1x)
		57562: 267, // LabelPredicateOpt (1x)
		57569: 268, // ListaggSeparatorOpt (1x)
		57573: 269, // MatchClauseList (1x)
		57576: 270, // Order (1x)
		57579: 271, // PathPatternList (1x)
		57585: 272, // PropertiesSpecification (1x)
		57586: 273, // PropertiesSpecificationOpt (1x)
		57591: 274, // PropertyNameList (1x)
		57592: 275, // QuantifiedPathExpr (1x)
		57593: 276, // ReachabilityPathExpr (1x)
		57596: 277, // RowsPerMatchOpt (1x)
		57601: 278, // SelectElementList (1x)
		57605: 279, // StartPosition (1x)
		57607: 280, // StatementList (1x)
		57384: 281, // unique (1x)
		57617: 282, // ValueExpressionList (1x)
		57620: 283, // VariableNameList (1x)
		57491: 284, // $default (0x)
		38:    285, // '&' (0x)
		94:    286, // '^' (0x)
		126:   287, // '~' (0x)
		57351: 288, // andand (0x)
		57465: 289, // andnot (0x)
		57466: 290, // assignmentEq (0x)
		57403: 291, // comment (0x)
		57357: 292, // defaultKwd (0x)
		57488: 293, // div (0x)
		57349: 294, // doubleAtIdentifier (0x)
		57485: 295, // empty (0x)
		57345: 296, // error (0x)
		57350: 297, // invalid (0x)
		57486: 298, // lowerThanOn (0x)
		57489: 299, // mod (0x)
		57490: 300, // neg (0x)
		57470: 301, // neq (0x)
		57472: 302, // nulleq (0x)
		57487: 303, // pipesAsOr (0x)
		57348: 304, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"cost",
		"end",
		"forkKwd",
		"'-'",
		"','",
		"not",
		"limit",
		"order",
		"having",
		"group",
		"from",
		"'*'",
		"'+'",
		"is",
		"and",
		"eq",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"selectKwd",
		"'('",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"then",
		"labels",
		"cheapest",
		"shortest",
		"offset",
		"all",
		"any",
		"timeType",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"booleanType",
		"dateType",
		"prefix",
		"stringKwd",
		"timestampType",
		"timezoneHour",
		"timezoneMinute",
		"where",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"interval",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"Identifier",
		"UnReservedKeyword",
		"intLit",
		"'.'",
		"stringLit",
		"VariableName",
		"paramMarker",
		"reachIncomingRight",
		"'{'",
		"bitLit",
		"exists",
		"hexLit",
		"label",
		"reachOutgoingRight",
		"edgeIncomingRight",
		"':'",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"decLit",
		"elementNumber",
		"falseKwd",
		"floatLit",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"lower",
		"matchNumber",
		"outDegree",
		"trueKwd",
		"uppper",
		"edgeOutgoingRight",
		"properties",
		"edge",
		"PropertyAccess",
		"vertex",
		"'|'",
		"StringLiteral",
		"between",
		"Subquery",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BooleanLiteral",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"DateLiteral",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IntervalLiteral",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"Literal",
		"LogicalExpression",
		"NotInPredicate",
		"NumericLiteral",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"TimeLiteral",
		"TimestampLiteral",
		"ValueExpression",
		"VariableReference",
		"set",
		"allProp",
		"VertexPattern",
		"on",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"ifKwd",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"LabelName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"IfExists",
		"IfNotExists",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"PropertyName",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"CreateLabelStmt",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"DropLabelStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertion",
		"GraphElementUpdate",
		"InsertStmt",
		"InValueList",
		"LabelNameList",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"null",
		"PropertyAssignmentList",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DataType",
		"DateTimeField",
		"decimalType",
		"doubleType",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"floatType",
		"ForStringLengthOpt",
		"FromClauseOpt",
		"GraphElementInsertionList",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"IndexName",
		"integerType",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"LabelPredicateOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableNameList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"comment",
		"defaultKwd",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{249, 1},
		{280, 1},
		{280, 3},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{235, 1},
		{218, 0},
		{204, 1},
		{207, 1},
		{209, 4},
		{211, 4},
		{210, 8},
		{261, 0},
		{261, 1},
		{212, 9},
		{214, 4},
		{216, 4},
		{215, 4},
		{219, 2},
		{222, 10},
		{266, 0},
		{266, 1},
		{265, 2},
		{256, 1},
		{256, 3},
		{220, 3},
		{220, 7},
		{225, 2},
		{227, 0},
		{227, 1},
		{226, 4},
		{273, 0},
		{273, 1},
		{272, 4},
		{231, 1},
		{231, 3},
		{202, 3},
		{122, 3},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{156, 1},
		{157, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{145, 1},
		{125, 1},
		{125, 1},
		{125, 1},
		{148, 1},
		{148, 1},
		{148, 1},
		{131, 1},
		{131, 1},
		{136, 2},
		{154, 2},
		{155, 2},
		{142, 3},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{246, 1},
		{130, 1},
		{129, 2},
		{129, 3},
		{129, 3},
		{129, 3},
		{129, 3},
		{129, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{149, 3},
		{146, 3},
		{146, 3},
		{146, 3},
		{146, 2},
		{153, 3},
		{132, 3},
		{139, 4},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{242, 1},
		{242, 3},
		{135, 7},
		{279, 1},
		{254, 0},
		{254, 2},
		{128, 4},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 5},
		{128, 6},
		{168, 0},
		{168, 1},
		{268, 0},
		{268, 2},
		{138, 6},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{144, 3},
		{143, 4},
		{134, 6},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 1},
		{245, 4},
		{245, 1},
		{245, 4},
		{133, 1},
		{133, 1},
		{152, 5},
		{151, 4},
		{240, 1},
		{240, 2},
		{193, 4},
		{217, 0},
		{217, 2},
		{141, 3},
		{147, 4},
		{223, 3},
		{282, 1},
		{282, 3},
		{137, 2},
		{127, 3},
		{150, 1},
		{232, 1},
		{180, 8},
		{233, 3},
		{233, 2},
		{278, 1},
		{278, 3},
		{234, 1},
		{234, 3},
		{173, 2},
		{241, 0},
		{241, 2},
		{252, 0},
		{252, 1},
		{251, 2},
		{251, 2},
		{182, 2},
		{255, 0},
		{255, 1},
		{269, 1},
		{269, 3},
		{229, 4},
		{258, 2},
		{259, 0},
		{259, 1},
		{277, 0},
		{260, 1},
		{260, 3},
		{271, 1},
		{271, 3},
		{188, 1},
		{188, 2},
		{188, 3},
		{188, 3},
		{188, 4},
		{188, 3},
		{188, 3},
		{188, 4},
		{188, 2},
		{191, 1},
		{191, 3},
		{191, 3},
		{162, 3},
		{276, 4},
		{276, 4},
		{276, 4},
		{160, 3},
		{239, 0},
		{239, 1},
		{196, 3},
		{196, 1},
		{196, 3},
		{196, 1},
		{196, 3},
		{196, 1},
		{192, 2},
		{88, 1},
		{171, 0},
		{171, 1},
		{283, 1},
		{283, 3},
		{199, 2},
		{267, 0},
		{267, 1},
		{195, 1},
		{195, 1},
		{224, 1},
		{224, 3},
		{275, 2},
		{275, 8},
		{243, 2},
		{244, 0},
		{244, 1},
		{189, 1},
		{189, 1},
		{189, 1},
		{189, 3},
		{189, 4},
		{189, 5},
		{189, 4},
		{190, 0},
		{190, 1},
		{177, 0},
		{177, 1},
		{176, 1},
		{176, 2},
		{170, 5},
		{172, 0},
		{172, 2},
		{183, 0},
		{183, 3},
		{206, 1},
		{206, 3},
		{194, 1},
		{194, 2},
		{270, 1},
		{270, 1},
		{184, 0},
		{184, 2},
		{187, 0},
		{187, 3},
		{186, 0},
		{186, 2},
		{186, 4},
		{186, 4},
		{201, 1},
		{201, 1},
		{200, 1},
		{236, 9},
		{257, 1},
		{257, 3},
		{221, 5},
		{238, 2},
		{197, 0},
		{197, 2},
		{198, 0},
		{198, 3},
		{174, 1},
		{203, 1},
		{262, 1},
		{175, 1},
		{83, 1},
		{83, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{84, 1},
		{274, 1},
		{274, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [596][]uint16{
		// 0
		{1: 388, 339, 339, 31: 85, 33: 85, 85, 85, 50: 379, 380, 53: 384, 58: 385, 170: 387, 176: 386, 382, 180: 376, 204: 364, 207: 365, 381, 366, 368, 367, 369, 383, 370, 372, 371, 218: 363, 373, 222: 374, 232: 375, 235: 362, 377, 389, 378, 249: 360, 280: 361},
		{2: 359},
		{2: 358, 953},
		{2: 357, 357},
		{2: 355, 355},
		// 5
		{2: 354, 354},
		{2: 353, 353},
		{2: 352, 352},
		{2: 351, 351},
		{2: 350, 350},
		// 10
		{2: 349, 349},
		{2: 348, 348},
		{2: 347, 347},
		{2: 346, 346},
		{2: 345, 345},
		// 15
		{2: 344, 344},
		{2: 343, 343},
		{2: 342, 342},
		{2: 341, 341},
		{2: 340, 340},
		// 20
		{2: 338, 338},
		{2: 337, 337},
		{54: 932, 95: 933, 185: 333, 261: 934, 281: 935},
		{31: 531, 33: 860, 861, 862, 233: 530},
		{54: 849, 95: 850, 185: 851},
		// 25
		{1: 388, 31: 85, 170: 387, 176: 386, 529, 180: 848},
		{2: 166, 166},
		{1: 388, 31: 84, 33: 84, 84, 84, 170: 847},
		{1: 83, 31: 83, 33: 83, 83, 83},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 436, 393},
		// 30
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 391, 393, 174: 390},
		{2: 55, 55},
		{50, 2: 50, 50, 8: 50, 10: 50, 50, 50, 50, 70: 50, 121: 50, 123: 50},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 70: 46, 86: 46, 89: 46, 46, 46, 96: 46, 46, 46, 119: 46, 46, 46, 123: 46, 46, 126: 46, 158: 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 70: 45, 86: 45, 89: 45, 45, 45, 96: 45, 45, 45, 119: 45, 45, 45, 123: 45, 45, 126: 45, 158: 45, 45},
		// 35
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 70: 44, 86: 44, 89: 44, 44, 44, 96: 44, 44, 44, 119: 44, 44, 44, 123: 44, 44, 126: 44, 158: 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 70: 43, 86: 43, 89: 43, 43, 43, 96: 43, 43, 43, 119: 43, 43, 43, 123: 43, 43, 126: 43, 158: 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 70: 42, 86: 42, 89: 42, 42, 42, 96: 42, 42, 42, 119: 42, 42, 42, 123: 42, 42, 126: 42, 158: 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 70: 41, 86: 41, 89: 41, 41, 41, 96: 41, 41, 41, 119: 41, 41, 41, 123: 41, 41, 126: 41, 158: 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 70: 40, 86: 40, 89: 40, 40, 40, 96: 40, 40, 40, 119: 40, 40, 40, 123: 40, 40, 126: 40, 158: 40, 40},
		// 40
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 70: 39, 86: 39, 89: 39, 39, 39, 96: 39, 39, 39, 119: 39, 39, 39, 123: 39, 39, 126: 39, 158: 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 70: 38, 86: 38, 89: 38, 38, 38, 96: 38, 38, 38, 119: 38, 38, 38, 123: 38, 38, 126: 38, 158: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 70: 37, 86: 37, 89: 37, 37, 37, 96: 37, 37, 37, 119: 37, 37, 37, 123: 37, 37, 126: 37, 158: 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 70: 36, 86: 36, 89: 36, 36, 36, 96: 36, 36, 36, 119: 36, 36, 36, 123: 36, 36, 126: 36, 158: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 70: 35, 86: 35, 89: 35, 35, 35, 96: 35, 35, 35, 119: 35, 35, 35, 123: 35, 35, 126: 35, 158: 35},
		// 45
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 70: 34, 86: 34, 89: 34, 34, 34, 96: 34, 34, 34, 119: 34, 34, 34, 123: 34, 34, 126: 34, 158: 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 70: 33, 86: 33, 89: 33, 33, 33, 96: 33, 33, 33, 119: 33, 33, 33, 123: 33, 33, 126: 33, 158: 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 70: 32, 86: 32, 89: 32, 32, 32, 96: 32, 32, 32, 119: 32, 32, 32, 123: 32, 32, 126: 32, 158: 32, 32},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 70: 31, 86: 31, 89: 31, 31, 31, 96: 31, 31, 31, 119: 31, 31, 31, 123: 31, 31, 126: 31, 158: 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 70: 30, 86: 30, 89: 30, 30, 30, 96: 30, 30, 30, 119: 30, 30, 30, 123: 30, 30, 126: 30, 158: 30, 30},
		// 50
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 70: 29, 86: 29, 89: 29, 29, 29, 96: 29, 29, 29, 119: 29, 29, 29, 123: 29, 29, 126: 29, 158: 29, 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 70: 28, 86: 28, 89: 28, 28, 28, 96: 28, 28, 28, 119: 28, 28, 28, 123: 28, 28, 126: 28, 158: 28, 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 70: 27, 86: 27, 89: 27, 27, 27, 96: 27, 27, 27, 119: 27, 27, 27, 123: 27, 27, 126: 27, 158: 27, 27},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 70: 26, 86: 26, 89: 26, 26, 26, 96: 26, 26, 26, 119: 26, 26, 26, 123: 26, 26, 126: 26, 158: 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 70: 25, 86: 25, 89: 25, 25, 25, 96: 25, 25, 25, 119: 25, 25, 25, 123: 25, 25, 126: 25, 158: 25, 25},
		// 55
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 70: 24, 86: 24, 89: 24, 24, 24, 96: 24, 24, 24, 119: 24, 24, 24, 123: 24, 24, 126: 24, 158: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 70: 23, 86: 23, 89: 23, 23, 23, 96: 23, 23, 23, 119: 23, 23, 23, 123: 23, 23, 126: 23, 158: 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 70: 22, 86: 22, 89: 22, 22, 22, 96: 22, 22, 22, 119: 22, 22, 22, 123: 22, 22, 126: 22, 158: 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 70: 21, 86: 21, 89: 21, 21, 21, 96: 21, 21, 21, 119: 21, 21, 21, 123: 21, 21, 126: 21, 158: 21, 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 70: 20, 86: 20, 89: 20, 20, 20, 96: 20, 20, 20, 119: 20, 20, 20, 123: 20, 20, 126: 20, 158: 20, 20},
		// 60
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 70: 19, 86: 19, 89: 19, 19, 19, 96: 19, 19, 19, 119: 19, 19, 19, 123: 19, 19, 126: 19, 158: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 70: 18, 86: 18, 89: 18, 18, 18, 96: 18, 18, 18, 119: 18, 18, 18, 123: 18, 18, 126: 18, 158: 18, 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 70: 17, 86: 17, 89: 17, 17, 17, 96: 17, 17, 17, 119: 17, 17, 17, 123: 17, 17, 126: 17, 158: 17},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 70: 16, 86: 16, 89: 16, 16, 16, 96: 16, 16, 16, 119: 16, 16, 16, 123: 16, 16, 126: 16, 158: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 70: 15, 86: 15, 89: 15, 15, 15, 96: 15, 15, 15, 119: 15, 15, 15, 123: 15, 15, 126: 15, 158: 15},
		// 65
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 70: 14, 86: 14, 89: 14, 14, 14, 96: 14, 14, 14, 119: 14, 14, 14, 123: 14, 14, 126: 14, 158: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 70: 13, 86: 13, 89: 13, 13, 13, 96: 13, 13, 13, 119: 13, 13, 13, 123: 13, 13, 126: 13, 158: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 70: 12, 86: 12, 89: 12, 12, 12, 96: 12, 12, 12, 119: 12, 12, 12, 123: 12, 12, 126: 12, 158: 12},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 70: 11, 86: 11, 89: 11, 11, 11, 96: 11, 11, 11, 119: 11, 11, 11, 123: 11, 11, 126: 11, 158: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 70: 10, 86: 10, 89: 10, 10, 10, 96: 10, 10, 10, 119: 10, 10, 10, 123: 10, 10, 126: 10, 158: 10},
		// 70
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 70: 9, 86: 9, 89: 9, 9, 9, 96: 9, 9, 9, 119: 9, 9, 9, 123: 9, 9, 126: 9, 158: 9, 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 70: 8, 86: 8, 89: 8, 8, 8, 96: 8, 8, 8, 119: 8, 8, 8, 123: 8, 8, 126: 8, 158: 8, 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 70: 7, 86: 7, 89: 7, 7, 7, 96: 7, 7, 7, 119: 7, 7, 7, 123: 7, 7, 126: 7, 158: 7},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 70: 6, 86: 6, 89: 6, 6, 6, 96: 6, 6, 6, 119: 6, 6, 6, 123: 6, 6, 126: 6, 158: 6, 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 70: 5, 86: 5, 89: 5, 5, 5, 96: 5, 5, 5, 119: 5, 5, 5, 123: 5, 5, 126: 5, 158: 5, 5},
		// 75
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 70: 4, 86: 4, 89: 4, 4, 4, 96: 4, 4, 4, 119: 4, 4, 4, 123: 4, 4, 126: 4, 158: 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 70: 3, 86: 3, 89: 3, 3, 3, 96: 3, 3, 3, 119: 3, 3, 3, 123: 3, 3, 126: 3, 158: 3, 3},
		{40: 437},
		{32: 443, 46: 440, 439, 49: 441, 160: 442, 188: 444, 191: 438},
		{137, 137, 137, 137, 7: 633, 137, 10: 137, 137, 137, 137, 31: 137, 33: 137, 137, 137, 70: 137, 161: 137, 163: 631, 629, 632, 630, 178: 837, 836, 196: 835, 276: 834},
		// 80
		{32: 443, 43: 676, 675, 160: 627, 162: 674},
		{32: 443, 43: 670, 669, 160: 627, 162: 671},
		{85: 623},
		{128, 128, 128, 128, 7: 128, 128, 10: 128, 128, 128, 128, 31: 128, 33: 128, 128, 128, 70: 128, 161: 128, 163: 128, 128, 128, 128, 178: 128, 128},
		{110, 413, 4: 412, 395, 420, 17: 110, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 98: 110, 171: 610, 192: 609},
		// 85
		{1: 80, 31: 80, 33: 80, 80, 80, 70: 446, 172: 445},
		{1: 81, 31: 81, 33: 81, 81, 81},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 490, 448},
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 33: 286, 286, 286, 286, 286, 286, 286, 286, 286, 86: 831},
		{307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 33: 307, 307, 307, 307, 307, 307, 307, 307, 307},
		// 90
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 33: 306, 306, 306, 306, 306, 306, 306, 306, 306},
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 33: 305, 305, 305, 305, 305, 305, 305, 305, 305},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 33: 304, 304, 304, 304, 304, 304, 304, 304, 304},
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 33: 303, 303, 303, 303, 303, 303, 303, 303, 303},
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 33: 302, 302, 302, 302, 302, 302, 302, 302, 302},
		// 95
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 33: 301, 301, 301, 301, 301, 301, 301, 301, 301},
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 33: 300, 300, 300, 300, 300, 300, 300, 300, 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 33: 299, 299, 299, 299, 299, 299, 299, 299, 299},
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 33: 298, 298, 298, 298, 298, 298, 298, 298, 298},
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 33: 297, 297, 297, 297, 297, 297, 297, 297, 297},
		// 100
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 33: 296, 296, 296, 296, 296, 296, 296, 296, 296},
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 33: 295, 295, 295, 295, 295, 295, 295, 295, 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 33: 294, 294, 294, 294, 294, 294, 294, 294, 294},
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 33: 293, 293, 293, 293, 293, 293, 293, 293, 293},
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 33: 292, 292, 292, 292, 292, 292, 292, 292, 292},
		// 105
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 33: 291, 291, 291, 291, 291, 291, 291, 291, 291},
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 33: 290, 290, 290, 290, 290, 290, 290, 290, 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 33: 289, 289, 289, 289, 289, 289, 289, 289, 289},
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 33: 288, 288, 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 33: 287, 287, 287, 287, 287, 287, 287, 287, 287},
		// 110
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 33: 285, 285, 285, 285, 285, 285, 285, 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 33: 284, 284, 284, 284, 284, 284, 284, 284, 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 33: 283, 283, 283, 283, 283, 283, 283, 283, 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 33: 282, 282, 282, 282, 282, 282, 282, 282, 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 33: 281, 281, 281, 281, 281, 281, 281, 281, 281},
		// 115
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 33: 280, 280, 280, 280, 280, 280, 280, 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 33: 279, 279, 279, 279, 279, 279, 279, 279, 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 33: 278, 278, 278, 278, 278, 278, 278, 278, 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 33: 277, 277, 277, 277, 277, 277, 277, 277, 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 33: 276, 276, 276, 276, 276, 276, 276, 276, 276},
		// 120
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 33: 275, 275, 275, 275, 275, 275, 275, 275, 275},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 33: 274, 274, 274, 274, 274, 274, 274, 274, 274},
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 33: 273, 273, 273, 273, 273, 273, 273, 273, 273},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 33: 272, 272, 272, 272, 272, 272, 272, 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 33: 271, 271, 271, 271, 271, 271, 271, 271, 271},
		// 125
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 33: 38, 38, 38, 38, 38, 38, 38, 38, 38, 86: 38, 830, 159: 38},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 33: 35, 35, 35, 35, 35, 35, 35, 35, 35, 86: 35, 829, 159: 35},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 33: 36, 36, 36, 36, 36, 36, 36, 36, 36, 86: 36, 828, 159: 36},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 33: 24, 24, 24, 24, 24, 24, 24, 24, 24, 86: 24, 820, 159: 24},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 33: 260, 260, 260, 260, 260, 260, 260, 260, 260},
		// 130
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 819, 448},
		{79, 79, 79, 79, 79, 7: 550, 9: 563, 79, 79, 79, 79, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 79, 33: 79, 79, 79},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 818, 448},
		{1: 816, 4: 412, 395, 420, 489, 9: 491, 31: 85, 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 815, 448, 170: 387, 176: 386, 529, 180: 528},
		{32: 809},
		// 135
		{32: 240},
		{32: 239},
		{32: 238},
		{32: 237},
		{32: 236},
		// 140
		{32: 235},
		{32: 234},
		{32: 233},
		{32: 232},
		{32: 231},
		// 145
		{32: 230},
		{32: 229},
		{32: 228},
		{32: 227},
		{32: 226},
		// 150
		{32: 225},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 800, 19, 19, 19, 19, 19, 19, 19, 19, 19, 86: 19, 159: 19},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 794, 15, 15, 15, 15, 15, 15, 15, 15, 15, 86: 15, 159: 15},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 790, 12, 12, 12, 12, 12, 12, 12, 12, 12, 86: 12, 159: 12},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 786, 13, 13, 13, 13, 13, 13, 13, 13, 13, 86: 13, 159: 13},
		// 155
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 782, 16, 16, 16, 16, 16, 16, 16, 16, 16, 86: 16, 159: 16},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 778, 11, 11, 11, 11, 11, 11, 11, 11, 11, 86: 11, 159: 11},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 774, 17, 17, 17, 17, 17, 17, 17, 17, 17, 86: 17, 159: 17},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 767, 14, 14, 14, 14, 14, 14, 14, 14, 14, 86: 14, 159: 14},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 754, 10, 10, 10, 10, 10, 10, 10, 10, 10, 86: 10, 159: 10},
		// 160
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 734, 7, 7, 7, 7, 7, 7, 7, 7, 7, 86: 7, 159: 7},
		{183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 183, 33: 183, 183, 183, 183, 183, 183, 183, 183, 183},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 33: 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 36: 722, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 719, 448, 193: 721, 240: 720},
		{32: 527, 127: 526},
		// 165
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 33: 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 33: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 70: 111, 86: 111, 97: 111, 111, 119: 111, 111, 126: 111, 158: 111},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 33: 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{1: 388, 31: 85, 170: 387, 176: 386, 529, 180: 528},
		{718},
		// 170
		{31: 531, 233: 530},
		{14: 597, 182: 596},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 15: 534, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 533},
		{1: 209, 4: 209, 209, 209, 209, 9: 209, 32: 209, 42: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 71: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 85: 209, 87: 209, 92: 209, 209, 209, 209, 99: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 539, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 535, 448, 173: 538, 234: 537, 278: 536},
		// 175
		{14: 163},
		{155, 2: 155, 155, 7: 550, 155, 563, 155, 155, 155, 14: 155, 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 37: 155, 155, 40: 566, 251: 565, 564},
		{8: 544, 14: 164},
		{8: 162, 14: 162},
		{8: 160, 14: 160},
		// 180
		{7: 111, 111, 111, 14: 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 40: 111, 86: 111, 159: 540},
		{8: 157, 14: 157, 65: 542, 241: 541},
		{8: 159, 14: 159},
		{87: 476, 92: 478, 94: 477, 125: 543},
		{8: 156, 14: 156},
		// 185
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 539, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 535, 448, 173: 538, 234: 545},
		{8: 161, 14: 161},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 595, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 594, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 593, 448},
		// 190
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 592, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 591, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 590, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 589, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 588, 448},
		// 195
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 587, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 586, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 585, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 584, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 583, 448},
		// 200
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 582, 448},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 581, 448},
		{9: 579, 230: 578},
		{32: 571, 223: 577},
		{20: 569},
		// 205
		{158, 2: 158, 158, 8: 158, 10: 158, 158, 158, 14: 158, 37: 158, 158},
		{154, 2: 154, 154, 8: 154, 10: 154, 154, 154, 14: 154, 37: 154, 154},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 567, 393, 87: 568},
		{153, 2: 153, 153, 8: 153, 10: 153, 153, 153, 14: 153, 37: 153, 153},
		{152, 2: 152, 152, 8: 152, 10: 152, 152, 152, 14: 152, 37: 152, 152},
		// 210
		{32: 571, 223: 570},
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 33: 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 572, 448, 282: 573},
		{171, 7: 550, 171, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{574, 8: 575},
		// 215
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 33: 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 576, 448},
		{170, 7: 550, 170, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 33: 174, 174, 174, 174, 174, 174, 174, 174, 174},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 33: 197, 197, 197, 197, 197, 197, 197, 197, 197},
		// 220
		{230: 580},
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 33: 196, 196, 196, 196, 196, 196, 196, 196, 196},
		{243, 243, 243, 243, 243, 243, 243, 550, 243, 563, 243, 243, 243, 243, 243, 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 243, 243, 558, 243, 33: 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{245, 245, 245, 245, 245, 245, 245, 550, 245, 563, 245, 245, 245, 245, 245, 546, 549, 561, 245, 551, 562, 548, 547, 554, 553, 555, 556, 552, 245, 245, 245, 245, 33: 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{246, 246, 246, 246, 246, 246, 246, 550, 246, 563, 246, 246, 246, 246, 246, 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 246, 246, 246, 246, 33: 246, 246, 246, 246, 246, 246, 246, 246, 246},
		// 225
		{247, 247, 247, 247, 247, 247, 247, 550, 247, 563, 247, 247, 247, 247, 247, 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 247, 247, 558, 247, 33: 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{248, 248, 248, 248, 248, 248, 248, 550, 248, 563, 248, 248, 248, 248, 248, 546, 549, 248, 248, 248, 248, 548, 547, 248, 248, 248, 248, 248, 248, 248, 248, 248, 33: 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{249, 249, 249, 249, 249, 249, 249, 550, 249, 563, 249, 249, 249, 249, 249, 546, 549, 249, 249, 249, 249, 548, 547, 249, 249, 249, 249, 249, 249, 249, 249, 249, 33: 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{250, 250, 250, 250, 250, 250, 250, 550, 250, 563, 250, 250, 250, 250, 250, 546, 549, 250, 250, 250, 250, 548, 547, 250, 250, 250, 250, 250, 250, 250, 250, 250, 33: 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{251, 251, 251, 251, 251, 251, 251, 550, 251, 563, 251, 251, 251, 251, 251, 546, 549, 251, 251, 251, 251, 548, 547, 251, 251, 251, 251, 251, 251, 251, 251, 251, 33: 251, 251, 251, 251, 251, 251, 251, 251, 251},
		// 230
		{252, 252, 252, 252, 252, 252, 252, 550, 252, 563, 252, 252, 252, 252, 252, 546, 549, 252, 252, 252, 252, 548, 547, 252, 252, 252, 252, 252, 252, 252, 252, 252, 33: 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{253, 253, 253, 253, 253, 253, 253, 550, 253, 563, 253, 253, 253, 253, 253, 546, 549, 253, 253, 253, 253, 548, 547, 253, 253, 253, 253, 253, 253, 253, 253, 253, 33: 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{254, 254, 254, 254, 254, 254, 254, 254, 254, 563, 254, 254, 254, 254, 254, 546, 254, 254, 254, 254, 254, 548, 547, 254, 254, 254, 254, 254, 254, 254, 254, 254, 33: 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{255, 255, 255, 255, 255, 255, 255, 255, 255, 563, 255, 255, 255, 255, 255, 546, 255, 255, 255, 255, 255, 548, 547, 255, 255, 255, 255, 255, 255, 255, 255, 255, 33: 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{256, 256, 256, 256, 256, 256, 256, 256, 256, 563, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 33: 256, 256, 256, 256, 256, 256, 256, 256, 256},
		// 235
		{257, 257, 257, 257, 257, 257, 257, 257, 257, 563, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 33: 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 563, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 33: 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{80, 2: 80, 80, 10: 80, 80, 80, 80, 70: 446, 172: 689},
		{228: 600, 599, 269: 598},
		{151, 2: 151, 151, 8: 687, 10: 151, 151, 151, 151, 70: 151},
		// 240
		{148, 2: 148, 148, 8: 148, 10: 148, 148, 148, 148, 70: 148},
		{32: 603, 46: 440, 439, 49: 441, 160: 442, 188: 602, 191: 438, 260: 601},
		{144, 2: 144, 144, 8: 144, 10: 144, 144, 144, 144, 70: 144, 161: 683, 258: 684, 682},
		{141, 2: 141, 141, 8: 141, 10: 141, 141, 141, 141, 70: 141, 161: 141},
		{110, 413, 4: 412, 395, 420, 17: 110, 32: 443, 43: 410, 409, 405, 607, 606, 403, 608, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 98: 110, 160: 442, 171: 610, 188: 605, 191: 438, 609, 271: 604},
		// 245
		{679, 8: 680},
		{139, 8: 139},
		{30, 17: 30, 32: 443, 43: 676, 675, 98: 30, 160: 627, 162: 674},
		{31, 17: 31, 32: 443, 43: 670, 669, 98: 31, 160: 627, 162: 671},
		{27, 17: 27, 85: 623, 98: 27},
		// 250
		{622},
		{105, 17: 616, 97: 105, 615, 119: 105, 195: 613, 199: 614, 267: 612},
		{109, 2: 109, 109, 8: 109, 10: 109, 109, 109, 109, 109, 17: 109, 42: 109, 70: 109, 97: 109, 109, 119: 109, 109, 126: 109},
		{112, 97: 112, 119: 112},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 619, 393, 175: 618, 224: 617},
		// 255
		{104, 97: 104, 119: 104},
		{1: 103, 4: 103, 103, 103, 43: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 71: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		{1: 102, 4: 102, 102, 102, 43: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 71: 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102},
		{106, 15: 106, 106, 89: 106, 106, 106, 96: 106, 106, 119: 106, 124: 620},
		{101, 15: 101, 101, 89: 101, 101, 101, 96: 101, 101, 119: 101, 124: 101},
		// 260
		{47, 2: 47, 47, 15: 47, 47, 89: 47, 47, 47, 96: 47, 47, 119: 47, 124: 47},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 619, 393, 175: 621},
		{100, 15: 100, 100, 89: 100, 100, 100, 96: 100, 100, 119: 100, 124: 100},
		{121, 121, 121, 121, 121, 7: 121, 121, 10: 121, 121, 121, 121, 31: 121, 121, 121, 121, 121, 70: 121, 161: 121, 163: 121, 121, 121, 121, 178: 121, 121},
		{43: 625, 624},
		// 265
		{32: 443, 160: 627, 162: 668},
		{32: 443, 160: 627, 162: 626},
		{130, 130, 130, 130, 8: 130, 10: 130, 130, 130, 130, 31: 130, 33: 130, 130, 130, 70: 130, 161: 130},
		{7: 633, 32: 635, 163: 631, 629, 632, 630, 196: 634, 275: 628},
		{32: 443, 160: 667},
		// 270
		{1: 413, 4: 412, 395, 420, 17: 110, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 97: 110, 110, 119: 110, 171: 610, 192: 664},
		{117, 4: 117, 15: 117, 117, 32: 117, 70: 117, 89: 117, 91: 117},
		{1: 413, 4: 412, 395, 420, 17: 110, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 97: 110, 110, 171: 610, 192: 662},
		{115, 4: 115, 15: 115, 115, 32: 115, 70: 115, 89: 115, 91: 115},
		{113, 4: 113, 15: 113, 113, 32: 113, 70: 113, 89: 113, 91: 113},
		// 275
		{15: 647, 648, 32: 87, 89: 649, 91: 650, 189: 651, 661},
		{7: 120, 32: 443, 160: 636, 163: 120, 120, 120, 120, 239: 637},
		{119, 4: 119, 7: 119, 70: 119, 163: 119, 119, 119, 119},
		{7: 633, 163: 631, 629, 632, 630, 196: 638},
		{120, 4: 120, 32: 443, 70: 120, 160: 636, 239: 639},
		// 280
		{80, 4: 80, 70: 446, 172: 640},
		{96, 4: 642, 243: 643, 641},
		{645},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 644, 448},
		{95},
		// 285
		{97, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{15: 647, 648, 32: 87, 89: 649, 91: 650, 189: 651, 646},
		{32: 98},
		{32: 94, 90: 94, 96: 94},
		{32: 93, 90: 93, 96: 93},
		// 290
		{32: 92, 90: 92, 96: 92},
		{8: 653, 85: 652},
		{32: 86, 90: 86, 96: 86},
		{8: 657, 181: 656},
		{85: 654},
		// 295
		{181: 655},
		{32: 88, 90: 88, 96: 88},
		{32: 91, 90: 91, 96: 91},
		{85: 659, 181: 658},
		{32: 90, 90: 90, 96: 90},
		// 300
		{181: 660},
		{32: 89, 90: 89, 96: 89},
		{32: 99},
		{97: 663},
		{116, 4: 116, 15: 116, 116, 32: 116, 70: 116, 89: 116, 91: 116},
		// 305
		{97: 666, 119: 665},
		{118, 4: 118, 15: 118, 118, 32: 118, 70: 118, 89: 118, 91: 118},
		{114, 4: 114, 15: 114, 114, 32: 114, 70: 114, 89: 114, 91: 114},
		{125, 125, 125, 125, 8: 125, 10: 125, 125, 125, 125, 31: 125, 33: 125, 125, 125, 70: 125, 161: 125},
		{133, 133, 133, 133, 8: 133, 10: 133, 133, 133, 133, 31: 133, 33: 133, 133, 133, 70: 133, 161: 133},
		// 310
		{32: 443, 160: 627, 162: 673},
		{32: 443, 160: 627, 162: 672},
		{129, 129, 129, 129, 8: 129, 10: 129, 129, 129, 129, 31: 129, 33: 129, 129, 129, 70: 129, 161: 129},
		{131, 131, 131, 131, 8: 131, 10: 131, 131, 131, 131, 31: 131, 33: 131, 131, 131, 70: 131, 161: 131},
		{134, 134, 134, 134, 8: 134, 10: 134, 134, 134, 134, 31: 134, 33: 134, 134, 134, 70: 134, 161: 134},
		// 315
		{136, 136, 136, 136, 8: 136, 10: 136, 136, 136, 136, 31: 136, 33: 136, 136, 136, 70: 136, 161: 136},
		{32: 443, 160: 627, 162: 678},
		{32: 443, 160: 627, 162: 677},
		{132, 132, 132, 132, 8: 132, 10: 132, 132, 132, 132, 31: 132, 33: 132, 132, 132, 70: 132, 161: 132},
		{135, 135, 135, 135, 8: 135, 10: 135, 135, 135, 135, 31: 135, 33: 135, 135, 135, 70: 135, 161: 135},
		// 320
		{140, 2: 140, 140, 8: 140, 10: 140, 140, 140, 140, 70: 140, 161: 140},
		{32: 443, 46: 440, 439, 49: 441, 160: 442, 188: 681, 191: 438},
		{138, 8: 138},
		{142, 2: 142, 142, 8: 142, 10: 142, 142, 142, 142, 70: 142, 277: 686},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 391, 393, 174: 685},
		// 325
		{143, 2: 143, 143, 8: 143, 10: 143, 143, 143, 143, 70: 143},
		{145, 2: 145, 145, 8: 145, 10: 145, 145, 145, 145, 70: 145},
		{146, 2: 146, 146, 8: 146, 10: 146, 146, 146, 146, 70: 146},
		{228: 600, 688},
		{147, 2: 147, 147, 8: 147, 10: 147, 147, 147, 147, 70: 147},
		// 330
		{78, 2: 78, 78, 10: 78, 78, 78, 691, 183: 690},
		{70, 2: 70, 70, 10: 70, 70, 702, 184: 701},
		{205: 692},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 535, 448, 173: 695, 194: 694, 206: 693},
		{77, 2: 77, 77, 8: 699, 10: 77, 77, 77},
		// 335
		{76, 2: 76, 76, 8: 76, 10: 76, 76, 76},
		{74, 2: 74, 74, 8: 74, 10: 74, 74, 74, 37: 697, 698, 270: 696},
		{73, 2: 73, 73, 8: 73, 10: 73, 73, 73},
		{72, 2: 72, 72, 8: 72, 10: 72, 72, 72},
		{71, 2: 71, 71, 8: 71, 10: 71, 71, 71},
		// 340
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 535, 448, 173: 695, 194: 700},
		{75, 2: 75, 75, 8: 75, 10: 75, 75, 75},
		{68, 2: 68, 68, 10: 68, 705, 187: 704},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 703, 448},
		{69, 2: 69, 69, 7: 550, 9: 563, 69, 69, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		// 345
		{66, 2: 66, 66, 10: 709, 186: 708},
		{205: 706},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 535, 448, 173: 695, 194: 694, 206: 707},
		{67, 2: 67, 67, 8: 699, 10: 67},
		{165, 2: 165, 165},
		// 350
		{85: 713, 89: 712, 200: 711, 710},
		{65, 2: 65, 65, 8: 714, 45: 715},
		{62, 2: 62, 62, 8: 62, 45: 62},
		{61, 2: 61, 61, 8: 61, 45: 61},
		{60, 2: 60, 60, 8: 60, 45: 60},
		// 355
		{85: 713, 89: 712, 200: 711, 717},
		{85: 713, 89: 712, 200: 711, 716},
		{63, 2: 63, 63},
		{64, 2: 64, 64},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 33: 168, 168, 168, 168, 168, 168, 168, 168, 168},
		// 360
		{7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 36: 722, 193: 721, 240: 731},
		{5: 176, 36: 722, 39: 728, 193: 727, 217: 726},
		{5: 179, 36: 179, 39: 179},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 723, 448},
		{7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 41: 724},
		// 365
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 725, 448},
		{5: 177, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 36: 177, 39: 177},
		{5: 730},
		{5: 178, 36: 178, 39: 178},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 729, 448},
		// 370
		{5: 175, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 33: 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{5: 176, 36: 722, 39: 728, 193: 727, 217: 732},
		{5: 733},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 33: 181, 181, 181, 181, 181, 181, 181, 181, 181},
		// 375
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 735, 448},
		{7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 40: 736},
		{48: 745, 63: 739, 744, 66: 738, 746, 245: 737, 247: 743, 742, 253: 741, 263: 740},
		{753},
		{194},
		// 380
		{193},
		{192},
		{191},
		{190},
		{189},
		// 385
		{188},
		{187, 60: 750},
		{185, 60: 747},
		{48: 748},
		{62: 749},
		// 390
		{184},
		{48: 751},
		{62: 752},
		{186},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 33: 195, 195, 195, 195, 195, 195, 195, 195, 195},
		// 395
		{52: 758, 55: 759, 760, 757, 59: 761, 61: 756, 68: 762, 763, 250: 755},
		{14: 764},
		{14: 205},
		{14: 204},
		{14: 203},
		// 400
		{14: 202},
		{14: 201},
		{14: 200},
		{14: 199},
		{14: 198},
		// 405
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 765, 448},
		{766, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 33: 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 768},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 769, 448},
		// 410
		{208, 7: 550, 771, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558, 268: 770},
		{773},
		{87: 476, 92: 478, 94: 477, 125: 772},
		{207},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 33: 211, 211, 211, 211, 211, 211, 211, 211, 211},
		// 415
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 775},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 776, 448},
		{777, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 33: 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 779},
		// 420
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 780, 448},
		{781, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 33: 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 783},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 784, 448},
		// 425
		{785, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 33: 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 787},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 788, 448},
		{789, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		// 430
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 33: 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 791},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 792, 448},
		{793, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 33: 216, 216, 216, 216, 216, 216, 216, 216, 216},
		// 435
		{1: 210, 4: 210, 210, 210, 210, 9: 210, 15: 795, 32: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 71: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 85: 210, 87: 210, 92: 210, 210, 210, 210, 99: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 167: 532, 796},
		{799},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 797, 448},
		{798, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 33: 217, 217, 217, 217, 217, 217, 217, 217, 217},
		// 440
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 33: 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 801, 448},
		{7: 550, 9: 563, 14: 802, 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 803, 448, 279: 804},
		{221, 6: 221, 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		// 445
		{220, 6: 806, 254: 805},
		{808},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 807, 448},
		{219, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 33: 222, 222, 222, 222, 222, 222, 222, 222, 222},
		// 450
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 810, 448, 242: 811},
		{224, 7: 550, 224, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{812, 8: 813},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 33: 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 814, 448},
		// 455
		{223, 7: 550, 223, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{817, 7: 550, 9: 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		{25, 413, 4: 412, 395, 420, 25, 9: 25, 15: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 436, 393, 86: 25},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 33: 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{244, 244, 244, 244, 244, 244, 244, 244, 244, 563, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 33: 244, 244, 244, 244, 244, 244, 244, 244, 244},
		// 460
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 563, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 33: 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{52: 824, 55: 825, 826, 823, 59: 827, 61: 822, 246: 821},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 33: 267, 267, 267, 267, 267, 267, 267, 267, 267},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 33: 266, 266, 266, 266, 266, 266, 266, 266, 266},
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 33: 265, 265, 265, 265, 265, 265, 265, 265, 265},
		// 465
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 33: 264, 264, 264, 264, 264, 264, 264, 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 33: 263, 263, 263, 263, 263, 263, 263, 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 33: 262, 262, 262, 262, 262, 262, 262, 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 33: 261, 261, 261, 261, 261, 261, 261, 261, 261},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 33: 268, 268, 268, 268, 268, 268, 268, 268, 268},
		// 470
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 33: 269, 269, 269, 269, 269, 269, 269, 269, 269},
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 33: 270, 270, 270, 270, 270, 270, 270, 270, 270},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 833, 393, 203: 832},
		{308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 33: 308, 308, 308, 308, 308, 308, 308, 308, 308},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 33: 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 475
		{32: 443, 160: 846},
		{32: 443, 160: 845},
		{17: 616, 98: 615, 195: 613, 199: 841},
		{17: 616, 98: 615, 195: 613, 199: 838},
		{15: 647, 648, 89: 649, 87, 650, 189: 651, 839},
		// 480
		{90: 840},
		{32: 123},
		{15: 647, 648, 89: 649, 87, 650, 96: 87, 189: 651, 842},
		{90: 844, 96: 843},
		{32: 124},
		// 485
		{32: 122},
		{126, 126, 126, 126, 7: 126, 126, 10: 126, 126, 126, 126, 31: 126, 33: 126, 126, 126, 70: 126, 161: 126, 163: 126, 126, 126, 126, 178: 126, 126},
		{127, 127, 127, 127, 7: 127, 127, 10: 127, 127, 127, 127, 31: 127, 33: 127, 127, 127, 70: 127, 161: 127, 163: 127, 127, 127, 127, 178: 127, 127},
		{1: 82, 31: 82, 33: 82, 82, 82},
		{2: 327, 327},
		// 490
		{1: 54, 4: 54, 54, 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 71: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 169: 853, 197: 858},
		{1: 54, 4: 54, 54, 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 71: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 169: 853, 197: 856},
		{1: 54, 4: 54, 54, 54, 43: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 71: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 169: 853, 197: 852},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 855, 393},
		{93: 854},
		// 495
		{1: 53, 4: 53, 53, 53, 43: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 71: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{2: 328, 328},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 619, 393, 175: 857},
		{2: 329, 329},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 391, 393, 174: 859},
		// 500
		{2: 330, 330},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 923, 283: 922},
		{121: 325, 123: 325, 264: 887, 886, 885},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 865, 221: 864, 257: 863},
		{8: 878, 14: 597, 182: 877},
		// 505
		{8: 58, 14: 58},
		{158: 866},
		{32: 867},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 871, 122: 870, 202: 868, 231: 869},
		{311, 8: 311},
		// 510
		{875, 8: 874},
		{19: 872},
		{86: 831},
		{1: 413, 4: 412, 395, 420, 489, 9: 491, 32: 492, 42: 503, 410, 409, 405, 407, 408, 485, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 484, 435, 432, 486, 429, 430, 71: 516, 514, 519, 511, 518, 392, 487, 517, 513, 512, 510, 515, 525, 393, 479, 87: 476, 447, 92: 478, 523, 477, 502, 99: 488, 497, 509, 522, 498, 499, 480, 506, 482, 481, 500, 504, 501, 507, 496, 494, 505, 508, 483, 495, 122: 449, 125: 469, 127: 524, 459, 452, 451, 471, 456, 464, 463, 458, 472, 467, 460, 457, 493, 465, 475, 462, 461, 450, 454, 466, 470, 453, 468, 521, 520, 455, 473, 474, 873, 448},
		{309, 7: 550, 309, 563, 15: 546, 549, 561, 559, 551, 562, 548, 547, 554, 553, 555, 556, 552, 557, 560, 558},
		// 515
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 871, 122: 870, 202: 876},
		{8: 56, 14: 56},
		{310, 8: 310},
		{2: 80, 80, 10: 80, 80, 80, 80, 70: 446, 172: 880},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 865, 221: 879},
		// 520
		{8: 57, 14: 57},
		{2: 78, 78, 10: 78, 78, 78, 691, 183: 881},
		{2: 70, 70, 10: 70, 70, 702, 184: 882},
		{2: 68, 68, 10: 68, 705, 187: 883},
		{2: 66, 66, 10: 709, 186: 884},
		// 525
		{2: 59, 59},
		{121: 892, 123: 891, 220: 890, 256: 889},
		{121: 324, 123: 324},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 391, 393, 174: 888},
		{121: 323, 123: 323},
		// 530
		{2: 150, 150, 8: 914, 10: 150, 150, 150, 150, 597, 70: 150, 182: 915, 255: 913},
		{2: 322, 322, 8: 322, 10: 322, 322, 322, 322, 322, 70: 322},
		{1: 413, 110, 110, 412, 395, 420, 8: 110, 10: 110, 110, 110, 110, 110, 42: 110, 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 110, 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 120: 110, 171: 911},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 611, 126: 110, 171: 893},
		{126: 894},
		// 535
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 895},
		{18: 896},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 897},
		{2: 317, 317, 8: 317, 10: 317, 317, 317, 317, 317, 42: 901, 70: 317, 120: 317, 225: 898, 900, 899},
		{2: 319, 319, 8: 319, 10: 319, 319, 319, 319, 319, 70: 319},
		// 540
		{2: 314, 314, 8: 314, 10: 314, 314, 314, 314, 314, 70: 314, 120: 907, 272: 906, 905},
		{2: 316, 316, 8: 316, 10: 316, 316, 316, 316, 316, 70: 316, 120: 316},
		{32: 902},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 619, 393, 175: 618, 224: 903},
		{904, 124: 620},
		// 545
		{2: 315, 315, 8: 315, 10: 315, 315, 315, 315, 315, 70: 315, 120: 315},
		{2: 318, 318, 8: 318, 10: 318, 318, 318, 318, 318, 70: 318},
		{2: 313, 313, 8: 313, 10: 313, 313, 313, 313, 313, 70: 313},
		{32: 908},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 871, 122: 870, 202: 868, 231: 909},
		// 550
		{910, 8: 874},
		{2: 312, 312, 8: 312, 10: 312, 312, 312, 312, 312, 70: 312},
		{2: 317, 317, 8: 317, 10: 317, 317, 317, 317, 317, 42: 901, 70: 317, 120: 317, 225: 912, 900, 899},
		{2: 320, 320, 8: 320, 10: 320, 320, 320, 320, 320, 70: 320},
		{2: 80, 80, 10: 80, 80, 80, 80, 70: 446, 172: 917},
		// 555
		{121: 892, 123: 891, 220: 916},
		{2: 149, 149, 10: 149, 149, 149, 149, 70: 149},
		{2: 321, 321, 8: 321, 10: 321, 321, 321, 321, 321, 70: 321},
		{2: 78, 78, 10: 78, 78, 78, 691, 183: 918},
		{2: 70, 70, 10: 70, 70, 702, 184: 919},
		// 560
		{2: 68, 68, 10: 68, 705, 187: 920},
		{2: 66, 66, 10: 709, 186: 921},
		{2: 326, 326},
		{8: 925, 14: 597, 182: 924},
		{8: 108, 14: 108},
		// 565
		{2: 80, 80, 10: 80, 80, 80, 80, 70: 446, 172: 927},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 525, 393, 88: 926},
		{8: 107, 14: 107},
		{2: 78, 78, 10: 78, 78, 78, 691, 183: 928},
		{2: 70, 70, 10: 70, 70, 702, 184: 929},
		// 570
		{2: 68, 68, 10: 68, 705, 187: 930},
		{2: 66, 66, 10: 709, 186: 931},
		{2: 331, 331},
		{1: 52, 4: 52, 52, 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 71: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 169: 938, 198: 951},
		{1: 52, 4: 52, 52, 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 71: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 169: 938, 198: 949},
		// 575
		{185: 936},
		{185: 332},
		{1: 52, 4: 52, 52, 52, 43: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 71: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 169: 938, 198: 937},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 942, 393, 262: 941},
		{9: 939},
		// 580
		{93: 940},
		{1: 51, 4: 51, 51, 51, 43: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 71: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{32: 943},
		{32: 48},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 833, 393, 203: 945, 274: 944},
		// 585
		{946, 8: 947},
		{2, 8: 2},
		{2: 334, 334},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 833, 393, 203: 948},
		{1, 8: 1},
		// 590
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 619, 393, 175: 950},
		{2: 335, 335},
		{1: 413, 4: 412, 395, 420, 43: 410, 409, 405, 407, 408, 403, 411, 394, 396, 401, 398, 406, 415, 416, 417, 404, 418, 433, 399, 434, 397, 400, 435, 432, 402, 429, 430, 71: 421, 422, 431, 423, 428, 392, 414, 424, 425, 426, 419, 427, 391, 393, 174: 952},
		{2: 336, 336},
		{1: 388, 339, 339, 31: 85, 33: 85, 85, 85, 50: 379, 380, 53: 384, 58: 385, 170: 387, 176: 386, 382, 180: 376, 204: 364, 207: 365, 381, 366, 368, 367, 369, 383, 370, 372, 371, 218: 363, 373, 222: 374, 232: 375, 235: 954, 377, 389, 378},
		// 595
		{2: 356, 356},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 296

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 20:
		{
			parser.yyVAL.statement = nil
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 23:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 24:
		{
			cl := &ast.CreateLabelStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Label:       yyS[yypt-0].item.(model.CIStr),
			}
			parser.yyVAL.statement = cl
		}
	case 25:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-6].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-4].item.(bool),
				IndexName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 26:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 27:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 28:
		{
			ds := &ast.DeleteStmt{
				VariableNames: yyS[yypt-6].item.([]model.CIStr),
				From:          yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 29:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 30:
		{
			parser.yyVAL.statement = &ast.DropLabelStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Label:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 31:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-1].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-0].ident),
			}
		}
	case 32:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 33:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-5].item != nil {
				is.From = yyS[yypt-5].item.(*ast.MatchClauseList)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 34:
		{
			parser.yyVAL.item = nil
		}
	case 36:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 37:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 38:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 39:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 40:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].item.(model.CIStr),
				To:                  yyS[yypt-1].item.(model.CIStr),
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 41:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 42:
		{
			parser.yyVAL.item = nil
		}
	case 44:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 45:
		{
			parser.yyVAL.item = nil
		}
	case 47:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 48:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 49:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 50:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 51:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].item.(model.CIStr),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 73:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 81:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 82:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 83:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 84:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 85:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 86:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 87:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 88:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 89:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 90:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 91:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 92:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 93:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 94:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 95:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 96:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 97:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 98:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 99:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 100:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 101:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 102:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 103:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 104:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 105:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 106:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 107:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 108:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 109:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 110:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 111:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 112:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 115:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 135:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 136:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 137:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 139:
		{
			parser.yyVAL.expr = nil
		}
	case 140:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 141:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 142:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 143:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 144:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 145:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 146:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 147:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 148:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 149:
		{
			parser.yyVAL.item = false
		}
	case 150:
		{
			parser.yyVAL.item = true
		}
	case 151:
		{
			parser.yyVAL.expr = nil
		}
	case 152:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 153:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 154:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 155:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 156:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 157:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 158:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 159:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 160:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 161:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 162:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 163:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 164:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(types.DataType),
			}
		}
	case 165:
		{
			parser.yyVAL.item = types.DataTypeString
		}
	case 166:
		{
			parser.yyVAL.item = types.DataTypeBoolean
		}
	case 167:
		{
			parser.yyVAL.item = types.DataTypeInteger
		}
	case 168:
		{
			parser.yyVAL.item = types.DataTypeFloat
		}
	case 169:
		{
			parser.yyVAL.item = types.DataTypeDouble
		}
	case 170:
		{
			parser.yyVAL.item = types.DataTypeDecimal
		}
	case 171:
		{
			parser.yyVAL.item = types.DataTypeDate
		}
	case 172:
		{
			parser.yyVAL.item = types.DataTypeTime
		}
	case 173:
		{
			parser.yyVAL.item = types.DataTypeTimeWithZone
		}
	case 174:
		{
			parser.yyVAL.item = types.DataTypeTimestamp
		}
	case 175:
		{
			parser.yyVAL.item = types.DataTypeTimestampWithZone
		}
	case 178:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 179:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 180:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 181:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 182:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 183:
		{
			parser.yyVAL.expr = nil
		}
	case 184:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 185:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 186:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 187:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 188:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 189:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 190:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 191:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 194:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 195:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 196:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 197:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 198:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 199:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 200:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 201:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 202:
		{
			parser.yyVAL.item = ""
		}
	case 203:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 204:
		{
			parser.yyVAL.item = nil
		}
	case 205:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 206:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 207:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 208:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 209:
		{
			parser.yyVAL.item = nil
		}
	case 210:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 211:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 212:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 213:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 214:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 215:
		{
			parser.yyVAL.item = nil
		}
	case 218:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 219:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 220:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 221:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 222:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 223:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 224:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 225:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 226:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 227:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 228:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 229:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 230:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 231:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 232:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 233:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 234:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 235:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 236:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 237:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 238:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 239:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 241:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 242:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 243:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 244:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 245:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 246:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 247:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 248:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 249:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 251:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 252:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 253:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 254:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 258:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 259:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 260:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 261:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 262:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 263:
		{
			parser.yyVAL.item = nil
		}
	case 265:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 266:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 267:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 268:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 269:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 270:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 271:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 272:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 274:
		{
			parser.yyVAL.item = nil
		}
	case 276:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 277:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 278:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 279:
		{
			parser.yyVAL.item = nil
		}
	case 280:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 281:
		{
			parser.yyVAL.item = nil
		}
	case 282:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 283:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 284:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 285:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 286:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 287:
		{
			parser.yyVAL.item = false
		}
	case 288:
		{
			parser.yyVAL.item = true
		}
	case 289:
		{
			parser.yyVAL.item = nil
		}
	case 290:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 291:
		{
			parser.yyVAL.item = nil
		}
	case 292:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 293:
		{
			parser.yyVAL.item = nil
		}
	case 294:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 295:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 296:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 298:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 299:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 300:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 301:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 302:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 303:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].item.(model.CIStr),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 304:
		{
			parser.yyVAL.statement = &ast.UseStmt{
				GraphName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 305:
		{
			parser.yyVAL.item = false
		}
	case 306:
		{
			parser.yyVAL.item = true
		}
	case 307:
		{
			parser.yyVAL.item = false
		}
	case 308:
		{
			parser.yyVAL.item = true
		}
	case 309:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 310:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 311:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 312:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 357:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 358:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
