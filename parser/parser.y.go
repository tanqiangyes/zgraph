// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57492
	yyEOFCode          = 57344
	abs                = 57453
	all                = 57416
	allDifferent       = 57460
	allProp            = 57475
	and                = 57392
	andand             = 57351
	andnot             = 57466
	any                = 57417
	arrayAgg           = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57467
	avg                = 57431
	begin              = 57402
	between            = 57393
	bitLit             = 57465
	booleanType        = 57406
	by                 = 57355
	caseKwd            = 57396
	cast               = 57440
	ceil               = 57454
	ceiling            = 57455
	cheapest           = 57419
	comment            = 57404
	commit             = 57405
	cost               = 57421
	count              = 57432
	create             = 57356
	dateType           = 57409
	day                = 57410
	decLit             = 57462
	defaultKwd         = 57357
	deleteKwd          = 57358
	desc               = 57359
	distinct           = 57401
	div                = 57489
	doubleAtIdentifier = 57349
	doubleType         = 57360
	drop               = 57361
	edge               = 57362
	edgeIncomingLeft   = 57480
	edgeIncomingRight  = 57481
	edgeOutgoingLeft   = 57478
	edgeOutgoingRight  = 57479
	elementNumber      = 57456
	elseKwd            = 57399
	empty              = 57486
	end                = 57403
	eq                 = 57468
	yyErrCode          = 57345
	exists             = 57363
	explain            = 57407
	extract            = 57437
	falseKwd           = 57364
	floatLit           = 57461
	floatType          = 57365
	floor              = 57457
	forkKwd            = 57429
	from               = 57366
	ge                 = 57469
	graph              = 57415
	group              = 57367
	hasLabel           = 57458
	having             = 57368
	hexLit             = 57464
	hour               = 57424
	id                 = 57459
	identifier         = 57346
	ifKwd              = 57369
	in                 = 57400
	inDegree           = 57448
	index              = 57370
	insert             = 57371
	intLit             = 57463
	intType            = 57374
	integerType        = 57372
	interval           = 57423
	into               = 57373
	invalid            = 57350
	is                 = 57375
	javaRegexpLike     = 57449
	label              = 57450
	labels             = 57394
	le                 = 57470
	leftArrow          = 57476
	limit              = 57376
	listagg            = 57433
	long               = 57441
	lower              = 57446
	lowerThanOn        = 57487
	match              = 57377
	matchNumber        = 57451
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57490
	month              = 57426
	neg                = 57491
	neq                = 57471
	neqSynonym         = 57472
	not                = 57378
	null               = 57379
	nulleq             = 57473
	offset             = 57414
	on                 = 57380
	or                 = 57391
	order              = 57381
	outDegree          = 57452
	paramMarker        = 57474
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57488
	prefix             = 57445
	properties         = 57395
	reachIncomingLeft  = 57484
	reachIncomingRight = 57485
	reachOutgoingLeft  = 57482
	reachOutgoingRight = 57483
	rightArrow         = 57477
	rollback           = 57413
	second             = 57427
	selectKwd          = 57382
	set                = 57383
	shortest           = 57418
	singleAtIdentifier = 57348
	stringKwd          = 57442
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57397
	timeType           = 57412
	timestampType      = 57411
	timezoneHour       = 57438
	timezoneMinute     = 57439
	top                = 57420
	trueKwd            = 57384
	unique             = 57385
	update             = 57386
	uppper             = 57447
	use                = 57387
	vertex             = 57388
	when               = 57398
	where              = 57389
	with               = 57443
	xor                = 57390
	yearType           = 57408
	zone               = 57444

	yyMaxDepth = 200
	yyTabOfs   = -373
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (292x)
		57422: 1,   // path (277x)
		57344: 2,   // $end (273x)
		59:    3,   // ';' (272x)
		44:    4,   // ',' (269x)
		57421: 5,   // cost (265x)
		57403: 6,   // end (261x)
		57378: 7,   // not (258x)
		57429: 8,   // forkKwd (255x)
		45:    9,   // '-' (245x)
		57376: 10,  // limit (212x)
		57381: 11,  // order (207x)
		57368: 12,  // having (202x)
		57366: 13,  // from (199x)
		42:    14,  // '*' (196x)
		43:    15,  // '+' (194x)
		57375: 16,  // is (191x)
		57367: 17,  // group (186x)
		57392: 18,  // and (181x)
		57468: 19,  // eq (181x)
		57400: 20,  // in (181x)
		37:    21,  // '%' (180x)
		47:    22,  // '/' (180x)
		60:    23,  // '<' (180x)
		62:    24,  // '>' (180x)
		57469: 25,  // ge (180x)
		57470: 26,  // le (180x)
		57472: 27,  // neqSynonym (180x)
		57391: 28,  // or (180x)
		57352: 29,  // pipes (180x)
		57390: 30,  // xor (180x)
		40:    31,  // '(' (179x)
		57382: 32,  // selectKwd (179x)
		57358: 33,  // deleteKwd (175x)
		57371: 34,  // insert (175x)
		57386: 35,  // update (175x)
		57398: 36,  // when (159x)
		57354: 37,  // asc (158x)
		57359: 38,  // desc (158x)
		57399: 39,  // elseKwd (157x)
		57353: 40,  // as (156x)
		57397: 41,  // then (153x)
		57412: 42,  // timeType (152x)
		57409: 43,  // dateType (150x)
		57411: 44,  // timestampType (150x)
		57406: 45,  // booleanType (149x)
		57441: 46,  // long (149x)
		57442: 47,  // stringKwd (149x)
		57419: 48,  // cheapest (106x)
		57394: 49,  // labels (106x)
		57418: 50,  // shortest (106x)
		57414: 51,  // offset (105x)
		57416: 52,  // all (104x)
		57417: 53,  // any (104x)
		57420: 54,  // top (104x)
		57402: 55,  // begin (103x)
		57405: 56,  // commit (103x)
		57410: 57,  // day (103x)
		57407: 58,  // explain (103x)
		57415: 59,  // graph (103x)
		57424: 60,  // hour (103x)
		57425: 61,  // minute (103x)
		57426: 62,  // month (103x)
		57413: 63,  // rollback (103x)
		57427: 64,  // second (103x)
		57443: 65,  // with (103x)
		57408: 66,  // yearType (103x)
		57444: 67,  // zone (103x)
		57423: 68,  // interval (102x)
		57445: 69,  // prefix (102x)
		57438: 70,  // timezoneHour (102x)
		57439: 71,  // timezoneMinute (102x)
		57430: 72,  // arrayAgg (101x)
		57431: 73,  // avg (101x)
		57440: 74,  // cast (101x)
		57432: 75,  // count (101x)
		57437: 76,  // extract (101x)
		57346: 77,  // identifier (101x)
		57433: 78,  // listagg (101x)
		57434: 79,  // max (101x)
		57435: 80,  // min (101x)
		57428: 81,  // substring (101x)
		57436: 82,  // sum (101x)
		57389: 83,  // where (84x)
		57546: 84,  // Identifier (83x)
		57619: 85,  // UnReservedKeyword (83x)
		57347: 86,  // stringLit (69x)
		57380: 87,  // on (66x)
		57463: 88,  // intLit (65x)
		46:    89,  // '.' (64x)
		57474: 90,  // paramMarker (62x)
		57625: 91,  // VariableName (62x)
		57485: 92,  // reachIncomingRight (61x)
		123:   93,  // '{' (59x)
		57465: 94,  // bitLit (59x)
		57464: 95,  // hexLit (59x)
		57483: 96,  // reachOutgoingRight (59x)
		57481: 97,  // edgeIncomingRight (58x)
		57363: 98,  // exists (58x)
		57450: 99,  // label (58x)
		58:    100, // ':' (57x)
		57462: 101, // decLit (57x)
		57364: 102, // falseKwd (57x)
		57461: 103, // floatLit (57x)
		57384: 104, // trueKwd (57x)
		63:    105, // '?' (56x)
		57453: 106, // abs (56x)
		57460: 107, // allDifferent (56x)
		57396: 108, // caseKwd (56x)
		57454: 109, // ceil (56x)
		57455: 110, // ceiling (56x)
		57479: 111, // edgeOutgoingRight (56x)
		57456: 112, // elementNumber (56x)
		57457: 113, // floor (56x)
		57458: 114, // hasLabel (56x)
		57459: 115, // id (56x)
		57448: 116, // inDegree (56x)
		57449: 117, // javaRegexpLike (56x)
		57446: 118, // lower (56x)
		57451: 119, // matchNumber (56x)
		57452: 120, // outDegree (56x)
		57447: 121, // uppper (56x)
		57362: 122, // edge (53x)
		57395: 123, // properties (53x)
		57388: 124, // vertex (53x)
		124:   125, // '|' (50x)
		57590: 126, // PropertyAccess (50x)
		57615: 127, // StringLiteral (50x)
		57393: 128, // between (49x)
		57499: 129, // BooleanLiteral (48x)
		57514: 130, // DateLiteral (48x)
		57360: 131, // doubleType (48x)
		57365: 132, // floatType (48x)
		57372: 133, // integerType (48x)
		57554: 134, // IntervalLiteral (48x)
		57374: 135, // intType (48x)
		57573: 136, // Literal (48x)
		57379: 137, // null (48x)
		57578: 138, // NumericLiteral (48x)
		57616: 139, // Subquery (48x)
		57617: 140, // TimeLiteral (48x)
		57618: 141, // TimestampLiteral (48x)
		57493: 142, // Aggregation (47x)
		57496: 143, // ArithmeticExpression (47x)
		57498: 144, // BindVariable (47x)
		57500: 145, // BracketedValueExpression (47x)
		57503: 146, // CaseExpression (47x)
		57504: 147, // CastSpecification (47x)
		57505: 148, // CharacterSubstring (47x)
		57525: 149, // ExistsPredicate (47x)
		57529: 150, // ExtractFunction (47x)
		57534: 151, // FunctionInvocation (47x)
		57535: 152, // FunctionName (47x)
		57549: 153, // InPredicate (47x)
		57557: 154, // IsNotNullPredicate (47x)
		57558: 155, // IsNullPredicate (47x)
		57574: 156, // LogicalExpression (47x)
		57577: 157, // NotInPredicate (47x)
		57600: 158, // RelationalExpression (47x)
		57603: 159, // ScalarSubquery (47x)
		57604: 160, // SearchedCase (47x)
		57383: 161, // set (47x)
		57609: 162, // SimpleCase (47x)
		57614: 163, // StringConcat (47x)
		57622: 164, // ValueExpression (47x)
		57628: 165, // VariableReference (47x)
		57475: 166, // allProp (46x)
		57404: 167, // comment (45x)
		57357: 168, // defaultKwd (45x)
		57630: 169, // VertexPattern (19x)
		57624: 170, // VariableLengthPathPattern (10x)
		57480: 171, // edgeIncomingLeft (9x)
		57478: 172, // edgeOutgoingLeft (9x)
		57476: 173, // leftArrow (9x)
		57477: 174, // rightArrow (9x)
		57401: 175, // distinct (8x)
		57517: 176, // DistinctOpt (8x)
		57559: 177, // LabelName (7x)
		57369: 178, // ifKwd (6x)
		57583: 179, // PathPatternMacro (6x)
		57627: 180, // VariableNameOpt (6x)
		57634: 181, // WhereClauseOpt (6x)
		57526: 182, // ExpAsVar (5x)
		57540: 183, // GraphName (5x)
		57584: 184, // PathPatternMacroList (5x)
		57585: 185, // PathPatternMacroOpt (5x)
		57593: 186, // PropertyName (5x)
		57484: 187, // reachIncomingLeft (5x)
		57482: 188, // reachOutgoingLeft (5x)
		57608: 189, // SelectStmt (5x)
		125:   190, // '}' (4x)
		57533: 191, // FromClause (4x)
		57544: 192, // GroupByClauseOpt (4x)
		57545: 193, // HavingClauseOpt (4x)
		57370: 194, // index (4x)
		57570: 195, // LimitClauseOpt (4x)
		57580: 196, // OrderByClauseOpt (4x)
		57581: 197, // PathPattern (4x)
		57586: 198, // PatternQuantifier (4x)
		57587: 199, // PatternQuantifierOpt (4x)
		57610: 200, // SimplePathPattern (4x)
		57629: 201, // VariableSpec (4x)
		57632: 202, // WhenClause (4x)
		57501: 203, // ByItem (3x)
		57506: 204, // ColonOrIsKeyword (3x)
		57521: 205, // EdgePattern (3x)
		57536: 206, // GraphElementInsertion (3x)
		57547: 207, // IfExists (3x)
		57548: 208, // IfNotExists (3x)
		57561: 209, // LabelPredicate (3x)
		57569: 210, // LengthNum (3x)
		57571: 211, // LimitOption (3x)
		57591: 212, // PropertyAssignment (3x)
		57497: 213, // BeginStmt (2x)
		57355: 214, // by (2x)
		57502: 215, // ByList (2x)
		57507: 216, // CommitStmt (2x)
		57356: 217, // create (2x)
		57510: 218, // CreateGraphStmt (2x)
		57511: 219, // CreateIndexStmt (2x)
		57512: 220, // CreateLabelStmt (2x)
		57513: 221, // DataType (2x)
		57516: 222, // DeleteStmt (2x)
		57361: 223, // drop (2x)
		57518: 224, // DropGraphStmt (2x)
		57519: 225, // DropIndexStmt (2x)
		57520: 226, // DropLabelStmt (2x)
		57522: 227, // ElseClauseOpt (2x)
		57523: 228, // EmptyStmt (2x)
		57527: 229, // ExplainStmt (2x)
		57537: 230, // GraphElementInsertionList (2x)
		57538: 231, // GraphElementUpdate (2x)
		57553: 232, // InsertStmt (2x)
		57373: 233, // into (2x)
		57555: 234, // IntoClause (2x)
		57556: 235, // IntoClauseOpt (2x)
		57550: 236, // InValueList (2x)
		57560: 237, // LabelNameList (2x)
		57563: 238, // LabelPropertyDef (2x)
		57568: 239, // LabelsAndProperties (2x)
		57566: 240, // LabelSpecification (2x)
		57567: 241, // LabelSpecificationOpt (2x)
		57377: 242, // match (2x)
		57575: 243, // MatchClause (2x)
		57592: 244, // PropertyAssignmentList (2x)
		57595: 245, // PropertyOption (2x)
		57601: 246, // RollbackStmt (2x)
		57605: 247, // SelectClause (2x)
		57606: 248, // SelectEelement (2x)
		57612: 249, // Statement (2x)
		57620: 250, // UpdateStmt (2x)
		57387: 251, // use (2x)
		57621: 252, // UseStmt (2x)
		57631: 253, // VertexPatternOpt (2x)
		57633: 254, // WhenClauseList (2x)
		57494: 255, // AllPropertiesPrefixOpt (1x)
		57495: 256, // ArgumentList (1x)
		57508: 257, // CostClause (1x)
		57509: 258, // CostClauseOpt (1x)
		57515: 259, // DateTimeField (1x)
		57524: 260, // Entry (1x)
		57528: 261, // ExtractField (1x)
		57530: 262, // FieldAsName (1x)
		57531: 263, // FieldAsNameOpt (1x)
		57532: 264, // ForStringLengthOpt (1x)
		57539: 265, // GraphElementUpdateList (1x)
		57541: 266, // GraphOnClause (1x)
		57542: 267, // GraphOnClauseOpt (1x)
		57543: 268, // GraphPattern (1x)
		57551: 269, // IndexKeyTypeOpt (1x)
		57562: 270, // LabelPredicateOpt (1x)
		57564: 271, // LabelPropertyList (1x)
		57565: 272, // LabelPropertyListOpt (1x)
		57572: 273, // ListaggSeparatorOpt (1x)
		57576: 274, // MatchClauseList (1x)
		57579: 275, // Order (1x)
		57582: 276, // PathPatternList (1x)
		57588: 277, // PropertiesSpecification (1x)
		57589: 278, // PropertiesSpecificationOpt (1x)
		57594: 279, // PropertyNameList (1x)
		57596: 280, // PropertyOptionList (1x)
		57597: 281, // PropertyOptionListOpt (1x)
		57598: 282, // QuantifiedPathExpr (1x)
		57599: 283, // ReachabilityPathExpr (1x)
		57602: 284, // RowsPerMatchOpt (1x)
		57607: 285, // SelectElementList (1x)
		57611: 286, // StartPosition (1x)
		57613: 287, // StatementList (1x)
		57385: 288, // unique (1x)
		57623: 289, // ValueExpressionList (1x)
		57626: 290, // VariableNameList (1x)
		57492: 291, // $default (0x)
		38:    292, // '&' (0x)
		94:    293, // '^' (0x)
		126:   294, // '~' (0x)
		57351: 295, // andand (0x)
		57466: 296, // andnot (0x)
		57467: 297, // assignmentEq (0x)
		57489: 298, // div (0x)
		57349: 299, // doubleAtIdentifier (0x)
		57486: 300, // empty (0x)
		57345: 301, // error (0x)
		57552: 302, // IndexName (0x)
		57350: 303, // invalid (0x)
		57487: 304, // lowerThanOn (0x)
		57490: 305, // mod (0x)
		57491: 306, // neg (0x)
		57471: 307, // neq (0x)
		57473: 308, // nulleq (0x)
		57488: 309, // pipesAsOr (0x)
		57348: 310, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"','",
		"cost",
		"end",
		"not",
		"forkKwd",
		"'-'",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"is",
		"group",
		"and",
		"eq",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"'('",
		"selectKwd",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"then",
		"timeType",
		"dateType",
		"timestampType",
		"booleanType",
		"long",
		"stringKwd",
		"cheapest",
		"labels",
		"shortest",
		"offset",
		"all",
		"any",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"interval",
		"prefix",
		"timezoneHour",
		"timezoneMinute",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"where",
		"Identifier",
		"UnReservedKeyword",
		"stringLit",
		"on",
		"intLit",
		"'.'",
		"paramMarker",
		"VariableName",
		"reachIncomingRight",
		"'{'",
		"bitLit",
		"hexLit",
		"reachOutgoingRight",
		"edgeIncomingRight",
		"exists",
		"label",
		"':'",
		"decLit",
		"falseKwd",
		"floatLit",
		"trueKwd",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"edgeOutgoingRight",
		"elementNumber",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"lower",
		"matchNumber",
		"outDegree",
		"uppper",
		"edge",
		"properties",
		"vertex",
		"'|'",
		"PropertyAccess",
		"StringLiteral",
		"between",
		"BooleanLiteral",
		"DateLiteral",
		"doubleType",
		"floatType",
		"integerType",
		"IntervalLiteral",
		"intType",
		"Literal",
		"null",
		"NumericLiteral",
		"Subquery",
		"TimeLiteral",
		"TimestampLiteral",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"LogicalExpression",
		"NotInPredicate",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"set",
		"SimpleCase",
		"StringConcat",
		"ValueExpression",
		"VariableReference",
		"allProp",
		"comment",
		"defaultKwd",
		"VertexPattern",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"LabelName",
		"ifKwd",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"PropertyName",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"IfExists",
		"IfNotExists",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"CreateLabelStmt",
		"DataType",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"DropLabelStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelNameList",
		"LabelPropertyDef",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"PropertyAssignmentList",
		"PropertyOption",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DateTimeField",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"LabelPredicateOpt",
		"LabelPropertyList",
		"LabelPropertyListOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"PropertyOptionList",
		"PropertyOptionListOpt",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableNameList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{260, 1},
		{287, 1},
		{287, 3},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{249, 1},
		{228, 0},
		{213, 1},
		{216, 1},
		{218, 4},
		{220, 5},
		{272, 0},
		{272, 3},
		{271, 1},
		{271, 3},
		{238, 3},
		{281, 0},
		{281, 1},
		{280, 1},
		{280, 2},
		{245, 2},
		{245, 1},
		{245, 2},
		{245, 2},
		{219, 9},
		{269, 0},
		{269, 1},
		{222, 9},
		{224, 4},
		{226, 4},
		{225, 6},
		{229, 2},
		{232, 3},
		{232, 10},
		{235, 0},
		{235, 1},
		{234, 2},
		{230, 1},
		{230, 3},
		{206, 3},
		{206, 7},
		{239, 2},
		{241, 0},
		{241, 1},
		{240, 4},
		{278, 0},
		{278, 1},
		{277, 4},
		{244, 1},
		{244, 3},
		{212, 3},
		{126, 3},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{164, 1},
		{165, 1},
		{136, 1},
		{136, 1},
		{136, 1},
		{136, 1},
		{136, 1},
		{136, 1},
		{136, 1},
		{127, 1},
		{127, 1},
		{127, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{129, 1},
		{129, 1},
		{130, 2},
		{140, 2},
		{141, 2},
		{134, 3},
		{259, 1},
		{259, 1},
		{259, 1},
		{259, 1},
		{259, 1},
		{259, 1},
		{144, 1},
		{143, 2},
		{143, 3},
		{143, 3},
		{143, 3},
		{143, 3},
		{143, 3},
		{158, 3},
		{158, 3},
		{158, 3},
		{158, 3},
		{158, 3},
		{158, 3},
		{156, 3},
		{156, 3},
		{156, 3},
		{156, 2},
		{163, 3},
		{145, 3},
		{151, 4},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{152, 1},
		{256, 1},
		{256, 3},
		{148, 7},
		{286, 1},
		{264, 0},
		{264, 2},
		{142, 4},
		{142, 5},
		{142, 5},
		{142, 5},
		{142, 5},
		{142, 5},
		{142, 5},
		{142, 6},
		{176, 0},
		{176, 1},
		{273, 0},
		{273, 2},
		{150, 6},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{155, 3},
		{154, 4},
		{147, 6},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 1},
		{221, 4},
		{221, 1},
		{221, 4},
		{146, 1},
		{146, 1},
		{162, 5},
		{160, 4},
		{254, 1},
		{254, 2},
		{202, 4},
		{227, 0},
		{227, 2},
		{153, 3},
		{157, 4},
		{236, 3},
		{289, 1},
		{289, 3},
		{149, 2},
		{139, 3},
		{159, 1},
		{246, 1},
		{189, 8},
		{247, 3},
		{247, 2},
		{285, 1},
		{285, 3},
		{248, 1},
		{248, 3},
		{182, 2},
		{255, 0},
		{255, 2},
		{263, 0},
		{263, 1},
		{262, 2},
		{262, 2},
		{191, 2},
		{274, 1},
		{274, 3},
		{243, 4},
		{266, 2},
		{267, 0},
		{267, 1},
		{284, 0},
		{268, 1},
		{268, 3},
		{276, 1},
		{276, 3},
		{197, 1},
		{197, 2},
		{197, 3},
		{197, 3},
		{197, 4},
		{197, 3},
		{197, 3},
		{197, 4},
		{197, 2},
		{200, 1},
		{200, 3},
		{200, 3},
		{170, 3},
		{283, 4},
		{283, 4},
		{283, 4},
		{169, 3},
		{253, 0},
		{253, 1},
		{205, 3},
		{205, 1},
		{205, 3},
		{205, 1},
		{205, 3},
		{205, 1},
		{201, 2},
		{91, 1},
		{180, 0},
		{180, 1},
		{290, 1},
		{290, 3},
		{209, 2},
		{270, 0},
		{270, 1},
		{204, 1},
		{204, 1},
		{237, 1},
		{237, 3},
		{282, 2},
		{282, 8},
		{257, 2},
		{258, 0},
		{258, 1},
		{198, 1},
		{198, 1},
		{198, 1},
		{198, 3},
		{198, 4},
		{198, 5},
		{198, 4},
		{199, 0},
		{199, 1},
		{185, 0},
		{185, 1},
		{184, 1},
		{184, 2},
		{179, 5},
		{181, 0},
		{181, 2},
		{192, 0},
		{192, 3},
		{215, 1},
		{215, 3},
		{203, 1},
		{203, 2},
		{275, 1},
		{275, 1},
		{193, 0},
		{193, 2},
		{196, 0},
		{196, 3},
		{195, 0},
		{195, 2},
		{195, 4},
		{195, 4},
		{211, 1},
		{211, 1},
		{210, 1},
		{250, 9},
		{265, 1},
		{265, 3},
		{231, 5},
		{252, 2},
		{207, 0},
		{207, 2},
		{208, 0},
		{208, 3},
		{183, 1},
		{186, 1},
		{302, 1},
		{177, 1},
		{84, 1},
		{84, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{279, 1},
		{279, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [626][]uint16{
		// 0
		{1: 403, 353, 353, 32: 86, 86, 399, 86, 55: 393, 394, 58: 398, 63: 400, 179: 402, 184: 401, 396, 189: 390, 213: 378, 216: 379, 395, 380, 382, 381, 222: 383, 397, 384, 386, 385, 228: 377, 387, 232: 388, 246: 389, 249: 376, 391, 404, 392, 260: 374, 287: 375},
		{2: 373},
		{2: 372, 997},
		{2: 371, 371},
		{2: 369, 369},
		// 5
		{2: 368, 368},
		{2: 367, 367},
		{2: 366, 366},
		{2: 365, 365},
		{2: 364, 364},
		// 10
		{2: 363, 363},
		{2: 362, 362},
		{2: 361, 361},
		{2: 360, 360},
		{2: 359, 359},
		// 15
		{2: 358, 358},
		{2: 357, 357},
		{2: 356, 356},
		{2: 355, 355},
		{2: 354, 354},
		// 20
		{2: 352, 352},
		{2: 351, 351},
		{59: 952, 99: 953, 194: 334, 269: 954, 288: 955},
		{32: 547, 916, 917, 918, 247: 546},
		{59: 903, 99: 904, 194: 905},
		// 25
		{1: 403, 32: 86, 179: 402, 184: 401, 545, 189: 902},
		{122: 325, 124: 325, 233: 867, 866, 865},
		{2: 165, 165},
		{1: 403, 32: 85, 85, 85, 85, 179: 864},
		{1: 84, 32: 84, 84, 84, 84},
		// 30
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 452, 408},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 406, 408, 183: 405},
		{2: 56, 56},
		{51, 2: 51, 51, 51, 10: 51, 51, 51, 17: 51, 83: 51, 122: 51, 124: 51},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49: 47, 83: 47, 87: 47, 89: 47, 47, 92: 47, 47, 96: 47, 47, 100: 47, 111: 47, 122: 47, 47, 47, 47, 128: 47, 131: 47, 47, 47, 135: 47, 161: 47, 166: 47},
		// 35
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 49: 46, 83: 46, 87: 46, 89: 46, 46, 92: 46, 46, 96: 46, 46, 100: 46, 111: 46, 122: 46, 46, 46, 46, 128: 46, 131: 46, 46, 46, 135: 46, 161: 46, 166: 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 49: 45, 83: 45, 87: 45, 89: 45, 45, 92: 45, 45, 96: 45, 45, 100: 45, 111: 45, 122: 45, 45, 45, 45, 128: 45, 131: 45, 45, 45, 135: 45, 161: 45, 166: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49: 44, 83: 44, 87: 44, 89: 44, 44, 92: 44, 44, 96: 44, 44, 100: 44, 111: 44, 122: 44, 44, 44, 44, 128: 44, 131: 44, 44, 44, 135: 44, 161: 44, 166: 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 49: 43, 83: 43, 87: 43, 89: 43, 43, 92: 43, 43, 96: 43, 43, 100: 43, 111: 43, 122: 43, 43, 43, 43, 128: 43, 131: 43, 43, 43, 135: 43, 161: 43, 166: 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 49: 42, 83: 42, 87: 42, 89: 42, 42, 92: 42, 42, 96: 42, 42, 100: 42, 111: 42, 122: 42, 42, 42, 42, 128: 42, 131: 42, 42, 42, 135: 42, 161: 42, 166: 42},
		// 40
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 49: 41, 83: 41, 87: 41, 89: 41, 41, 92: 41, 41, 96: 41, 41, 100: 41, 111: 41, 122: 41, 41, 41, 41, 128: 41, 131: 41, 41, 41, 135: 41, 161: 41, 166: 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 49: 40, 83: 40, 87: 40, 89: 40, 40, 92: 40, 40, 96: 40, 40, 100: 40, 111: 40, 122: 40, 40, 40, 40, 128: 40, 131: 40, 40, 40, 135: 40, 161: 40, 166: 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 49: 39, 83: 39, 87: 39, 89: 39, 39, 92: 39, 39, 96: 39, 39, 100: 39, 111: 39, 122: 39, 39, 39, 39, 128: 39, 131: 39, 39, 39, 135: 39, 161: 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 49: 38, 83: 38, 87: 38, 89: 38, 38, 92: 38, 38, 96: 38, 38, 100: 38, 111: 38, 122: 38, 38, 38, 38, 128: 38, 131: 38, 38, 38, 135: 38, 161: 38, 166: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 49: 37, 83: 37, 87: 37, 89: 37, 37, 92: 37, 37, 96: 37, 37, 100: 37, 111: 37, 122: 37, 37, 37, 37, 128: 37, 131: 37, 37, 37, 135: 37, 161: 37},
		// 45
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 49: 36, 83: 36, 87: 36, 89: 36, 36, 92: 36, 36, 96: 36, 36, 100: 36, 111: 36, 122: 36, 36, 36, 36, 128: 36, 131: 36, 36, 36, 135: 36, 161: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 49: 35, 83: 35, 87: 35, 89: 35, 35, 92: 35, 35, 96: 35, 35, 100: 35, 111: 35, 122: 35, 35, 35, 35, 128: 35, 131: 35, 35, 35, 135: 35, 161: 35, 166: 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 49: 34, 83: 34, 87: 34, 89: 34, 34, 92: 34, 34, 96: 34, 34, 100: 34, 111: 34, 122: 34, 34, 34, 34, 128: 34, 131: 34, 34, 34, 135: 34, 161: 34, 166: 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 49: 33, 83: 33, 87: 33, 89: 33, 33, 92: 33, 33, 96: 33, 33, 100: 33, 111: 33, 122: 33, 33, 33, 33, 128: 33, 131: 33, 33, 33, 135: 33, 161: 33, 166: 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49: 32, 83: 32, 87: 32, 89: 32, 32, 92: 32, 32, 96: 32, 32, 100: 32, 111: 32, 122: 32, 32, 32, 32, 128: 32, 131: 32, 32, 32, 135: 32, 161: 32, 166: 32},
		// 50
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 49: 31, 83: 31, 87: 31, 89: 31, 31, 92: 31, 31, 96: 31, 31, 100: 31, 111: 31, 122: 31, 31, 31, 31, 128: 31, 131: 31, 31, 31, 135: 31, 161: 31, 166: 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 49: 30, 83: 30, 87: 30, 89: 30, 30, 92: 30, 30, 96: 30, 30, 100: 30, 111: 30, 122: 30, 30, 30, 30, 128: 30, 131: 30, 30, 30, 135: 30, 161: 30, 166: 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 49: 29, 83: 29, 87: 29, 89: 29, 29, 92: 29, 29, 96: 29, 29, 100: 29, 111: 29, 122: 29, 29, 29, 29, 128: 29, 131: 29, 29, 29, 135: 29, 161: 29, 166: 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 49: 28, 83: 28, 87: 28, 89: 28, 28, 92: 28, 28, 96: 28, 28, 100: 28, 111: 28, 122: 28, 28, 28, 28, 128: 28, 131: 28, 28, 28, 135: 28, 161: 28, 166: 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 49: 27, 83: 27, 87: 27, 89: 27, 27, 92: 27, 27, 96: 27, 27, 100: 27, 111: 27, 122: 27, 27, 27, 27, 128: 27, 131: 27, 27, 27, 135: 27, 161: 27, 166: 27},
		// 55
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 49: 26, 83: 26, 87: 26, 89: 26, 26, 92: 26, 26, 96: 26, 26, 100: 26, 111: 26, 122: 26, 26, 26, 26, 128: 26, 131: 26, 26, 26, 135: 26, 161: 26, 166: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 49: 25, 83: 25, 87: 25, 89: 25, 25, 92: 25, 25, 96: 25, 25, 100: 25, 111: 25, 122: 25, 25, 25, 25, 128: 25, 131: 25, 25, 25, 135: 25, 161: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 49: 24, 83: 24, 87: 24, 89: 24, 24, 92: 24, 24, 96: 24, 24, 100: 24, 111: 24, 122: 24, 24, 24, 24, 128: 24, 131: 24, 24, 24, 135: 24, 161: 24, 166: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 49: 23, 83: 23, 87: 23, 89: 23, 23, 92: 23, 23, 96: 23, 23, 100: 23, 111: 23, 122: 23, 23, 23, 23, 128: 23, 131: 23, 23, 23, 135: 23, 161: 23, 166: 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 49: 22, 83: 22, 87: 22, 89: 22, 22, 92: 22, 22, 96: 22, 22, 100: 22, 111: 22, 122: 22, 22, 22, 22, 128: 22, 131: 22, 22, 22, 135: 22, 161: 22, 166: 22},
		// 60
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 49: 21, 83: 21, 87: 21, 89: 21, 21, 92: 21, 21, 96: 21, 21, 100: 21, 111: 21, 122: 21, 21, 21, 21, 128: 21, 131: 21, 21, 21, 135: 21, 161: 21, 166: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49: 20, 83: 20, 87: 20, 89: 20, 20, 92: 20, 20, 96: 20, 20, 100: 20, 111: 20, 122: 20, 20, 20, 20, 128: 20, 131: 20, 20, 20, 135: 20, 161: 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 49: 19, 83: 19, 87: 19, 89: 19, 19, 92: 19, 19, 96: 19, 19, 100: 19, 111: 19, 122: 19, 19, 19, 19, 128: 19, 131: 19, 19, 19, 135: 19, 161: 19, 166: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 49: 18, 83: 18, 87: 18, 89: 18, 18, 92: 18, 18, 96: 18, 18, 100: 18, 111: 18, 122: 18, 18, 18, 18, 128: 18, 131: 18, 18, 18, 135: 18, 161: 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49: 17, 83: 17, 87: 17, 89: 17, 17, 92: 17, 17, 96: 17, 17, 100: 17, 111: 17, 122: 17, 17, 17, 17, 128: 17, 131: 17, 17, 17, 135: 17, 161: 17},
		// 65
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 49: 16, 83: 16, 87: 16, 89: 16, 16, 92: 16, 16, 96: 16, 16, 100: 16, 111: 16, 122: 16, 16, 16, 16, 128: 16, 131: 16, 16, 16, 135: 16, 161: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 49: 15, 83: 15, 87: 15, 89: 15, 15, 92: 15, 15, 96: 15, 15, 100: 15, 111: 15, 122: 15, 15, 15, 15, 128: 15, 131: 15, 15, 15, 135: 15, 161: 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 49: 14, 83: 14, 87: 14, 89: 14, 14, 92: 14, 14, 96: 14, 14, 100: 14, 111: 14, 122: 14, 14, 14, 14, 128: 14, 131: 14, 14, 14, 135: 14, 161: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 49: 13, 83: 13, 87: 13, 89: 13, 13, 92: 13, 13, 96: 13, 13, 100: 13, 111: 13, 122: 13, 13, 13, 13, 128: 13, 131: 13, 13, 13, 135: 13, 161: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 49: 12, 83: 12, 87: 12, 89: 12, 12, 92: 12, 12, 96: 12, 12, 100: 12, 111: 12, 122: 12, 12, 12, 12, 128: 12, 131: 12, 12, 12, 135: 12, 161: 12},
		// 70
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 49: 11, 83: 11, 87: 11, 89: 11, 11, 92: 11, 11, 96: 11, 11, 100: 11, 111: 11, 122: 11, 11, 11, 11, 128: 11, 131: 11, 11, 11, 135: 11, 161: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 49: 10, 83: 10, 87: 10, 89: 10, 10, 92: 10, 10, 96: 10, 10, 100: 10, 111: 10, 122: 10, 10, 10, 10, 128: 10, 131: 10, 10, 10, 135: 10, 161: 10, 166: 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 49: 9, 83: 9, 87: 9, 89: 9, 9, 92: 9, 9, 96: 9, 9, 100: 9, 111: 9, 122: 9, 9, 9, 9, 128: 9, 131: 9, 9, 9, 135: 9, 161: 9, 166: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 49: 8, 83: 8, 87: 8, 89: 8, 8, 92: 8, 8, 96: 8, 8, 100: 8, 111: 8, 122: 8, 8, 8, 8, 128: 8, 131: 8, 8, 8, 135: 8, 161: 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 49: 7, 83: 7, 87: 7, 89: 7, 7, 92: 7, 7, 96: 7, 7, 100: 7, 111: 7, 122: 7, 7, 7, 7, 128: 7, 131: 7, 7, 7, 135: 7, 161: 7, 166: 7},
		// 75
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 49: 6, 83: 6, 87: 6, 89: 6, 6, 92: 6, 6, 96: 6, 6, 100: 6, 111: 6, 122: 6, 6, 6, 6, 128: 6, 131: 6, 6, 6, 135: 6, 161: 6, 166: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 49: 5, 83: 5, 87: 5, 89: 5, 5, 92: 5, 5, 96: 5, 5, 100: 5, 111: 5, 122: 5, 5, 5, 5, 128: 5, 131: 5, 5, 5, 135: 5, 161: 5, 166: 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 49: 4, 83: 4, 87: 4, 89: 4, 4, 92: 4, 4, 96: 4, 4, 100: 4, 111: 4, 122: 4, 4, 4, 4, 128: 4, 131: 4, 4, 4, 135: 4, 161: 4, 166: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49: 3, 83: 3, 87: 3, 89: 3, 3, 92: 3, 3, 96: 3, 3, 100: 3, 111: 3, 122: 3, 3, 3, 3, 128: 3, 131: 3, 3, 3, 135: 3, 161: 3, 166: 3},
		{40: 453},
		// 80
		{31: 459, 52: 456, 455, 457, 169: 458, 197: 460, 200: 454},
		{138, 138, 138, 138, 138, 9: 649, 138, 138, 138, 17: 138, 32: 138, 138, 138, 138, 83: 138, 87: 138, 171: 647, 645, 648, 646, 187: 854, 853, 205: 852, 283: 851},
		{31: 459, 48: 692, 50: 691, 169: 643, 690},
		{31: 459, 48: 686, 50: 685, 169: 643, 687},
		{88: 639},
		// 85
		{129, 129, 129, 129, 129, 9: 129, 129, 129, 129, 17: 129, 32: 129, 129, 129, 129, 83: 129, 87: 129, 171: 129, 129, 129, 129, 187: 129, 129},
		{111, 428, 5: 427, 410, 8: 435, 16: 111, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 100: 111, 180: 626, 201: 625},
		{1: 81, 32: 81, 81, 81, 81, 83: 462, 181: 461},
		{1: 82, 32: 82, 82, 82, 82},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 506, 464},
		// 90
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 32: 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 89: 848},
		{307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 307, 32: 307, 307, 307, 307, 307, 307, 307, 307, 307, 307},
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 32: 306, 306, 306, 306, 306, 306, 306, 306, 306, 306},
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 32: 305, 305, 305, 305, 305, 305, 305, 305, 305, 305},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 32: 304, 304, 304, 304, 304, 304, 304, 304, 304, 304},
		// 95
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 32: 303, 303, 303, 303, 303, 303, 303, 303, 303, 303},
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 32: 302, 302, 302, 302, 302, 302, 302, 302, 302, 302},
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 32: 301, 301, 301, 301, 301, 301, 301, 301, 301, 301},
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 32: 300, 300, 300, 300, 300, 300, 300, 300, 300, 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 32: 299, 299, 299, 299, 299, 299, 299, 299, 299, 299},
		// 100
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 32: 298, 298, 298, 298, 298, 298, 298, 298, 298, 298},
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 32: 297, 297, 297, 297, 297, 297, 297, 297, 297, 297},
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 32: 296, 296, 296, 296, 296, 296, 296, 296, 296, 296},
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 32: 295, 295, 295, 295, 295, 295, 295, 295, 295, 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 32: 294, 294, 294, 294, 294, 294, 294, 294, 294, 294},
		// 105
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 32: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293},
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 32: 292, 292, 292, 292, 292, 292, 292, 292, 292, 292},
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 32: 291, 291, 291, 291, 291, 291, 291, 291, 291, 291},
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 32: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 32: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289},
		// 110
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 32: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 32: 287, 287, 287, 287, 287, 287, 287, 287, 287, 287},
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 32: 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 137: 285, 167: 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 32: 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 137: 284, 167: 284, 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 32: 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 137: 283, 167: 283, 283},
		// 115
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 32: 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 137: 282, 167: 282, 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 32: 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 137: 281, 167: 281, 281},
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 32: 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 137: 280, 167: 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 32: 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 137: 279, 167: 279, 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 32: 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 137: 278, 167: 278, 278},
		// 120
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 32: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 137: 277, 167: 277, 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 32: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 137: 276, 167: 276, 276},
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 32: 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 137: 275, 167: 275, 275},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 32: 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 137: 274, 167: 274, 274},
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 32: 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 137: 273, 167: 273, 273},
		// 125
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 32: 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 137: 272, 167: 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 32: 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 137: 271, 167: 271, 271},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 32: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 86: 847, 89: 39, 166: 39},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 32: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 86: 846, 89: 36, 166: 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 86: 845, 89: 37, 166: 37},
		// 130
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 32: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 86: 837, 89: 25, 166: 25},
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 32: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 836, 464},
		{80, 80, 80, 80, 5: 80, 7: 579, 9: 566, 80, 80, 80, 14: 562, 565, 577, 80, 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 32: 80, 80, 80, 80},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 835, 464},
		// 135
		{1: 833, 5: 427, 410, 507, 435, 505, 31: 508, 86, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 832, 464, 179: 402, 184: 401, 545, 189: 544},
		{31: 826},
		{31: 240},
		{31: 239},
		{31: 238},
		// 140
		{31: 237},
		{31: 236},
		{31: 235},
		{31: 234},
		{31: 233},
		// 145
		{31: 232},
		{31: 231},
		{31: 230},
		{31: 229},
		{31: 228},
		// 150
		{31: 227},
		{31: 226},
		{31: 225},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 817, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 89: 20, 166: 20},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 811, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 89: 16, 166: 16},
		// 155
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 807, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 89: 13, 166: 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 803, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 89: 14, 166: 14},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 799, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 89: 17, 166: 17},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 795, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 89: 12, 166: 12},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 791, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 89: 18, 166: 18},
		// 160
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 784, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 89: 15, 166: 15},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 771, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 89: 11, 166: 11},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 750, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 89: 8, 166: 8},
		{182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 182, 32: 182, 182, 182, 182, 182, 182, 182, 182, 182, 182},
		{181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 181, 32: 181, 181, 181, 181, 181, 181, 181, 181, 181, 181},
		// 165
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 36: 738, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 735, 464, 202: 737, 254: 736},
		{31: 543, 139: 542},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 32: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		{112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 32: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 49: 112, 89: 112, 97: 112, 100: 112, 111: 112, 123: 112, 128: 112, 161: 112},
		{168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 168, 32: 168, 168, 168, 168, 168, 168, 168, 168, 168, 168},
		// 170
		{1: 403, 32: 86, 179: 402, 184: 401, 545, 189: 544},
		{734},
		{32: 547, 247: 546},
		{13: 613, 191: 612},
		{1: 210, 5: 210, 210, 210, 210, 210, 14: 550, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 549},
		// 175
		{1: 209, 5: 209, 209, 209, 209, 209, 31: 209, 42: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 86: 209, 88: 209, 94: 209, 209, 98: 209, 209, 101: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 112: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 555, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 551, 464, 182: 554, 248: 553, 285: 552},
		{13: 162},
		{154, 2: 154, 154, 154, 7: 579, 9: 566, 154, 154, 154, 154, 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 37: 154, 154, 40: 582, 262: 581, 580},
		{4: 560, 13: 163},
		// 180
		{4: 161, 13: 161},
		{4: 159, 13: 159},
		{4: 112, 7: 112, 9: 112, 13: 112, 112, 112, 112, 18: 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 40: 112, 89: 112, 166: 556},
		{4: 156, 13: 156, 69: 558, 255: 557},
		{4: 158, 13: 158},
		// 185
		{86: 492, 94: 494, 493, 127: 559},
		{4: 155, 13: 155},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 555, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 551, 464, 182: 554, 248: 561},
		{4: 160, 13: 160},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 611, 464},
		// 190
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 610, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 609, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 608, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 607, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 606, 464},
		// 195
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 605, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 604, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 603, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 602, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 601, 464},
		// 200
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 600, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 599, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 598, 464},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 597, 464},
		{7: 595, 137: 594},
		// 205
		{31: 587, 236: 593},
		{20: 585},
		{157, 2: 157, 157, 157, 10: 157, 157, 157, 157, 37: 157, 157},
		{153, 2: 153, 153, 153, 10: 153, 153, 153, 153, 37: 153, 153},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 583, 408, 584},
		// 210
		{152, 2: 152, 152, 152, 10: 152, 152, 152, 152, 37: 152, 152},
		{151, 2: 151, 151, 151, 10: 151, 151, 151, 151, 37: 151, 151},
		{31: 587, 236: 586},
		{172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 32: 172, 172, 172, 172, 172, 172, 172, 172, 172, 172},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 588, 464, 289: 589},
		// 215
		{170, 4: 170, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{590, 4: 591},
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 32: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 592, 464},
		{169, 4: 169, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		// 220
		{173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 173, 32: 173, 173, 173, 173, 173, 173, 173, 173, 173, 173},
		{197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 197, 32: 197, 197, 197, 197, 197, 197, 197, 197, 197, 197},
		{137: 596},
		{196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 196, 32: 196, 196, 196, 196, 196, 196, 196, 196, 196, 196},
		{243, 243, 243, 243, 243, 243, 243, 579, 243, 566, 243, 243, 243, 243, 562, 565, 577, 243, 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 243, 243, 574, 32: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		// 225
		{245, 245, 245, 245, 245, 245, 245, 579, 245, 566, 245, 245, 245, 245, 562, 565, 577, 245, 245, 567, 578, 564, 563, 570, 569, 571, 572, 568, 245, 245, 245, 32: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{246, 246, 246, 246, 246, 246, 246, 579, 246, 566, 246, 246, 246, 246, 562, 565, 577, 246, 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 246, 246, 246, 32: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		{247, 247, 247, 247, 247, 247, 247, 579, 247, 566, 247, 247, 247, 247, 562, 565, 577, 247, 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 247, 247, 574, 32: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		{248, 248, 248, 248, 248, 248, 248, 579, 248, 566, 248, 248, 248, 248, 562, 565, 248, 248, 248, 248, 248, 564, 563, 248, 248, 248, 248, 248, 248, 248, 248, 32: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{249, 249, 249, 249, 249, 249, 249, 579, 249, 566, 249, 249, 249, 249, 562, 565, 249, 249, 249, 249, 249, 564, 563, 249, 249, 249, 249, 249, 249, 249, 249, 32: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		// 230
		{250, 250, 250, 250, 250, 250, 250, 579, 250, 566, 250, 250, 250, 250, 562, 565, 250, 250, 250, 250, 250, 564, 563, 250, 250, 250, 250, 250, 250, 250, 250, 32: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{251, 251, 251, 251, 251, 251, 251, 579, 251, 566, 251, 251, 251, 251, 562, 565, 251, 251, 251, 251, 251, 564, 563, 251, 251, 251, 251, 251, 251, 251, 251, 32: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{252, 252, 252, 252, 252, 252, 252, 579, 252, 566, 252, 252, 252, 252, 562, 565, 252, 252, 252, 252, 252, 564, 563, 252, 252, 252, 252, 252, 252, 252, 252, 32: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		{253, 253, 253, 253, 253, 253, 253, 579, 253, 566, 253, 253, 253, 253, 562, 565, 253, 253, 253, 253, 253, 564, 563, 253, 253, 253, 253, 253, 253, 253, 253, 32: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{254, 254, 254, 254, 254, 254, 254, 579, 254, 254, 254, 254, 254, 254, 562, 254, 254, 254, 254, 254, 254, 564, 563, 254, 254, 254, 254, 254, 254, 254, 254, 32: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		// 235
		{255, 255, 255, 255, 255, 255, 255, 579, 255, 255, 255, 255, 255, 255, 562, 255, 255, 255, 255, 255, 255, 564, 563, 255, 255, 255, 255, 255, 255, 255, 255, 32: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{256, 256, 256, 256, 256, 256, 256, 579, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 32: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{257, 257, 257, 257, 257, 257, 257, 579, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 32: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{258, 258, 258, 258, 258, 258, 258, 579, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 32: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{81, 2: 81, 81, 10: 81, 81, 81, 17: 81, 83: 462, 181: 705},
		// 240
		{242: 616, 615, 274: 614},
		{150, 2: 150, 150, 703, 10: 150, 150, 150, 17: 150, 83: 150},
		{149, 2: 149, 149, 149, 10: 149, 149, 149, 17: 149, 83: 149},
		{31: 619, 52: 456, 455, 457, 169: 458, 197: 618, 200: 454, 268: 617},
		{145, 2: 145, 145, 145, 10: 145, 145, 145, 17: 145, 83: 145, 87: 699, 266: 700, 698},
		// 245
		{142, 2: 142, 142, 142, 10: 142, 142, 142, 17: 142, 83: 142, 87: 142},
		{111, 428, 5: 427, 410, 8: 435, 16: 111, 31: 459, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 623, 622, 624, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 100: 111, 169: 458, 180: 626, 197: 621, 200: 454, 625, 276: 620},
		{695, 4: 696},
		{140, 4: 140},
		{31, 16: 31, 31: 459, 48: 692, 50: 691, 100: 31, 169: 643, 690},
		// 250
		{32, 16: 32, 31: 459, 48: 686, 50: 685, 100: 32, 169: 643, 687},
		{28, 16: 28, 88: 639, 100: 28},
		{638},
		{106, 16: 632, 97: 106, 100: 631, 111: 106, 204: 629, 209: 630, 270: 628},
		{110, 2: 110, 110, 110, 13: 110, 16: 110, 49: 110, 97: 110, 100: 110, 111: 110, 123: 110, 128: 110},
		// 255
		{113, 97: 113, 111: 113},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 634, 237: 633},
		{105, 97: 105, 111: 105},
		{1: 104, 5: 104, 104, 8: 104, 42: 104, 104, 104, 104, 104, 104, 104, 50: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		{1: 103, 5: 103, 103, 8: 103, 42: 103, 103, 103, 103, 103, 103, 103, 50: 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103},
		// 260
		{107, 14: 107, 107, 90: 107, 92: 107, 107, 96: 107, 107, 111: 107, 125: 636},
		{102, 14: 102, 102, 90: 102, 92: 102, 102, 96: 102, 102, 111: 102, 125: 102},
		{48, 2: 48, 48, 14: 48, 48, 31: 48, 90: 48, 92: 48, 48, 96: 48, 48, 111: 48, 125: 48},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 637},
		{101, 14: 101, 101, 90: 101, 92: 101, 101, 96: 101, 101, 111: 101, 125: 101},
		// 265
		{122, 122, 122, 122, 122, 122, 9: 122, 122, 122, 122, 17: 122, 31: 122, 122, 122, 122, 122, 83: 122, 87: 122, 171: 122, 122, 122, 122, 187: 122, 122},
		{48: 641, 50: 640},
		{31: 459, 169: 643, 684},
		{31: 459, 169: 643, 642},
		{131, 131, 131, 131, 131, 10: 131, 131, 131, 17: 131, 32: 131, 131, 131, 131, 83: 131, 87: 131},
		// 270
		{9: 649, 31: 651, 171: 647, 645, 648, 646, 205: 650, 282: 644},
		{31: 459, 169: 683},
		{1: 428, 5: 427, 410, 8: 435, 16: 111, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 97: 111, 100: 111, 111: 111, 180: 626, 201: 680},
		{118, 5: 118, 14: 118, 118, 31: 118, 83: 118, 90: 118, 93: 118},
		{1: 428, 5: 427, 410, 8: 435, 16: 111, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 97: 111, 100: 111, 180: 626, 201: 678},
		// 275
		{116, 5: 116, 14: 116, 116, 31: 116, 83: 116, 90: 116, 93: 116},
		{114, 5: 114, 14: 114, 114, 31: 114, 83: 114, 90: 114, 93: 114},
		{14: 663, 664, 31: 88, 90: 665, 93: 666, 198: 667, 677},
		{9: 121, 31: 459, 169: 652, 171: 121, 121, 121, 121, 253: 653},
		{120, 5: 120, 9: 120, 83: 120, 171: 120, 120, 120, 120},
		// 280
		{9: 649, 171: 647, 645, 648, 646, 205: 654},
		{121, 5: 121, 31: 459, 83: 121, 169: 652, 253: 655},
		{81, 5: 81, 83: 462, 181: 656},
		{97, 5: 658, 257: 659, 657},
		{661},
		// 285
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 660, 464},
		{96},
		{98, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{14: 663, 664, 31: 88, 90: 665, 93: 666, 198: 667, 662},
		{31: 99},
		// 290
		{31: 95, 92: 95, 96: 95},
		{31: 94, 92: 94, 96: 94},
		{31: 93, 92: 93, 96: 93},
		{4: 669, 88: 668},
		{31: 87, 92: 87, 96: 87},
		// 295
		{4: 673, 190: 672},
		{88: 670},
		{190: 671},
		{31: 89, 92: 89, 96: 89},
		{31: 92, 92: 92, 96: 92},
		// 300
		{88: 675, 190: 674},
		{31: 91, 92: 91, 96: 91},
		{190: 676},
		{31: 90, 92: 90, 96: 90},
		{31: 100},
		// 305
		{97: 679},
		{117, 5: 117, 14: 117, 117, 31: 117, 83: 117, 90: 117, 93: 117},
		{97: 682, 111: 681},
		{119, 5: 119, 14: 119, 119, 31: 119, 83: 119, 90: 119, 93: 119},
		{115, 5: 115, 14: 115, 115, 31: 115, 83: 115, 90: 115, 93: 115},
		// 310
		{126, 126, 126, 126, 126, 10: 126, 126, 126, 17: 126, 32: 126, 126, 126, 126, 83: 126, 87: 126},
		{134, 134, 134, 134, 134, 10: 134, 134, 134, 17: 134, 32: 134, 134, 134, 134, 83: 134, 87: 134},
		{31: 459, 169: 643, 689},
		{31: 459, 169: 643, 688},
		{130, 130, 130, 130, 130, 10: 130, 130, 130, 17: 130, 32: 130, 130, 130, 130, 83: 130, 87: 130},
		// 315
		{132, 132, 132, 132, 132, 10: 132, 132, 132, 17: 132, 32: 132, 132, 132, 132, 83: 132, 87: 132},
		{135, 135, 135, 135, 135, 10: 135, 135, 135, 17: 135, 32: 135, 135, 135, 135, 83: 135, 87: 135},
		{137, 137, 137, 137, 137, 10: 137, 137, 137, 17: 137, 32: 137, 137, 137, 137, 83: 137, 87: 137},
		{31: 459, 169: 643, 694},
		{31: 459, 169: 643, 693},
		// 320
		{133, 133, 133, 133, 133, 10: 133, 133, 133, 17: 133, 32: 133, 133, 133, 133, 83: 133, 87: 133},
		{136, 136, 136, 136, 136, 10: 136, 136, 136, 17: 136, 32: 136, 136, 136, 136, 83: 136, 87: 136},
		{141, 2: 141, 141, 141, 10: 141, 141, 141, 17: 141, 83: 141, 87: 141},
		{31: 459, 52: 456, 455, 457, 169: 458, 197: 697, 200: 454},
		{139, 4: 139},
		// 325
		{143, 2: 143, 143, 143, 10: 143, 143, 143, 17: 143, 83: 143, 284: 702},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 406, 408, 183: 701},
		{144, 2: 144, 144, 144, 10: 144, 144, 144, 17: 144, 83: 144},
		{146, 2: 146, 146, 146, 10: 146, 146, 146, 17: 146, 83: 146},
		{147, 2: 147, 147, 147, 10: 147, 147, 147, 17: 147, 83: 147},
		// 330
		{242: 616, 704},
		{148, 2: 148, 148, 148, 10: 148, 148, 148, 17: 148, 83: 148},
		{79, 2: 79, 79, 10: 79, 79, 79, 17: 707, 192: 706},
		{71, 2: 71, 71, 10: 71, 71, 718, 193: 717},
		{214: 708},
		// 335
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 551, 464, 182: 711, 203: 710, 215: 709},
		{78, 2: 78, 78, 715, 10: 78, 78, 78},
		{77, 2: 77, 77, 77, 10: 77, 77, 77},
		{75, 2: 75, 75, 75, 10: 75, 75, 75, 37: 713, 714, 275: 712},
		{74, 2: 74, 74, 74, 10: 74, 74, 74},
		// 340
		{73, 2: 73, 73, 73, 10: 73, 73, 73},
		{72, 2: 72, 72, 72, 10: 72, 72, 72},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 551, 464, 182: 711, 203: 716},
		{76, 2: 76, 76, 76, 10: 76, 76, 76},
		{69, 2: 69, 69, 10: 69, 721, 196: 720},
		// 345
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 719, 464},
		{70, 2: 70, 70, 7: 579, 9: 566, 70, 70, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{67, 2: 67, 67, 10: 725, 195: 724},
		{214: 722},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 551, 464, 182: 711, 203: 710, 215: 723},
		// 350
		{68, 2: 68, 68, 715, 10: 68},
		{164, 2: 164, 164},
		{88: 729, 90: 728, 210: 727, 726},
		{66, 2: 66, 66, 730, 51: 731},
		{63, 2: 63, 63, 63, 51: 63},
		// 355
		{62, 2: 62, 62, 62, 51: 62},
		{61, 2: 61, 61, 61, 51: 61},
		{88: 729, 90: 728, 210: 727, 733},
		{88: 729, 90: 728, 210: 727, 732},
		{64, 2: 64, 64},
		// 360
		{65, 2: 65, 65},
		{167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 32: 167, 167, 167, 167, 167, 167, 167, 167, 167, 167},
		{7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 36: 738, 202: 737, 254: 747},
		{6: 175, 36: 738, 39: 744, 202: 743, 227: 742},
		{6: 178, 36: 178, 39: 178},
		// 365
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 739, 464},
		{7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 41: 740},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 741, 464},
		{6: 176, 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 36: 176, 39: 176},
		{6: 746},
		// 370
		{6: 177, 36: 177, 39: 177},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 745, 464},
		{6: 174, 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 32: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		{6: 175, 36: 738, 39: 744, 202: 743, 227: 748},
		// 375
		{6: 749},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 32: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 751, 464},
		{7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 40: 752},
		{42: 762, 761, 763, 755, 758, 754, 131: 760, 759, 756, 135: 757, 221: 753},
		// 380
		{770},
		{194, 4: 194, 7: 194, 137: 194, 167: 194, 194},
		{193, 4: 193, 7: 193, 137: 193, 167: 193, 193},
		{192, 4: 192, 7: 192, 137: 192, 167: 192, 192},
		{191, 4: 191, 7: 191, 137: 191, 167: 191, 191},
		// 385
		{190, 4: 190, 7: 190, 137: 190, 167: 190, 190},
		{189, 4: 189, 7: 189, 137: 189, 167: 189, 189},
		{188, 4: 188, 7: 188, 137: 188, 167: 188, 188},
		{187, 4: 187, 7: 187, 137: 187, 167: 187, 187},
		{186, 4: 186, 7: 186, 65: 767, 137: 186, 167: 186, 186},
		// 390
		{184, 4: 184, 7: 184, 65: 764, 137: 184, 167: 184, 184},
		{42: 765},
		{67: 766},
		{183, 4: 183, 7: 183, 137: 183, 167: 183, 183},
		{42: 768},
		// 395
		{67: 769},
		{185, 4: 185, 7: 185, 137: 185, 167: 185, 185},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 32: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{57: 775, 60: 776, 777, 774, 64: 778, 66: 773, 70: 779, 780, 261: 772},
		{13: 781},
		// 400
		{13: 205},
		{13: 204},
		{13: 203},
		{13: 202},
		{13: 201},
		// 405
		{13: 200},
		{13: 199},
		{13: 198},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 782, 464},
		{783, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		// 410
		{206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 32: 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 785},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 786, 464},
		{208, 4: 788, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574, 273: 787},
		{790},
		// 415
		{86: 492, 94: 494, 493, 127: 789},
		{207},
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 32: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 792},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 793, 464},
		// 420
		{794, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 32: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 796},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 797, 464},
		{798, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		// 425
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 32: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 800},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 801, 464},
		{802, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 32: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		// 430
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 804},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 805, 464},
		{806, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 32: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{1: 210, 5: 210, 210, 210, 210, 210, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 808},
		// 435
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 809, 464},
		{810, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 32: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{1: 210, 5: 210, 210, 210, 210, 210, 14: 812, 31: 210, 42: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 86: 210, 88: 210, 94: 210, 210, 98: 210, 210, 101: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 112: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 175: 548, 813},
		{816},
		// 440
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 814, 464},
		{815, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 32: 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
		{218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 32: 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 818, 464},
		// 445
		{7: 579, 9: 566, 13: 819, 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 820, 464, 286: 821},
		{221, 7: 579, 221, 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{220, 8: 823, 264: 822},
		{825},
		// 450
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 824, 464},
		{219, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 222, 32: 222, 222, 222, 222, 222, 222, 222, 222, 222, 222},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 827, 464, 256: 828},
		{224, 4: 224, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		// 455
		{829, 4: 830},
		{241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 32: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 831, 464},
		{223, 4: 223, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{834, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		// 460
		{26, 428, 5: 427, 410, 26, 435, 26, 14: 26, 26, 26, 18: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 452, 408, 89: 26},
		{242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 32: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{244, 244, 244, 244, 244, 244, 244, 579, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 32: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{259, 259, 259, 259, 259, 259, 259, 579, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 32: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259},
		{57: 841, 60: 842, 843, 840, 64: 844, 66: 839, 259: 838},
		// 465
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 32: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 137: 267, 167: 267, 267},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 32: 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 137: 266, 167: 266, 266},
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 32: 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 137: 265, 167: 265, 265},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 32: 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 137: 264, 167: 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 32: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 137: 263, 167: 263, 263},
		// 470
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 32: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 137: 262, 167: 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 32: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 137: 261, 167: 261, 261},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 32: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 137: 268, 167: 268, 268},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 32: 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 137: 269, 167: 269, 269},
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 32: 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 137: 270, 167: 270, 270},
		// 475
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 850, 408, 186: 849},
		{308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 308, 32: 308, 308, 308, 308, 308, 308, 308, 308, 308, 308},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 32: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 131: 50, 50, 50, 135: 50},
		{31: 459, 169: 863},
		{31: 459, 169: 862},
		// 480
		{16: 632, 100: 631, 204: 629, 209: 858},
		{16: 632, 100: 631, 204: 629, 209: 855},
		{14: 663, 664, 90: 665, 92: 88, 666, 198: 667, 856},
		{92: 857},
		{31: 124},
		// 485
		{14: 663, 664, 90: 665, 92: 88, 666, 96: 88, 198: 667, 859},
		{92: 861, 96: 860},
		{31: 125},
		{31: 123},
		{127, 127, 127, 127, 127, 9: 127, 127, 127, 127, 17: 127, 32: 127, 127, 127, 127, 83: 127, 87: 127, 171: 127, 127, 127, 127, 187: 127, 127},
		// 490
		{128, 128, 128, 128, 128, 9: 128, 128, 128, 128, 17: 128, 32: 128, 128, 128, 128, 83: 128, 87: 128, 171: 128, 128, 128, 128, 187: 128, 128},
		{1: 83, 32: 83, 83, 83, 83},
		{122: 872, 124: 871, 206: 870, 230: 869},
		{122: 324, 124: 324},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 406, 408, 183: 868},
		// 495
		{122: 323, 124: 323},
		{2: 327, 327, 900},
		{2: 322, 322, 322, 13: 322},
		{1: 428, 111, 111, 111, 427, 410, 8: 435, 13: 111, 42: 418, 415, 417, 412, 447, 448, 425, 111, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 123: 111, 180: 898},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 627, 128: 111, 180: 873},
		// 500
		{128: 874},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 875},
		{18: 876},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 877},
		{2: 317, 317, 317, 13: 317, 49: 881, 123: 317, 239: 878, 880, 879},
		// 505
		{2: 319, 319, 319, 13: 319},
		{2: 314, 314, 314, 13: 314, 123: 887, 277: 886, 885},
		{2: 316, 316, 316, 13: 316, 123: 316},
		{31: 882},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 634, 237: 883},
		// 510
		{884, 125: 636},
		{2: 315, 315, 315, 13: 315, 123: 315},
		{2: 318, 318, 318, 13: 318},
		{2: 313, 313, 313, 13: 313},
		{31: 888},
		// 515
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 892, 126: 891, 212: 890, 244: 889},
		{895, 4: 896},
		{311, 4: 311},
		{19: 893},
		{89: 848},
		// 520
		{1: 428, 5: 427, 410, 507, 435, 505, 31: 508, 42: 501, 500, 502, 412, 447, 448, 425, 519, 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 503, 451, 444, 445, 532, 530, 535, 527, 534, 407, 533, 529, 528, 526, 531, 84: 541, 408, 492, 88: 495, 91: 463, 94: 494, 493, 98: 539, 518, 101: 496, 498, 497, 499, 504, 513, 525, 538, 514, 515, 112: 522, 516, 520, 517, 523, 512, 510, 521, 524, 511, 126: 465, 485, 129: 487, 488, 134: 491, 136: 466, 138: 486, 540, 489, 490, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 509, 481, 478, 477, 470, 482, 469, 484, 537, 162: 536, 471, 894, 464},
		{309, 4: 309, 7: 579, 9: 566, 14: 562, 565, 577, 18: 575, 567, 578, 564, 563, 570, 569, 571, 572, 568, 573, 576, 574},
		{2: 312, 312, 312, 13: 312},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 892, 126: 891, 212: 897},
		{310, 4: 310},
		// 525
		{2: 317, 317, 317, 13: 317, 49: 881, 123: 317, 239: 899, 880, 879},
		{2: 320, 320, 320, 13: 320},
		{122: 872, 124: 871, 206: 901},
		{2: 321, 321, 321, 13: 321},
		{2: 328, 328},
		// 530
		{1: 55, 5: 55, 55, 8: 55, 42: 55, 55, 55, 55, 55, 55, 55, 50: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 178: 907, 207: 914},
		{1: 55, 5: 55, 55, 8: 55, 42: 55, 55, 55, 55, 55, 55, 55, 50: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 178: 907, 207: 912},
		{1: 55, 5: 55, 55, 8: 55, 42: 55, 55, 55, 55, 55, 55, 55, 50: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 178: 907, 207: 906},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 909, 408},
		{98: 908},
		// 535
		{1: 54, 5: 54, 54, 8: 54, 42: 54, 54, 54, 54, 54, 54, 54, 50: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{87: 910},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 911},
		{2: 329, 329},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 913},
		// 540
		{2: 330, 330},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 406, 408, 183: 915},
		{2: 331, 331},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 943, 290: 942},
		{122: 325, 124: 325, 233: 867, 866, 934},
		// 545
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 921, 231: 920, 265: 919},
		{4: 927, 13: 613, 191: 926},
		{4: 59, 13: 59},
		{161: 922},
		{31: 923},
		// 550
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 892, 126: 891, 212: 890, 244: 924},
		{925, 4: 896},
		{4: 57, 13: 57},
		{2: 81, 81, 10: 81, 81, 81, 17: 81, 83: 462, 181: 929},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 921, 231: 928},
		// 555
		{4: 58, 13: 58},
		{2: 79, 79, 10: 79, 79, 79, 17: 707, 192: 930},
		{2: 71, 71, 10: 71, 71, 718, 193: 931},
		{2: 69, 69, 10: 69, 721, 196: 932},
		{2: 67, 67, 10: 725, 195: 933},
		// 560
		{2: 60, 60},
		{122: 872, 124: 871, 206: 870, 230: 935},
		{4: 900, 13: 613, 191: 936},
		{2: 81, 81, 10: 81, 81, 81, 17: 81, 83: 462, 181: 937},
		{2: 79, 79, 10: 79, 79, 79, 17: 707, 192: 938},
		// 565
		{2: 71, 71, 10: 71, 71, 718, 193: 939},
		{2: 69, 69, 10: 69, 721, 196: 940},
		{2: 67, 67, 10: 725, 195: 941},
		{2: 326, 326},
		{4: 945, 13: 613, 191: 944},
		// 570
		{4: 109, 13: 109},
		{2: 81, 81, 10: 81, 81, 81, 17: 81, 83: 462, 181: 947},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 541, 408, 91: 946},
		{4: 108, 13: 108},
		{2: 79, 79, 10: 79, 79, 79, 17: 707, 192: 948},
		// 575
		{2: 71, 71, 10: 71, 71, 718, 193: 949},
		{2: 69, 69, 10: 69, 721, 196: 950},
		{2: 67, 67, 10: 725, 195: 951},
		{2: 332, 332},
		{1: 53, 5: 53, 53, 8: 53, 42: 53, 53, 53, 53, 53, 53, 53, 50: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 178: 958, 208: 995},
		// 580
		{1: 53, 5: 53, 53, 8: 53, 42: 53, 53, 53, 53, 53, 53, 53, 50: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 178: 958, 208: 969},
		{194: 956},
		{194: 333},
		{87: 53, 178: 958, 208: 957},
		{87: 961},
		// 585
		{7: 959},
		{98: 960},
		{1: 52, 5: 52, 52, 8: 52, 42: 52, 52, 52, 52, 52, 52, 52, 50: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 87: 52},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 962},
		{31: 963},
		// 590
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 850, 408, 186: 965, 279: 964},
		{966, 4: 967},
		{2, 4: 2},
		{2: 335, 335},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 850, 408, 186: 968},
		// 595
		{1, 4: 1},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 635, 408, 177: 970},
		{2: 348, 348, 31: 972, 272: 971},
		{2: 349, 349},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 850, 408, 186: 975, 238: 974, 271: 973},
		// 600
		{992, 4: 993},
		{346, 4: 346},
		{42: 762, 761, 763, 755, 758, 754, 131: 760, 759, 756, 135: 757, 221: 976},
		{343, 4: 343, 7: 980, 137: 981, 167: 983, 982, 245: 979, 280: 978, 977},
		{344, 4: 344},
		// 605
		{342, 4: 342, 7: 980, 137: 981, 167: 983, 982, 245: 991},
		{341, 4: 341, 7: 341, 137: 341, 167: 341, 341},
		{137: 990},
		{338, 4: 338, 7: 338, 137: 338, 167: 338, 338},
		{42: 987, 986, 988, 68: 989, 86: 492, 88: 495, 94: 494, 493, 101: 496, 498, 497, 499, 127: 485, 129: 487, 488, 134: 491, 136: 985, 138: 486, 140: 489, 490},
		// 610
		{86: 984},
		{336, 4: 336, 7: 336, 137: 336, 167: 336, 336},
		{337, 4: 337, 7: 337, 137: 337, 167: 337, 337},
		{86: 847},
		{86: 846},
		// 615
		{86: 845},
		{86: 837},
		{339, 4: 339, 7: 339, 137: 339, 167: 339, 339},
		{340, 4: 340, 7: 340, 137: 340, 167: 340, 340},
		{2: 347, 347},
		// 620
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 850, 408, 186: 975, 238: 994},
		{345, 4: 345},
		{1: 428, 5: 427, 410, 8: 435, 42: 418, 415, 417, 412, 447, 448, 425, 50: 424, 420, 422, 423, 426, 409, 411, 416, 413, 421, 430, 431, 432, 419, 433, 449, 414, 450, 429, 451, 444, 445, 436, 437, 446, 438, 443, 407, 439, 440, 441, 434, 442, 84: 406, 408, 183: 996},
		{2: 350, 350},
		{1: 403, 353, 353, 32: 86, 86, 399, 86, 55: 393, 394, 58: 398, 63: 400, 179: 402, 184: 401, 396, 189: 390, 213: 378, 216: 379, 395, 380, 382, 381, 222: 383, 397, 384, 386, 385, 228: 377, 387, 232: 388, 246: 389, 249: 998, 391, 404, 392},
		// 625
		{2: 370, 370},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 301

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 20:
		{
			parser.yyVAL.statement = nil
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 23:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 24:
		{
			cl := &ast.CreateLabelStmt{
				IfNotExists: yyS[yypt-2].item.(bool),
				Label:       yyS[yypt-1].item.(model.CIStr),
			}
			if yyS[yypt-0].item != nil {
				cl.Properties = yyS[yypt-0].item.([]*ast.LabelProperty)
			}
			parser.yyVAL.statement = cl
		}
	case 25:
		{
			parser.yyVAL.item = nil
		}
	case 26:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 27:
		{
			parser.yyVAL.item = []*ast.LabelProperty{yyS[yypt-0].item.(*ast.LabelProperty)}
		}
	case 28:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.LabelProperty), yyS[yypt-0].item.(*ast.LabelProperty))
		}
	case 29:
		{
			lp := &ast.LabelProperty{
				Name: yyS[yypt-2].item.(model.CIStr),
				Type: yyS[yypt-1].item.(ast.DataType),
			}
			if yyS[yypt-0].item != nil {
				lp.Options = yyS[yypt-0].item.([]*ast.LabelPropertyOption)
			}
			parser.yyVAL.item = lp
		}
	case 30:
		{
			parser.yyVAL.item = nil
		}
	case 32:
		{
			parser.yyVAL.item = []*ast.LabelPropertyOption{yyS[yypt-0].item.(*ast.LabelPropertyOption)}
		}
	case 33:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.LabelPropertyOption), yyS[yypt-0].item.(*ast.LabelPropertyOption))
		}
	case 34:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNotNull,
			}
		}
	case 35:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNull,
			}
		}
	case 36:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeDefault,
				Data: yyS[yypt-0].expr,
			}
		}
	case 37:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeComment,
				Data: yyS[yypt-0].ident,
			}
		}
	case 38:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-7].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-5].item.(bool),
				LabelName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 39:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 40:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 41:
		{
			ds := &ast.DeleteStmt{
				VariableNames: yyS[yypt-6].item.([]model.CIStr),
				From:          yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 42:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 43:
		{
			parser.yyVAL.statement = &ast.DropLabelStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Label:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 44:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-3].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-2].ident),
				LabelName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 45:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 46:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-0].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-1].item != nil {
				is.IntoGraphName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.statement = is
		}
	case 47:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
				From:       yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 48:
		{
			parser.yyVAL.item = nil
		}
	case 50:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 51:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 52:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 53:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 54:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].item.(model.CIStr),
				To:                  yyS[yypt-1].item.(model.CIStr),
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(model.CIStr)
			}
			parser.yyVAL.item = insertion
		}
	case 55:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 56:
		{
			parser.yyVAL.item = nil
		}
	case 58:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 59:
		{
			parser.yyVAL.item = nil
		}
	case 61:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 62:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 63:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 64:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 65:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].item.(model.CIStr),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 87:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 95:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 96:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 97:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 98:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 99:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 100:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 101:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 102:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 103:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 104:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 105:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 106:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 107:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 108:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 109:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 110:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 111:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 112:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 113:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 114:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 115:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 119:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 120:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 121:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 122:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 123:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 124:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 125:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 126:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 127:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 128:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 129:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 130:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 131:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 132:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 149:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 150:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 151:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 153:
		{
			parser.yyVAL.expr = nil
		}
	case 154:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 155:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 156:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 157:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 158:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 159:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 160:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 161:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 162:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 163:
		{
			parser.yyVAL.item = false
		}
	case 164:
		{
			parser.yyVAL.item = true
		}
	case 165:
		{
			parser.yyVAL.expr = nil
		}
	case 166:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 167:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 168:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 169:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 170:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 171:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 172:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 173:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 174:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 175:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 176:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 177:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 178:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(ast.DataType),
			}
		}
	case 179:
		{
			parser.yyVAL.item = ast.DataTypeString
		}
	case 180:
		{
			parser.yyVAL.item = ast.DataTypeBoolean
		}
	case 181:
		{
			parser.yyVAL.item = ast.DataTypeInteger
		}
	case 182:
		{
			parser.yyVAL.item = ast.DataTypeInt
		}
	case 183:
		{
			parser.yyVAL.item = ast.DataTypeLong
		}
	case 184:
		{
			parser.yyVAL.item = ast.DataTypeFloat
		}
	case 185:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 186:
		{
			parser.yyVAL.item = ast.DataTypeDate
		}
	case 187:
		{
			parser.yyVAL.item = ast.DataTypeTime
		}
	case 188:
		{
			parser.yyVAL.item = ast.DataTypeTimeWithZone
		}
	case 189:
		{
			parser.yyVAL.item = ast.DataTypeTimestamp
		}
	case 190:
		{
			parser.yyVAL.item = ast.DataTypeTimestampWithZone
		}
	case 193:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 194:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 195:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 196:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 197:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 198:
		{
			parser.yyVAL.expr = nil
		}
	case 199:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 200:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 201:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 202:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 203:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 204:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 205:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 206:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 209:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 210:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 211:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 212:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 213:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 214:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 215:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 216:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 217:
		{
			parser.yyVAL.item = ""
		}
	case 218:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 219:
		{
			parser.yyVAL.item = nil
		}
	case 220:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 221:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 222:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 223:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 224:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 225:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 226:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 227:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 228:
		{
			parser.yyVAL.item = nil
		}
	case 231:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 232:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 233:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 234:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 235:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 236:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 237:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 238:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 239:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 240:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 241:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 242:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 243:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 244:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 245:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 246:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 247:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 248:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 249:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 250:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 251:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 252:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 254:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 255:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 256:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 257:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 258:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 259:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 260:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 261:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 262:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 264:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 265:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 266:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 267:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 271:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 272:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 273:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 274:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 275:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 276:
		{
			parser.yyVAL.item = nil
		}
	case 278:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 279:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 280:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 281:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 282:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 283:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 284:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 285:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 287:
		{
			parser.yyVAL.item = nil
		}
	case 289:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 290:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 291:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 292:
		{
			parser.yyVAL.item = nil
		}
	case 293:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 294:
		{
			parser.yyVAL.item = nil
		}
	case 295:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 296:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 297:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 298:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 299:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 300:
		{
			parser.yyVAL.item = false
		}
	case 301:
		{
			parser.yyVAL.item = true
		}
	case 302:
		{
			parser.yyVAL.item = nil
		}
	case 303:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 304:
		{
			parser.yyVAL.item = nil
		}
	case 305:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 306:
		{
			parser.yyVAL.item = nil
		}
	case 307:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 308:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 309:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 311:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 312:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 313:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 314:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 315:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 316:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].item.(model.CIStr),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 317:
		{
			parser.yyVAL.statement = &ast.UseStmt{}
		}
	case 318:
		{
			parser.yyVAL.item = false
		}
	case 319:
		{
			parser.yyVAL.item = true
		}
	case 320:
		{
			parser.yyVAL.item = false
		}
	case 321:
		{
			parser.yyVAL.item = true
		}
	case 322:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 323:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 324:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 325:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 372:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
