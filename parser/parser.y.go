// Code generated by goyacc DO NOT EDIT.

// Copyright 2013 The ql Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSES/QL-LICENSE file.

// Copyright 2022 zGraph Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Initial yacc source generated by ebnf2y[1]
// at 2013-10-04 23:10:47.861401015 +0200 CEST
//
//  $ ebnf2y -o ql.y -oe ql.ebnf -start StatementList -pkg ql -p _
//
//   [1]: http://github.com/cznic/ebnf2y

// The parser implements the PGQL specification
//
// - https://pgql-lang.org/spec/1.5/
//

package parser

import __yyfmt__ "fmt"

import (
	"math"

	"github.com/vescale/zgraph/parser/ast"
	"github.com/vescale/zgraph/parser/model"
	"github.com/vescale/zgraph/parser/opcode"
	"github.com/vescale/zgraph/parser/types"
)

type yySymType struct {
	yys       int
	offset    int // offset
	item      interface{}
	ident     string
	expr      ast.ExprNode
	statement ast.StmtNode
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault          = 57492
	yyEOFCode          = 57344
	abs                = 57453
	all                = 57416
	allDifferent       = 57460
	allProp            = 57475
	and                = 57392
	andand             = 57351
	andnot             = 57466
	any                = 57417
	arrayAgg           = 57430
	as                 = 57353
	asc                = 57354
	assignmentEq       = 57467
	avg                = 57431
	begin              = 57402
	between            = 57393
	bitLit             = 57465
	booleanType        = 57406
	by                 = 57355
	caseKwd            = 57396
	cast               = 57440
	ceil               = 57454
	ceiling            = 57455
	cheapest           = 57419
	comment            = 57404
	commit             = 57405
	cost               = 57421
	count              = 57432
	create             = 57356
	dateType           = 57409
	day                = 57410
	decLit             = 57462
	defaultKwd         = 57357
	deleteKwd          = 57358
	desc               = 57359
	distinct           = 57401
	div                = 57489
	doubleAtIdentifier = 57349
	doubleType         = 57360
	drop               = 57361
	edge               = 57362
	edgeIncomingLeft   = 57480
	edgeIncomingRight  = 57481
	edgeOutgoingLeft   = 57478
	edgeOutgoingRight  = 57479
	elementNumber      = 57456
	elseKwd            = 57399
	empty              = 57486
	end                = 57403
	eq                 = 57468
	yyErrCode          = 57345
	exists             = 57363
	explain            = 57407
	extract            = 57437
	falseKwd           = 57364
	floatLit           = 57461
	floatType          = 57365
	floor              = 57457
	forkKwd            = 57429
	from               = 57366
	ge                 = 57469
	graph              = 57415
	group              = 57367
	hasLabel           = 57458
	having             = 57368
	hexLit             = 57464
	hour               = 57424
	id                 = 57459
	identifier         = 57346
	ifKwd              = 57369
	in                 = 57400
	inDegree           = 57448
	index              = 57370
	insert             = 57371
	intLit             = 57463
	intType            = 57374
	integerType        = 57372
	interval           = 57423
	into               = 57373
	invalid            = 57350
	is                 = 57375
	javaRegexpLike     = 57449
	label              = 57450
	labels             = 57394
	le                 = 57470
	leftArrow          = 57476
	limit              = 57376
	listagg            = 57433
	long               = 57441
	lower              = 57446
	lowerThanOn        = 57487
	match              = 57377
	matchNumber        = 57451
	max                = 57434
	min                = 57435
	minute             = 57425
	mod                = 57490
	month              = 57426
	neg                = 57491
	neq                = 57471
	neqSynonym         = 57472
	not                = 57378
	null               = 57379
	nulleq             = 57473
	offset             = 57414
	on                 = 57380
	or                 = 57391
	order              = 57381
	outDegree          = 57452
	paramMarker        = 57474
	path               = 57422
	pipes              = 57352
	pipesAsOr          = 57488
	prefix             = 57445
	properties         = 57395
	reachIncomingLeft  = 57484
	reachIncomingRight = 57485
	reachOutgoingLeft  = 57482
	reachOutgoingRight = 57483
	rightArrow         = 57477
	rollback           = 57413
	second             = 57427
	selectKwd          = 57382
	set                = 57383
	shortest           = 57418
	singleAtIdentifier = 57348
	stringKwd          = 57442
	stringLit          = 57347
	substring          = 57428
	sum                = 57436
	then               = 57397
	timeType           = 57412
	timestampType      = 57411
	timezoneHour       = 57438
	timezoneMinute     = 57439
	top                = 57420
	trueKwd            = 57384
	unique             = 57385
	update             = 57386
	uppper             = 57447
	use                = 57387
	vertex             = 57388
	when               = 57398
	where              = 57389
	with               = 57443
	xor                = 57390
	yearType           = 57408
	zone               = 57444

	yyMaxDepth = 200
	yyTabOfs   = -374
)

var (
	yyXLAT = map[int]int{
		41:    0,   // ')' (292x)
		57422: 1,   // path (277x)
		57344: 2,   // $end (274x)
		59:    3,   // ';' (273x)
		44:    4,   // ',' (270x)
		57421: 5,   // cost (265x)
		57403: 6,   // end (261x)
		57378: 7,   // not (258x)
		57429: 8,   // forkKwd (255x)
		45:    9,   // '-' (245x)
		57376: 10,  // limit (212x)
		57381: 11,  // order (207x)
		57368: 12,  // having (202x)
		57366: 13,  // from (200x)
		42:    14,  // '*' (196x)
		43:    15,  // '+' (194x)
		57375: 16,  // is (191x)
		57367: 17,  // group (186x)
		57392: 18,  // and (182x)
		57400: 19,  // in (181x)
		37:    20,  // '%' (180x)
		47:    21,  // '/' (180x)
		60:    22,  // '<' (180x)
		62:    23,  // '>' (180x)
		57468: 24,  // eq (180x)
		57469: 25,  // ge (180x)
		57470: 26,  // le (180x)
		57472: 27,  // neqSynonym (180x)
		57391: 28,  // or (180x)
		57352: 29,  // pipes (180x)
		57390: 30,  // xor (180x)
		40:    31,  // '(' (179x)
		57382: 32,  // selectKwd (179x)
		57358: 33,  // deleteKwd (175x)
		57371: 34,  // insert (175x)
		57386: 35,  // update (175x)
		57398: 36,  // when (159x)
		57354: 37,  // asc (158x)
		57359: 38,  // desc (158x)
		57399: 39,  // elseKwd (157x)
		57353: 40,  // as (156x)
		57397: 41,  // then (153x)
		57412: 42,  // timeType (152x)
		57409: 43,  // dateType (150x)
		57411: 44,  // timestampType (150x)
		57406: 45,  // booleanType (149x)
		57441: 46,  // long (149x)
		57442: 47,  // stringKwd (149x)
		57419: 48,  // cheapest (106x)
		57394: 49,  // labels (106x)
		57418: 50,  // shortest (106x)
		57414: 51,  // offset (105x)
		57416: 52,  // all (104x)
		57417: 53,  // any (104x)
		57420: 54,  // top (104x)
		57402: 55,  // begin (103x)
		57405: 56,  // commit (103x)
		57410: 57,  // day (103x)
		57407: 58,  // explain (103x)
		57415: 59,  // graph (103x)
		57424: 60,  // hour (103x)
		57425: 61,  // minute (103x)
		57426: 62,  // month (103x)
		57413: 63,  // rollback (103x)
		57427: 64,  // second (103x)
		57443: 65,  // with (103x)
		57408: 66,  // yearType (103x)
		57444: 67,  // zone (103x)
		57423: 68,  // interval (102x)
		57445: 69,  // prefix (102x)
		57438: 70,  // timezoneHour (102x)
		57439: 71,  // timezoneMinute (102x)
		57430: 72,  // arrayAgg (101x)
		57431: 73,  // avg (101x)
		57440: 74,  // cast (101x)
		57432: 75,  // count (101x)
		57437: 76,  // extract (101x)
		57346: 77,  // identifier (101x)
		57433: 78,  // listagg (101x)
		57434: 79,  // max (101x)
		57435: 80,  // min (101x)
		57428: 81,  // substring (101x)
		57436: 82,  // sum (101x)
		57389: 83,  // where (84x)
		57546: 84,  // Identifier (83x)
		57619: 85,  // UnReservedKeyword (83x)
		57347: 86,  // stringLit (69x)
		57380: 87,  // on (66x)
		46:    88,  // '.' (65x)
		57463: 89,  // intLit (65x)
		57474: 90,  // paramMarker (62x)
		57485: 91,  // reachIncomingRight (61x)
		123:   92,  // '{' (59x)
		57465: 93,  // bitLit (59x)
		57464: 94,  // hexLit (59x)
		57483: 95,  // reachOutgoingRight (59x)
		57363: 96,  // exists (58x)
		57450: 97,  // label (58x)
		57462: 98,  // decLit (57x)
		57481: 99,  // edgeIncomingRight (57x)
		57364: 100, // falseKwd (57x)
		57461: 101, // floatLit (57x)
		57384: 102, // trueKwd (57x)
		58:    103, // ':' (56x)
		63:    104, // '?' (56x)
		57453: 105, // abs (56x)
		57460: 106, // allDifferent (56x)
		57396: 107, // caseKwd (56x)
		57454: 108, // ceil (56x)
		57455: 109, // ceiling (56x)
		57456: 110, // elementNumber (56x)
		57457: 111, // floor (56x)
		57458: 112, // hasLabel (56x)
		57459: 113, // id (56x)
		57448: 114, // inDegree (56x)
		57449: 115, // javaRegexpLike (56x)
		57446: 116, // lower (56x)
		57451: 117, // matchNumber (56x)
		57452: 118, // outDegree (56x)
		57447: 119, // uppper (56x)
		57479: 120, // edgeOutgoingRight (55x)
		57625: 121, // VariableName (54x)
		57627: 122, // VariableReference (54x)
		57362: 123, // edge (53x)
		57395: 124, // properties (53x)
		57388: 125, // vertex (53x)
		124:   126, // '|' (50x)
		57590: 127, // PropertyAccess (50x)
		57615: 128, // StringLiteral (50x)
		61:    129, // '=' (48x)
		57393: 130, // between (48x)
		57499: 131, // BooleanLiteral (48x)
		57514: 132, // DateLiteral (48x)
		57360: 133, // doubleType (48x)
		57365: 134, // floatType (48x)
		57372: 135, // integerType (48x)
		57554: 136, // IntervalLiteral (48x)
		57374: 137, // intType (48x)
		57573: 138, // Literal (48x)
		57379: 139, // null (48x)
		57578: 140, // NumericLiteral (48x)
		57383: 141, // set (48x)
		57616: 142, // Subquery (48x)
		57617: 143, // TimeLiteral (48x)
		57618: 144, // TimestampLiteral (48x)
		57493: 145, // Aggregation (47x)
		57496: 146, // ArithmeticExpression (47x)
		57498: 147, // BindVariable (47x)
		57500: 148, // BracketedValueExpression (47x)
		57503: 149, // CaseExpression (47x)
		57504: 150, // CastSpecification (47x)
		57505: 151, // CharacterSubstring (47x)
		57525: 152, // ExistsPredicate (47x)
		57529: 153, // ExtractFunction (47x)
		57534: 154, // FunctionInvocation (47x)
		57535: 155, // FunctionName (47x)
		57549: 156, // InPredicate (47x)
		57557: 157, // IsNotNullPredicate (47x)
		57558: 158, // IsNullPredicate (47x)
		57574: 159, // LogicalExpression (47x)
		57577: 160, // NotInPredicate (47x)
		57600: 161, // RelationalExpression (47x)
		57603: 162, // ScalarSubquery (47x)
		57604: 163, // SearchedCase (47x)
		57609: 164, // SimpleCase (47x)
		57614: 165, // StringConcat (47x)
		57622: 166, // ValueExpression (47x)
		57475: 167, // allProp (46x)
		57404: 168, // comment (45x)
		57357: 169, // defaultKwd (45x)
		57630: 170, // VertexPattern (19x)
		57624: 171, // VariableLengthPathPattern (10x)
		57480: 172, // edgeIncomingLeft (9x)
		57478: 173, // edgeOutgoingLeft (9x)
		57476: 174, // leftArrow (9x)
		57477: 175, // rightArrow (9x)
		57401: 176, // distinct (8x)
		57517: 177, // DistinctOpt (8x)
		57559: 178, // LabelName (7x)
		57369: 179, // ifKwd (6x)
		57583: 180, // PathPatternMacro (6x)
		57626: 181, // VariableNameOpt (6x)
		57635: 182, // WhereClauseOpt (6x)
		57526: 183, // ExpAsVar (5x)
		57540: 184, // GraphName (5x)
		57584: 185, // PathPatternMacroList (5x)
		57585: 186, // PathPatternMacroOpt (5x)
		57593: 187, // PropertyName (5x)
		57484: 188, // reachIncomingLeft (5x)
		57482: 189, // reachOutgoingLeft (5x)
		57608: 190, // SelectStmt (5x)
		125:   191, // '}' (4x)
		57533: 192, // FromClause (4x)
		57544: 193, // GroupByClauseOpt (4x)
		57545: 194, // HavingClauseOpt (4x)
		57370: 195, // index (4x)
		57570: 196, // LimitClauseOpt (4x)
		57580: 197, // OrderByClauseOpt (4x)
		57581: 198, // PathPattern (4x)
		57586: 199, // PatternQuantifier (4x)
		57587: 200, // PatternQuantifierOpt (4x)
		57610: 201, // SimplePathPattern (4x)
		57629: 202, // VariableSpec (4x)
		57633: 203, // WhenClause (4x)
		57501: 204, // ByItem (3x)
		57506: 205, // ColonOrIsKeyword (3x)
		57521: 206, // EdgePattern (3x)
		57536: 207, // GraphElementInsertion (3x)
		57547: 208, // IfExists (3x)
		57548: 209, // IfNotExists (3x)
		57561: 210, // LabelPredicate (3x)
		57569: 211, // LengthNum (3x)
		57571: 212, // LimitOption (3x)
		57591: 213, // PropertyAssignment (3x)
		57497: 214, // BeginStmt (2x)
		57355: 215, // by (2x)
		57502: 216, // ByList (2x)
		57507: 217, // CommitStmt (2x)
		57356: 218, // create (2x)
		57510: 219, // CreateGraphStmt (2x)
		57511: 220, // CreateIndexStmt (2x)
		57512: 221, // CreateLabelStmt (2x)
		57513: 222, // DataType (2x)
		57516: 223, // DeleteStmt (2x)
		57361: 224, // drop (2x)
		57518: 225, // DropGraphStmt (2x)
		57519: 226, // DropIndexStmt (2x)
		57520: 227, // DropLabelStmt (2x)
		57522: 228, // ElseClauseOpt (2x)
		57523: 229, // EmptyStmt (2x)
		57527: 230, // ExplainStmt (2x)
		57537: 231, // GraphElementInsertionList (2x)
		57538: 232, // GraphElementUpdate (2x)
		57553: 233, // InsertStmt (2x)
		57373: 234, // into (2x)
		57555: 235, // IntoClause (2x)
		57556: 236, // IntoClauseOpt (2x)
		57550: 237, // InValueList (2x)
		57560: 238, // LabelNameList (2x)
		57563: 239, // LabelPropertyDef (2x)
		57568: 240, // LabelsAndProperties (2x)
		57566: 241, // LabelSpecification (2x)
		57567: 242, // LabelSpecificationOpt (2x)
		57377: 243, // match (2x)
		57575: 244, // MatchClause (2x)
		57592: 245, // PropertyAssignmentList (2x)
		57595: 246, // PropertyOption (2x)
		57601: 247, // RollbackStmt (2x)
		57605: 248, // SelectClause (2x)
		57606: 249, // SelectEelement (2x)
		57612: 250, // Statement (2x)
		57620: 251, // UpdateStmt (2x)
		57387: 252, // use (2x)
		57621: 253, // UseStmt (2x)
		57631: 254, // VertexPatternOpt (2x)
		57632: 255, // VertexReference (2x)
		57634: 256, // WhenClauseList (2x)
		57494: 257, // AllPropertiesPrefixOpt (1x)
		57495: 258, // ArgumentList (1x)
		57508: 259, // CostClause (1x)
		57509: 260, // CostClauseOpt (1x)
		57515: 261, // DateTimeField (1x)
		57524: 262, // Entry (1x)
		57528: 263, // ExtractField (1x)
		57530: 264, // FieldAsName (1x)
		57531: 265, // FieldAsNameOpt (1x)
		57532: 266, // ForStringLengthOpt (1x)
		57539: 267, // GraphElementUpdateList (1x)
		57541: 268, // GraphOnClause (1x)
		57542: 269, // GraphOnClauseOpt (1x)
		57543: 270, // GraphPattern (1x)
		57551: 271, // IndexKeyTypeOpt (1x)
		57562: 272, // LabelPredicateOpt (1x)
		57564: 273, // LabelPropertyList (1x)
		57565: 274, // LabelPropertyListOpt (1x)
		57572: 275, // ListaggSeparatorOpt (1x)
		57576: 276, // MatchClauseList (1x)
		57579: 277, // Order (1x)
		57582: 278, // PathPatternList (1x)
		57588: 279, // PropertiesSpecification (1x)
		57589: 280, // PropertiesSpecificationOpt (1x)
		57594: 281, // PropertyNameList (1x)
		57596: 282, // PropertyOptionList (1x)
		57597: 283, // PropertyOptionListOpt (1x)
		57598: 284, // QuantifiedPathExpr (1x)
		57599: 285, // ReachabilityPathExpr (1x)
		57602: 286, // RowsPerMatchOpt (1x)
		57607: 287, // SelectElementList (1x)
		57611: 288, // StartPosition (1x)
		57613: 289, // StatementList (1x)
		57385: 290, // unique (1x)
		57623: 291, // ValueExpressionList (1x)
		57628: 292, // VariableReferenceList (1x)
		57492: 293, // $default (0x)
		38:    294, // '&' (0x)
		94:    295, // '^' (0x)
		126:   296, // '~' (0x)
		57351: 297, // andand (0x)
		57466: 298, // andnot (0x)
		57467: 299, // assignmentEq (0x)
		57489: 300, // div (0x)
		57349: 301, // doubleAtIdentifier (0x)
		57486: 302, // empty (0x)
		57345: 303, // error (0x)
		57552: 304, // IndexName (0x)
		57350: 305, // invalid (0x)
		57487: 306, // lowerThanOn (0x)
		57490: 307, // mod (0x)
		57491: 308, // neg (0x)
		57471: 309, // neq (0x)
		57473: 310, // nulleq (0x)
		57488: 311, // pipesAsOr (0x)
		57348: 312, // singleAtIdentifier (0x)
	}

	yySymNames = []string{
		"')'",
		"path",
		"$end",
		"';'",
		"','",
		"cost",
		"end",
		"not",
		"forkKwd",
		"'-'",
		"limit",
		"order",
		"having",
		"from",
		"'*'",
		"'+'",
		"is",
		"group",
		"and",
		"in",
		"'%'",
		"'/'",
		"'<'",
		"'>'",
		"eq",
		"ge",
		"le",
		"neqSynonym",
		"or",
		"pipes",
		"xor",
		"'('",
		"selectKwd",
		"deleteKwd",
		"insert",
		"update",
		"when",
		"asc",
		"desc",
		"elseKwd",
		"as",
		"then",
		"timeType",
		"dateType",
		"timestampType",
		"booleanType",
		"long",
		"stringKwd",
		"cheapest",
		"labels",
		"shortest",
		"offset",
		"all",
		"any",
		"top",
		"begin",
		"commit",
		"day",
		"explain",
		"graph",
		"hour",
		"minute",
		"month",
		"rollback",
		"second",
		"with",
		"yearType",
		"zone",
		"interval",
		"prefix",
		"timezoneHour",
		"timezoneMinute",
		"arrayAgg",
		"avg",
		"cast",
		"count",
		"extract",
		"identifier",
		"listagg",
		"max",
		"min",
		"substring",
		"sum",
		"where",
		"Identifier",
		"UnReservedKeyword",
		"stringLit",
		"on",
		"'.'",
		"intLit",
		"paramMarker",
		"reachIncomingRight",
		"'{'",
		"bitLit",
		"hexLit",
		"reachOutgoingRight",
		"exists",
		"label",
		"decLit",
		"edgeIncomingRight",
		"falseKwd",
		"floatLit",
		"trueKwd",
		"':'",
		"'?'",
		"abs",
		"allDifferent",
		"caseKwd",
		"ceil",
		"ceiling",
		"elementNumber",
		"floor",
		"hasLabel",
		"id",
		"inDegree",
		"javaRegexpLike",
		"lower",
		"matchNumber",
		"outDegree",
		"uppper",
		"edgeOutgoingRight",
		"VariableName",
		"VariableReference",
		"edge",
		"properties",
		"vertex",
		"'|'",
		"PropertyAccess",
		"StringLiteral",
		"'='",
		"between",
		"BooleanLiteral",
		"DateLiteral",
		"doubleType",
		"floatType",
		"integerType",
		"IntervalLiteral",
		"intType",
		"Literal",
		"null",
		"NumericLiteral",
		"set",
		"Subquery",
		"TimeLiteral",
		"TimestampLiteral",
		"Aggregation",
		"ArithmeticExpression",
		"BindVariable",
		"BracketedValueExpression",
		"CaseExpression",
		"CastSpecification",
		"CharacterSubstring",
		"ExistsPredicate",
		"ExtractFunction",
		"FunctionInvocation",
		"FunctionName",
		"InPredicate",
		"IsNotNullPredicate",
		"IsNullPredicate",
		"LogicalExpression",
		"NotInPredicate",
		"RelationalExpression",
		"ScalarSubquery",
		"SearchedCase",
		"SimpleCase",
		"StringConcat",
		"ValueExpression",
		"allProp",
		"comment",
		"defaultKwd",
		"VertexPattern",
		"VariableLengthPathPattern",
		"edgeIncomingLeft",
		"edgeOutgoingLeft",
		"leftArrow",
		"rightArrow",
		"distinct",
		"DistinctOpt",
		"LabelName",
		"ifKwd",
		"PathPatternMacro",
		"VariableNameOpt",
		"WhereClauseOpt",
		"ExpAsVar",
		"GraphName",
		"PathPatternMacroList",
		"PathPatternMacroOpt",
		"PropertyName",
		"reachIncomingLeft",
		"reachOutgoingLeft",
		"SelectStmt",
		"'}'",
		"FromClause",
		"GroupByClauseOpt",
		"HavingClauseOpt",
		"index",
		"LimitClauseOpt",
		"OrderByClauseOpt",
		"PathPattern",
		"PatternQuantifier",
		"PatternQuantifierOpt",
		"SimplePathPattern",
		"VariableSpec",
		"WhenClause",
		"ByItem",
		"ColonOrIsKeyword",
		"EdgePattern",
		"GraphElementInsertion",
		"IfExists",
		"IfNotExists",
		"LabelPredicate",
		"LengthNum",
		"LimitOption",
		"PropertyAssignment",
		"BeginStmt",
		"by",
		"ByList",
		"CommitStmt",
		"create",
		"CreateGraphStmt",
		"CreateIndexStmt",
		"CreateLabelStmt",
		"DataType",
		"DeleteStmt",
		"drop",
		"DropGraphStmt",
		"DropIndexStmt",
		"DropLabelStmt",
		"ElseClauseOpt",
		"EmptyStmt",
		"ExplainStmt",
		"GraphElementInsertionList",
		"GraphElementUpdate",
		"InsertStmt",
		"into",
		"IntoClause",
		"IntoClauseOpt",
		"InValueList",
		"LabelNameList",
		"LabelPropertyDef",
		"LabelsAndProperties",
		"LabelSpecification",
		"LabelSpecificationOpt",
		"match",
		"MatchClause",
		"PropertyAssignmentList",
		"PropertyOption",
		"RollbackStmt",
		"SelectClause",
		"SelectEelement",
		"Statement",
		"UpdateStmt",
		"use",
		"UseStmt",
		"VertexPatternOpt",
		"VertexReference",
		"WhenClauseList",
		"AllPropertiesPrefixOpt",
		"ArgumentList",
		"CostClause",
		"CostClauseOpt",
		"DateTimeField",
		"Entry",
		"ExtractField",
		"FieldAsName",
		"FieldAsNameOpt",
		"ForStringLengthOpt",
		"GraphElementUpdateList",
		"GraphOnClause",
		"GraphOnClauseOpt",
		"GraphPattern",
		"IndexKeyTypeOpt",
		"LabelPredicateOpt",
		"LabelPropertyList",
		"LabelPropertyListOpt",
		"ListaggSeparatorOpt",
		"MatchClauseList",
		"Order",
		"PathPatternList",
		"PropertiesSpecification",
		"PropertiesSpecificationOpt",
		"PropertyNameList",
		"PropertyOptionList",
		"PropertyOptionListOpt",
		"QuantifiedPathExpr",
		"ReachabilityPathExpr",
		"RowsPerMatchOpt",
		"SelectElementList",
		"StartPosition",
		"StatementList",
		"unique",
		"ValueExpressionList",
		"VariableReferenceList",
		"$default",
		"'&'",
		"'^'",
		"'~'",
		"andand",
		"andnot",
		"assignmentEq",
		"div",
		"doubleAtIdentifier",
		"empty",
		"error",
		"IndexName",
		"invalid",
		"lowerThanOn",
		"mod",
		"neg",
		"neq",
		"nulleq",
		"pipesAsOr",
		"singleAtIdentifier",
	}

	yyReductions = []struct{ xsym, components int }{
		{0, 1},
		{262, 1},
		{289, 1},
		{289, 3},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{250, 1},
		{229, 0},
		{214, 1},
		{217, 1},
		{219, 4},
		{221, 5},
		{274, 0},
		{274, 3},
		{273, 1},
		{273, 3},
		{239, 3},
		{283, 0},
		{283, 1},
		{282, 1},
		{282, 2},
		{246, 2},
		{246, 1},
		{246, 2},
		{246, 2},
		{220, 9},
		{271, 0},
		{271, 1},
		{223, 9},
		{292, 1},
		{292, 3},
		{225, 4},
		{227, 4},
		{226, 6},
		{230, 2},
		{233, 3},
		{233, 10},
		{236, 0},
		{236, 1},
		{235, 2},
		{231, 1},
		{231, 3},
		{207, 3},
		{207, 7},
		{255, 1},
		{240, 2},
		{242, 0},
		{242, 1},
		{241, 4},
		{280, 0},
		{280, 1},
		{279, 4},
		{245, 1},
		{245, 3},
		{213, 3},
		{127, 3},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{166, 1},
		{122, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{138, 1},
		{128, 1},
		{128, 1},
		{128, 1},
		{140, 1},
		{140, 1},
		{140, 1},
		{131, 1},
		{131, 1},
		{132, 2},
		{143, 2},
		{144, 2},
		{136, 3},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{261, 1},
		{147, 1},
		{146, 2},
		{146, 3},
		{146, 3},
		{146, 3},
		{146, 3},
		{146, 3},
		{161, 3},
		{161, 3},
		{161, 3},
		{161, 3},
		{161, 3},
		{161, 3},
		{159, 3},
		{159, 3},
		{159, 3},
		{159, 2},
		{165, 3},
		{148, 3},
		{154, 4},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{155, 1},
		{258, 1},
		{258, 3},
		{151, 7},
		{288, 1},
		{266, 0},
		{266, 2},
		{145, 4},
		{145, 5},
		{145, 5},
		{145, 5},
		{145, 5},
		{145, 5},
		{145, 5},
		{145, 6},
		{177, 0},
		{177, 1},
		{275, 0},
		{275, 2},
		{153, 6},
		{263, 1},
		{263, 1},
		{263, 1},
		{263, 1},
		{263, 1},
		{263, 1},
		{263, 1},
		{263, 1},
		{158, 3},
		{157, 4},
		{150, 6},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 1},
		{222, 4},
		{222, 1},
		{222, 4},
		{149, 1},
		{149, 1},
		{164, 5},
		{163, 4},
		{256, 1},
		{256, 2},
		{203, 4},
		{228, 0},
		{228, 2},
		{156, 3},
		{160, 4},
		{237, 3},
		{291, 1},
		{291, 3},
		{152, 2},
		{142, 3},
		{162, 1},
		{247, 1},
		{190, 8},
		{248, 3},
		{248, 2},
		{287, 1},
		{287, 3},
		{249, 1},
		{249, 3},
		{183, 2},
		{257, 0},
		{257, 2},
		{265, 0},
		{265, 1},
		{264, 2},
		{264, 2},
		{192, 2},
		{276, 1},
		{276, 3},
		{244, 4},
		{268, 2},
		{269, 0},
		{269, 1},
		{286, 0},
		{270, 1},
		{270, 3},
		{278, 1},
		{278, 3},
		{198, 1},
		{198, 2},
		{198, 3},
		{198, 3},
		{198, 4},
		{198, 3},
		{198, 3},
		{198, 4},
		{198, 2},
		{201, 1},
		{201, 3},
		{201, 3},
		{171, 3},
		{285, 4},
		{285, 4},
		{285, 4},
		{170, 3},
		{254, 0},
		{254, 1},
		{206, 3},
		{206, 1},
		{206, 3},
		{206, 1},
		{206, 3},
		{206, 1},
		{202, 2},
		{181, 0},
		{181, 1},
		{210, 2},
		{272, 0},
		{272, 1},
		{205, 1},
		{205, 1},
		{238, 1},
		{238, 3},
		{284, 2},
		{284, 8},
		{259, 2},
		{260, 0},
		{260, 1},
		{199, 1},
		{199, 1},
		{199, 1},
		{199, 3},
		{199, 4},
		{199, 5},
		{199, 4},
		{200, 0},
		{200, 1},
		{186, 0},
		{186, 1},
		{185, 1},
		{185, 2},
		{180, 5},
		{182, 0},
		{182, 2},
		{193, 0},
		{193, 3},
		{216, 1},
		{216, 3},
		{204, 1},
		{204, 2},
		{277, 1},
		{277, 1},
		{194, 0},
		{194, 2},
		{197, 0},
		{197, 3},
		{196, 0},
		{196, 2},
		{196, 4},
		{196, 4},
		{212, 1},
		{212, 1},
		{211, 1},
		{251, 9},
		{267, 1},
		{267, 3},
		{232, 5},
		{253, 2},
		{208, 0},
		{208, 2},
		{209, 0},
		{209, 3},
		{184, 1},
		{187, 1},
		{304, 1},
		{178, 1},
		{121, 1},
		{84, 1},
		{84, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{85, 1},
		{281, 1},
		{281, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [627][]uint16{
		// 0
		{1: 404, 354, 354, 32: 87, 87, 400, 87, 55: 394, 395, 58: 399, 63: 401, 180: 403, 185: 402, 397, 190: 391, 214: 379, 217: 380, 396, 381, 383, 382, 223: 384, 398, 385, 387, 386, 229: 378, 388, 233: 389, 247: 390, 250: 377, 392, 405, 393, 262: 375, 289: 376},
		{2: 374},
		{2: 373, 999},
		{2: 372, 372},
		{2: 370, 370},
		// 5
		{2: 369, 369},
		{2: 368, 368},
		{2: 367, 367},
		{2: 366, 366},
		{2: 365, 365},
		// 10
		{2: 364, 364},
		{2: 363, 363},
		{2: 362, 362},
		{2: 361, 361},
		{2: 360, 360},
		// 15
		{2: 359, 359},
		{2: 358, 358},
		{2: 357, 357},
		{2: 356, 356},
		{2: 355, 355},
		// 20
		{2: 353, 353},
		{2: 352, 352},
		{59: 954, 97: 955, 195: 335, 271: 956, 290: 957},
		{32: 548, 918, 919, 920, 248: 547},
		{59: 905, 97: 906, 195: 907},
		// 25
		{1: 404, 32: 87, 180: 403, 185: 402, 546, 190: 904},
		{123: 324, 125: 324, 234: 868, 867, 866},
		{2: 163, 163},
		{1: 404, 32: 86, 86, 86, 86, 180: 865},
		{1: 85, 32: 85, 85, 85, 85},
		// 30
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 453, 409},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 407, 409, 184: 406},
		{2: 57, 57},
		{52, 2: 52, 52, 52, 10: 52, 52, 52, 17: 52, 83: 52, 123: 52, 125: 52},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 49: 47, 83: 47, 87: 47, 47, 90: 47, 47, 47, 95: 47, 99: 47, 103: 47, 120: 47, 123: 47, 47, 47, 47, 129: 47, 47, 133: 47, 47, 47, 137: 47, 141: 47, 167: 47},
		// 35
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 49: 46, 83: 46, 87: 46, 46, 90: 46, 46, 46, 95: 46, 99: 46, 103: 46, 120: 46, 123: 46, 46, 46, 46, 129: 46, 46, 133: 46, 46, 46, 137: 46, 141: 46, 167: 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 49: 45, 83: 45, 87: 45, 45, 90: 45, 45, 45, 95: 45, 99: 45, 103: 45, 120: 45, 123: 45, 45, 45, 45, 129: 45, 45, 133: 45, 45, 45, 137: 45, 141: 45, 167: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 49: 44, 83: 44, 87: 44, 44, 90: 44, 44, 44, 95: 44, 99: 44, 103: 44, 120: 44, 123: 44, 44, 44, 44, 129: 44, 44, 133: 44, 44, 44, 137: 44, 141: 44, 167: 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 49: 43, 83: 43, 87: 43, 43, 90: 43, 43, 43, 95: 43, 99: 43, 103: 43, 120: 43, 123: 43, 43, 43, 43, 129: 43, 43, 133: 43, 43, 43, 137: 43, 141: 43, 167: 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 49: 42, 83: 42, 87: 42, 42, 90: 42, 42, 42, 95: 42, 99: 42, 103: 42, 120: 42, 123: 42, 42, 42, 42, 129: 42, 42, 133: 42, 42, 42, 137: 42, 141: 42, 167: 42},
		// 40
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 49: 41, 83: 41, 87: 41, 41, 90: 41, 41, 41, 95: 41, 99: 41, 103: 41, 120: 41, 123: 41, 41, 41, 41, 129: 41, 41, 133: 41, 41, 41, 137: 41, 141: 41, 167: 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 49: 40, 83: 40, 87: 40, 40, 90: 40, 40, 40, 95: 40, 99: 40, 103: 40, 120: 40, 123: 40, 40, 40, 40, 129: 40, 40, 133: 40, 40, 40, 137: 40, 141: 40, 167: 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 49: 39, 83: 39, 87: 39, 39, 90: 39, 39, 39, 95: 39, 99: 39, 103: 39, 120: 39, 123: 39, 39, 39, 39, 129: 39, 39, 133: 39, 39, 39, 137: 39, 141: 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 49: 38, 83: 38, 87: 38, 38, 90: 38, 38, 38, 95: 38, 99: 38, 103: 38, 120: 38, 123: 38, 38, 38, 38, 129: 38, 38, 133: 38, 38, 38, 137: 38, 141: 38, 167: 38},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 49: 37, 83: 37, 87: 37, 37, 90: 37, 37, 37, 95: 37, 99: 37, 103: 37, 120: 37, 123: 37, 37, 37, 37, 129: 37, 37, 133: 37, 37, 37, 137: 37, 141: 37},
		// 45
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 49: 36, 83: 36, 87: 36, 36, 90: 36, 36, 36, 95: 36, 99: 36, 103: 36, 120: 36, 123: 36, 36, 36, 36, 129: 36, 36, 133: 36, 36, 36, 137: 36, 141: 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 49: 35, 83: 35, 87: 35, 35, 90: 35, 35, 35, 95: 35, 99: 35, 103: 35, 120: 35, 123: 35, 35, 35, 35, 129: 35, 35, 133: 35, 35, 35, 137: 35, 141: 35, 167: 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 49: 34, 83: 34, 87: 34, 34, 90: 34, 34, 34, 95: 34, 99: 34, 103: 34, 120: 34, 123: 34, 34, 34, 34, 129: 34, 34, 133: 34, 34, 34, 137: 34, 141: 34, 167: 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 49: 33, 83: 33, 87: 33, 33, 90: 33, 33, 33, 95: 33, 99: 33, 103: 33, 120: 33, 123: 33, 33, 33, 33, 129: 33, 33, 133: 33, 33, 33, 137: 33, 141: 33, 167: 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 49: 32, 83: 32, 87: 32, 32, 90: 32, 32, 32, 95: 32, 99: 32, 103: 32, 120: 32, 123: 32, 32, 32, 32, 129: 32, 32, 133: 32, 32, 32, 137: 32, 141: 32, 167: 32},
		// 50
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 49: 31, 83: 31, 87: 31, 31, 90: 31, 31, 31, 95: 31, 99: 31, 103: 31, 120: 31, 123: 31, 31, 31, 31, 129: 31, 31, 133: 31, 31, 31, 137: 31, 141: 31, 167: 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 49: 30, 83: 30, 87: 30, 30, 90: 30, 30, 30, 95: 30, 99: 30, 103: 30, 120: 30, 123: 30, 30, 30, 30, 129: 30, 30, 133: 30, 30, 30, 137: 30, 141: 30, 167: 30},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 49: 29, 83: 29, 87: 29, 29, 90: 29, 29, 29, 95: 29, 99: 29, 103: 29, 120: 29, 123: 29, 29, 29, 29, 129: 29, 29, 133: 29, 29, 29, 137: 29, 141: 29, 167: 29},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 49: 28, 83: 28, 87: 28, 28, 90: 28, 28, 28, 95: 28, 99: 28, 103: 28, 120: 28, 123: 28, 28, 28, 28, 129: 28, 28, 133: 28, 28, 28, 137: 28, 141: 28, 167: 28},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 49: 27, 83: 27, 87: 27, 27, 90: 27, 27, 27, 95: 27, 99: 27, 103: 27, 120: 27, 123: 27, 27, 27, 27, 129: 27, 27, 133: 27, 27, 27, 137: 27, 141: 27, 167: 27},
		// 55
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 49: 26, 83: 26, 87: 26, 26, 90: 26, 26, 26, 95: 26, 99: 26, 103: 26, 120: 26, 123: 26, 26, 26, 26, 129: 26, 26, 133: 26, 26, 26, 137: 26, 141: 26, 167: 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 49: 25, 83: 25, 87: 25, 25, 90: 25, 25, 25, 95: 25, 99: 25, 103: 25, 120: 25, 123: 25, 25, 25, 25, 129: 25, 25, 133: 25, 25, 25, 137: 25, 141: 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 49: 24, 83: 24, 87: 24, 24, 90: 24, 24, 24, 95: 24, 99: 24, 103: 24, 120: 24, 123: 24, 24, 24, 24, 129: 24, 24, 133: 24, 24, 24, 137: 24, 141: 24, 167: 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 49: 23, 83: 23, 87: 23, 23, 90: 23, 23, 23, 95: 23, 99: 23, 103: 23, 120: 23, 123: 23, 23, 23, 23, 129: 23, 23, 133: 23, 23, 23, 137: 23, 141: 23, 167: 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 49: 22, 83: 22, 87: 22, 22, 90: 22, 22, 22, 95: 22, 99: 22, 103: 22, 120: 22, 123: 22, 22, 22, 22, 129: 22, 22, 133: 22, 22, 22, 137: 22, 141: 22, 167: 22},
		// 60
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 49: 21, 83: 21, 87: 21, 21, 90: 21, 21, 21, 95: 21, 99: 21, 103: 21, 120: 21, 123: 21, 21, 21, 21, 129: 21, 21, 133: 21, 21, 21, 137: 21, 141: 21, 167: 21},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 49: 20, 83: 20, 87: 20, 20, 90: 20, 20, 20, 95: 20, 99: 20, 103: 20, 120: 20, 123: 20, 20, 20, 20, 129: 20, 20, 133: 20, 20, 20, 137: 20, 141: 20},
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 49: 19, 83: 19, 87: 19, 19, 90: 19, 19, 19, 95: 19, 99: 19, 103: 19, 120: 19, 123: 19, 19, 19, 19, 129: 19, 19, 133: 19, 19, 19, 137: 19, 141: 19, 167: 19},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 49: 18, 83: 18, 87: 18, 18, 90: 18, 18, 18, 95: 18, 99: 18, 103: 18, 120: 18, 123: 18, 18, 18, 18, 129: 18, 18, 133: 18, 18, 18, 137: 18, 141: 18},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 49: 17, 83: 17, 87: 17, 17, 90: 17, 17, 17, 95: 17, 99: 17, 103: 17, 120: 17, 123: 17, 17, 17, 17, 129: 17, 17, 133: 17, 17, 17, 137: 17, 141: 17},
		// 65
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 49: 16, 83: 16, 87: 16, 16, 90: 16, 16, 16, 95: 16, 99: 16, 103: 16, 120: 16, 123: 16, 16, 16, 16, 129: 16, 16, 133: 16, 16, 16, 137: 16, 141: 16},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 49: 15, 83: 15, 87: 15, 15, 90: 15, 15, 15, 95: 15, 99: 15, 103: 15, 120: 15, 123: 15, 15, 15, 15, 129: 15, 15, 133: 15, 15, 15, 137: 15, 141: 15},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 49: 14, 83: 14, 87: 14, 14, 90: 14, 14, 14, 95: 14, 99: 14, 103: 14, 120: 14, 123: 14, 14, 14, 14, 129: 14, 14, 133: 14, 14, 14, 137: 14, 141: 14},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 49: 13, 83: 13, 87: 13, 13, 90: 13, 13, 13, 95: 13, 99: 13, 103: 13, 120: 13, 123: 13, 13, 13, 13, 129: 13, 13, 133: 13, 13, 13, 137: 13, 141: 13},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 49: 12, 83: 12, 87: 12, 12, 90: 12, 12, 12, 95: 12, 99: 12, 103: 12, 120: 12, 123: 12, 12, 12, 12, 129: 12, 12, 133: 12, 12, 12, 137: 12, 141: 12},
		// 70
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 49: 11, 83: 11, 87: 11, 11, 90: 11, 11, 11, 95: 11, 99: 11, 103: 11, 120: 11, 123: 11, 11, 11, 11, 129: 11, 11, 133: 11, 11, 11, 137: 11, 141: 11},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 49: 10, 83: 10, 87: 10, 10, 90: 10, 10, 10, 95: 10, 99: 10, 103: 10, 120: 10, 123: 10, 10, 10, 10, 129: 10, 10, 133: 10, 10, 10, 137: 10, 141: 10, 167: 10},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 49: 9, 83: 9, 87: 9, 9, 90: 9, 9, 9, 95: 9, 99: 9, 103: 9, 120: 9, 123: 9, 9, 9, 9, 129: 9, 9, 133: 9, 9, 9, 137: 9, 141: 9, 167: 9},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 49: 8, 83: 8, 87: 8, 8, 90: 8, 8, 8, 95: 8, 99: 8, 103: 8, 120: 8, 123: 8, 8, 8, 8, 129: 8, 8, 133: 8, 8, 8, 137: 8, 141: 8},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 49: 7, 83: 7, 87: 7, 7, 90: 7, 7, 7, 95: 7, 99: 7, 103: 7, 120: 7, 123: 7, 7, 7, 7, 129: 7, 7, 133: 7, 7, 7, 137: 7, 141: 7, 167: 7},
		// 75
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 49: 6, 83: 6, 87: 6, 6, 90: 6, 6, 6, 95: 6, 99: 6, 103: 6, 120: 6, 123: 6, 6, 6, 6, 129: 6, 6, 133: 6, 6, 6, 137: 6, 141: 6, 167: 6},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 49: 5, 83: 5, 87: 5, 5, 90: 5, 5, 5, 95: 5, 99: 5, 103: 5, 120: 5, 123: 5, 5, 5, 5, 129: 5, 5, 133: 5, 5, 5, 137: 5, 141: 5, 167: 5},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 49: 4, 83: 4, 87: 4, 4, 90: 4, 4, 4, 95: 4, 99: 4, 103: 4, 120: 4, 123: 4, 4, 4, 4, 129: 4, 4, 133: 4, 4, 4, 137: 4, 141: 4, 167: 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 49: 3, 83: 3, 87: 3, 3, 90: 3, 3, 3, 95: 3, 99: 3, 103: 3, 120: 3, 123: 3, 3, 3, 3, 129: 3, 3, 133: 3, 3, 3, 137: 3, 141: 3, 167: 3},
		{40: 454},
		// 80
		{31: 460, 52: 457, 456, 458, 170: 459, 198: 461, 201: 455},
		{136, 136, 136, 136, 136, 9: 650, 136, 136, 136, 17: 136, 32: 136, 136, 136, 136, 83: 136, 87: 136, 172: 648, 646, 649, 647, 188: 855, 854, 206: 853, 285: 852},
		{31: 460, 48: 693, 50: 692, 170: 644, 691},
		{31: 460, 48: 687, 50: 686, 170: 644, 688},
		{89: 640},
		// 85
		{127, 127, 127, 127, 127, 9: 127, 127, 127, 127, 17: 127, 32: 127, 127, 127, 127, 83: 127, 87: 127, 172: 127, 127, 127, 127, 188: 127, 127},
		{110, 429, 5: 428, 411, 8: 436, 16: 110, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 103: 110, 181: 627, 202: 626},
		{1: 82, 32: 82, 82, 82, 82, 83: 463, 182: 462},
		{1: 83, 32: 83, 83, 83, 83},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 507},
		// 90
		{305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 32: 305, 305, 305, 305, 305, 305, 305, 305, 305, 305, 88: 849},
		{304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 304, 32: 304, 304, 304, 304, 304, 304, 304, 304, 304, 304},
		{303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 303, 32: 303, 303, 303, 303, 303, 303, 303, 303, 303, 303},
		{302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 302, 32: 302, 302, 302, 302, 302, 302, 302, 302, 302, 302},
		{301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 301, 32: 301, 301, 301, 301, 301, 301, 301, 301, 301, 301},
		// 95
		{300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 300, 32: 300, 300, 300, 300, 300, 300, 300, 300, 300, 300},
		{299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 299, 32: 299, 299, 299, 299, 299, 299, 299, 299, 299, 299},
		{298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 298, 32: 298, 298, 298, 298, 298, 298, 298, 298, 298, 298},
		{297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 297, 32: 297, 297, 297, 297, 297, 297, 297, 297, 297, 297},
		{296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 296, 32: 296, 296, 296, 296, 296, 296, 296, 296, 296, 296},
		// 100
		{295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 295, 32: 295, 295, 295, 295, 295, 295, 295, 295, 295, 295},
		{294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 294, 32: 294, 294, 294, 294, 294, 294, 294, 294, 294, 294},
		{293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 293, 32: 293, 293, 293, 293, 293, 293, 293, 293, 293, 293},
		{292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 292, 32: 292, 292, 292, 292, 292, 292, 292, 292, 292, 292},
		{291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 291, 32: 291, 291, 291, 291, 291, 291, 291, 291, 291, 291},
		// 105
		{290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 290, 32: 290, 290, 290, 290, 290, 290, 290, 290, 290, 290},
		{289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 289, 32: 289, 289, 289, 289, 289, 289, 289, 289, 289, 289},
		{288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 288, 32: 288, 288, 288, 288, 288, 288, 288, 288, 288, 288},
		{287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 287, 32: 287, 287, 287, 287, 287, 287, 287, 287, 287, 287},
		{286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 286, 32: 286, 286, 286, 286, 286, 286, 286, 286, 286, 286},
		// 110
		{285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 285, 32: 285, 285, 285, 285, 285, 285, 285, 285, 285, 285},
		{284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 32: 284, 284, 284, 284, 284, 284, 284, 284, 284, 284, 88: 284, 141: 284},
		{283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 32: 283, 283, 283, 283, 283, 283, 283, 283, 283, 283, 139: 283, 168: 283, 283},
		{282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 32: 282, 282, 282, 282, 282, 282, 282, 282, 282, 282, 139: 282, 168: 282, 282},
		{281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 32: 281, 281, 281, 281, 281, 281, 281, 281, 281, 281, 139: 281, 168: 281, 281},
		// 115
		{280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 32: 280, 280, 280, 280, 280, 280, 280, 280, 280, 280, 139: 280, 168: 280, 280},
		{279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 32: 279, 279, 279, 279, 279, 279, 279, 279, 279, 279, 139: 279, 168: 279, 279},
		{278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 32: 278, 278, 278, 278, 278, 278, 278, 278, 278, 278, 139: 278, 168: 278, 278},
		{277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 32: 277, 277, 277, 277, 277, 277, 277, 277, 277, 277, 139: 277, 168: 277, 277},
		{276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 32: 276, 276, 276, 276, 276, 276, 276, 276, 276, 276, 139: 276, 168: 276, 276},
		// 120
		{275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 32: 275, 275, 275, 275, 275, 275, 275, 275, 275, 275, 139: 275, 168: 275, 275},
		{274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 32: 274, 274, 274, 274, 274, 274, 274, 274, 274, 274, 139: 274, 168: 274, 274},
		{273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 32: 273, 273, 273, 273, 273, 273, 273, 273, 273, 273, 139: 273, 168: 273, 273},
		{272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 32: 272, 272, 272, 272, 272, 272, 272, 272, 272, 272, 139: 272, 168: 272, 272},
		{271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 32: 271, 271, 271, 271, 271, 271, 271, 271, 271, 271, 139: 271, 168: 271, 271},
		// 125
		{270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 32: 270, 270, 270, 270, 270, 270, 270, 270, 270, 270, 139: 270, 168: 270, 270},
		{269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 32: 269, 269, 269, 269, 269, 269, 269, 269, 269, 269, 139: 269, 168: 269, 269},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 32: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 86: 848, 88: 39, 167: 39},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 32: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 86: 847, 88: 36, 167: 36},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 86: 846, 88: 37, 167: 37},
		// 130
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 32: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 86: 838, 88: 25, 167: 25},
		{258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 258, 32: 258, 258, 258, 258, 258, 258, 258, 258, 258, 258},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 837},
		{81, 81, 81, 81, 5: 81, 7: 580, 9: 567, 81, 81, 81, 14: 563, 566, 578, 81, 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 32: 81, 81, 81, 81},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 836},
		// 135
		{1: 834, 5: 428, 411, 508, 436, 506, 31: 509, 87, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 833, 180: 403, 185: 402, 546, 190: 545},
		{31: 827},
		{31: 238},
		{31: 237},
		{31: 236},
		// 140
		{31: 235},
		{31: 234},
		{31: 233},
		{31: 232},
		{31: 231},
		// 145
		{31: 230},
		{31: 229},
		{31: 228},
		{31: 227},
		{31: 226},
		// 150
		{31: 225},
		{31: 224},
		{31: 223},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 818, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 88: 20, 167: 20},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 812, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 88: 16, 167: 16},
		// 155
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 808, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 88: 13, 167: 13},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 804, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 88: 14, 167: 14},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 800, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 88: 17, 167: 17},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 796, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 88: 12, 167: 12},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 792, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 88: 18, 167: 18},
		// 160
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 785, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 88: 15, 167: 15},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 772, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 88: 11, 167: 11},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 751, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88: 8, 167: 8},
		{180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 32: 180, 180, 180, 180, 180, 180, 180, 180, 180, 180},
		{179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 179, 32: 179, 179, 179, 179, 179, 179, 179, 179, 179, 179},
		// 165
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 36: 739, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 736, 203: 738, 256: 737},
		{31: 544, 142: 543},
		{164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 164, 32: 164, 164, 164, 164, 164, 164, 164, 164, 164, 164},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 32: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 88: 48, 141: 48},
		{166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 32: 166, 166, 166, 166, 166, 166, 166, 166, 166, 166},
		// 170
		{1: 404, 32: 87, 180: 403, 185: 402, 546, 190: 545},
		{735},
		{32: 548, 248: 547},
		{13: 614, 192: 613},
		{1: 208, 5: 208, 208, 208, 208, 208, 14: 551, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 550},
		// 175
		{1: 207, 5: 207, 207, 207, 207, 207, 31: 207, 42: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 86: 207, 89: 207, 93: 207, 207, 96: 207, 207, 207, 100: 207, 207, 207, 104: 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 556, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 552, 183: 555, 249: 554, 287: 553},
		{13: 160},
		{152, 2: 152, 152, 152, 7: 580, 9: 567, 152, 152, 152, 152, 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 37: 152, 152, 40: 583, 264: 582, 581},
		{4: 561, 13: 161},
		// 180
		{4: 159, 13: 159},
		{4: 157, 13: 157},
		{4: 48, 7: 48, 9: 48, 13: 48, 48, 48, 48, 18: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 40: 48, 88: 48, 167: 557},
		{4: 154, 13: 154, 69: 559, 257: 558},
		{4: 156, 13: 156},
		// 185
		{86: 493, 93: 495, 494, 128: 560},
		{4: 153, 13: 153},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 556, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 552, 183: 555, 249: 562},
		{4: 158, 13: 158},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 612},
		// 190
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 611},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 610},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 609},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 608},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 607},
		// 195
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 606},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 605},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 604},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 603},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 602},
		// 200
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 601},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 600},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 599},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 598},
		{7: 596, 139: 595},
		// 205
		{31: 588, 237: 594},
		{19: 586},
		{155, 2: 155, 155, 155, 10: 155, 155, 155, 155, 37: 155, 155},
		{151, 2: 151, 151, 151, 10: 151, 151, 151, 151, 37: 151, 151},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 584, 409, 585},
		// 210
		{150, 2: 150, 150, 150, 10: 150, 150, 150, 150, 37: 150, 150},
		{149, 2: 149, 149, 149, 10: 149, 149, 149, 149, 37: 149, 149},
		{31: 588, 237: 587},
		{170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 32: 170, 170, 170, 170, 170, 170, 170, 170, 170, 170},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 589, 291: 590},
		// 215
		{168, 4: 168, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{591, 4: 592},
		{169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 32: 169, 169, 169, 169, 169, 169, 169, 169, 169, 169},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 593},
		{167, 4: 167, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		// 220
		{171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 171, 32: 171, 171, 171, 171, 171, 171, 171, 171, 171, 171},
		{195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 195, 32: 195, 195, 195, 195, 195, 195, 195, 195, 195, 195},
		{139: 597},
		{194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 194, 32: 194, 194, 194, 194, 194, 194, 194, 194, 194, 194},
		{241, 241, 241, 241, 241, 241, 241, 580, 241, 567, 241, 241, 241, 241, 563, 566, 578, 241, 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 241, 241, 575, 32: 241, 241, 241, 241, 241, 241, 241, 241, 241, 241},
		// 225
		{243, 243, 243, 243, 243, 243, 243, 580, 243, 567, 243, 243, 243, 243, 563, 566, 578, 243, 243, 579, 565, 564, 571, 570, 568, 572, 573, 569, 243, 243, 243, 32: 243, 243, 243, 243, 243, 243, 243, 243, 243, 243},
		{244, 244, 244, 244, 244, 244, 244, 580, 244, 567, 244, 244, 244, 244, 563, 566, 578, 244, 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 244, 244, 244, 32: 244, 244, 244, 244, 244, 244, 244, 244, 244, 244},
		{245, 245, 245, 245, 245, 245, 245, 580, 245, 567, 245, 245, 245, 245, 563, 566, 578, 245, 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 245, 245, 575, 32: 245, 245, 245, 245, 245, 245, 245, 245, 245, 245},
		{246, 246, 246, 246, 246, 246, 246, 580, 246, 567, 246, 246, 246, 246, 563, 566, 246, 246, 246, 246, 565, 564, 246, 246, 246, 246, 246, 246, 246, 246, 246, 32: 246, 246, 246, 246, 246, 246, 246, 246, 246, 246},
		{247, 247, 247, 247, 247, 247, 247, 580, 247, 567, 247, 247, 247, 247, 563, 566, 247, 247, 247, 247, 565, 564, 247, 247, 247, 247, 247, 247, 247, 247, 247, 32: 247, 247, 247, 247, 247, 247, 247, 247, 247, 247},
		// 230
		{248, 248, 248, 248, 248, 248, 248, 580, 248, 567, 248, 248, 248, 248, 563, 566, 248, 248, 248, 248, 565, 564, 248, 248, 248, 248, 248, 248, 248, 248, 248, 32: 248, 248, 248, 248, 248, 248, 248, 248, 248, 248},
		{249, 249, 249, 249, 249, 249, 249, 580, 249, 567, 249, 249, 249, 249, 563, 566, 249, 249, 249, 249, 565, 564, 249, 249, 249, 249, 249, 249, 249, 249, 249, 32: 249, 249, 249, 249, 249, 249, 249, 249, 249, 249},
		{250, 250, 250, 250, 250, 250, 250, 580, 250, 567, 250, 250, 250, 250, 563, 566, 250, 250, 250, 250, 565, 564, 250, 250, 250, 250, 250, 250, 250, 250, 250, 32: 250, 250, 250, 250, 250, 250, 250, 250, 250, 250},
		{251, 251, 251, 251, 251, 251, 251, 580, 251, 567, 251, 251, 251, 251, 563, 566, 251, 251, 251, 251, 565, 564, 251, 251, 251, 251, 251, 251, 251, 251, 251, 32: 251, 251, 251, 251, 251, 251, 251, 251, 251, 251},
		{252, 252, 252, 252, 252, 252, 252, 580, 252, 252, 252, 252, 252, 252, 563, 252, 252, 252, 252, 252, 565, 564, 252, 252, 252, 252, 252, 252, 252, 252, 252, 32: 252, 252, 252, 252, 252, 252, 252, 252, 252, 252},
		// 235
		{253, 253, 253, 253, 253, 253, 253, 580, 253, 253, 253, 253, 253, 253, 563, 253, 253, 253, 253, 253, 565, 564, 253, 253, 253, 253, 253, 253, 253, 253, 253, 32: 253, 253, 253, 253, 253, 253, 253, 253, 253, 253},
		{254, 254, 254, 254, 254, 254, 254, 580, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 32: 254, 254, 254, 254, 254, 254, 254, 254, 254, 254},
		{255, 255, 255, 255, 255, 255, 255, 580, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 32: 255, 255, 255, 255, 255, 255, 255, 255, 255, 255},
		{256, 256, 256, 256, 256, 256, 256, 580, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 32: 256, 256, 256, 256, 256, 256, 256, 256, 256, 256},
		{82, 2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 463, 182: 706},
		// 240
		{243: 617, 616, 276: 615},
		{148, 2: 148, 148, 704, 10: 148, 148, 148, 17: 148, 83: 148},
		{147, 2: 147, 147, 147, 10: 147, 147, 147, 17: 147, 83: 147},
		{31: 620, 52: 457, 456, 458, 170: 459, 198: 619, 201: 455, 270: 618},
		{143, 2: 143, 143, 143, 10: 143, 143, 143, 17: 143, 83: 143, 87: 700, 268: 701, 699},
		// 245
		{140, 2: 140, 140, 140, 10: 140, 140, 140, 17: 140, 83: 140, 87: 140},
		{110, 429, 5: 428, 411, 8: 436, 16: 110, 31: 460, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 624, 623, 625, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 103: 110, 170: 459, 181: 627, 198: 622, 201: 455, 626, 278: 621},
		{696, 4: 697},
		{138, 4: 138},
		{31, 16: 31, 31: 460, 48: 693, 50: 692, 103: 31, 170: 644, 691},
		// 250
		{32, 16: 32, 31: 460, 48: 687, 50: 686, 103: 32, 170: 644, 688},
		{28, 16: 28, 89: 640, 103: 28},
		{639},
		{107, 16: 633, 99: 107, 103: 632, 120: 107, 205: 630, 210: 631, 272: 629},
		{109, 2: 109, 109, 109, 13: 109, 16: 109, 49: 109, 99: 109, 103: 109, 120: 109, 124: 109, 130: 109},
		// 255
		{111, 99: 111, 120: 111},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 635, 238: 634},
		{106, 99: 106, 120: 106},
		{1: 105, 5: 105, 105, 8: 105, 42: 105, 105, 105, 105, 105, 105, 105, 50: 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105},
		{1: 104, 5: 104, 104, 8: 104, 42: 104, 104, 104, 104, 104, 104, 104, 50: 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104},
		// 260
		{108, 14: 108, 108, 90: 108, 108, 108, 95: 108, 99: 108, 120: 108, 126: 637},
		{103, 14: 103, 103, 90: 103, 103, 103, 95: 103, 99: 103, 120: 103, 126: 103},
		{49, 2: 49, 49, 14: 49, 49, 31: 49, 90: 49, 49, 49, 95: 49, 99: 49, 120: 49, 126: 49},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 638},
		{102, 14: 102, 102, 90: 102, 102, 102, 95: 102, 99: 102, 120: 102, 126: 102},
		// 265
		{120, 120, 120, 120, 120, 120, 9: 120, 120, 120, 120, 17: 120, 31: 120, 120, 120, 120, 120, 83: 120, 87: 120, 172: 120, 120, 120, 120, 188: 120, 120},
		{48: 642, 50: 641},
		{31: 460, 170: 644, 685},
		{31: 460, 170: 644, 643},
		{129, 129, 129, 129, 129, 10: 129, 129, 129, 17: 129, 32: 129, 129, 129, 129, 83: 129, 87: 129},
		// 270
		{9: 650, 31: 652, 172: 648, 646, 649, 647, 206: 651, 284: 645},
		{31: 460, 170: 684},
		{1: 429, 5: 428, 411, 8: 436, 16: 110, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 99: 110, 103: 110, 120: 110, 181: 627, 202: 681},
		{116, 5: 116, 14: 116, 116, 31: 116, 83: 116, 90: 116, 92: 116},
		{1: 429, 5: 428, 411, 8: 436, 16: 110, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 99: 110, 103: 110, 181: 627, 202: 679},
		// 275
		{114, 5: 114, 14: 114, 114, 31: 114, 83: 114, 90: 114, 92: 114},
		{112, 5: 112, 14: 112, 112, 31: 112, 83: 112, 90: 112, 92: 112},
		{14: 664, 665, 31: 89, 90: 666, 92: 667, 199: 668, 678},
		{9: 119, 31: 460, 170: 653, 172: 119, 119, 119, 119, 254: 654},
		{118, 5: 118, 9: 118, 83: 118, 172: 118, 118, 118, 118},
		// 280
		{9: 650, 172: 648, 646, 649, 647, 206: 655},
		{119, 5: 119, 31: 460, 83: 119, 170: 653, 254: 656},
		{82, 5: 82, 83: 463, 182: 657},
		{98, 5: 659, 259: 660, 658},
		{662},
		// 285
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 661},
		{97},
		{99, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{14: 664, 665, 31: 89, 90: 666, 92: 667, 199: 668, 663},
		{31: 100},
		// 290
		{31: 96, 91: 96, 95: 96},
		{31: 95, 91: 95, 95: 95},
		{31: 94, 91: 94, 95: 94},
		{4: 670, 89: 669},
		{31: 88, 91: 88, 95: 88},
		// 295
		{4: 674, 191: 673},
		{89: 671},
		{191: 672},
		{31: 90, 91: 90, 95: 90},
		{31: 93, 91: 93, 95: 93},
		// 300
		{89: 676, 191: 675},
		{31: 92, 91: 92, 95: 92},
		{191: 677},
		{31: 91, 91: 91, 95: 91},
		{31: 101},
		// 305
		{99: 680},
		{115, 5: 115, 14: 115, 115, 31: 115, 83: 115, 90: 115, 92: 115},
		{99: 683, 120: 682},
		{117, 5: 117, 14: 117, 117, 31: 117, 83: 117, 90: 117, 92: 117},
		{113, 5: 113, 14: 113, 113, 31: 113, 83: 113, 90: 113, 92: 113},
		// 310
		{124, 124, 124, 124, 124, 10: 124, 124, 124, 17: 124, 32: 124, 124, 124, 124, 83: 124, 87: 124},
		{132, 132, 132, 132, 132, 10: 132, 132, 132, 17: 132, 32: 132, 132, 132, 132, 83: 132, 87: 132},
		{31: 460, 170: 644, 690},
		{31: 460, 170: 644, 689},
		{128, 128, 128, 128, 128, 10: 128, 128, 128, 17: 128, 32: 128, 128, 128, 128, 83: 128, 87: 128},
		// 315
		{130, 130, 130, 130, 130, 10: 130, 130, 130, 17: 130, 32: 130, 130, 130, 130, 83: 130, 87: 130},
		{133, 133, 133, 133, 133, 10: 133, 133, 133, 17: 133, 32: 133, 133, 133, 133, 83: 133, 87: 133},
		{135, 135, 135, 135, 135, 10: 135, 135, 135, 17: 135, 32: 135, 135, 135, 135, 83: 135, 87: 135},
		{31: 460, 170: 644, 695},
		{31: 460, 170: 644, 694},
		// 320
		{131, 131, 131, 131, 131, 10: 131, 131, 131, 17: 131, 32: 131, 131, 131, 131, 83: 131, 87: 131},
		{134, 134, 134, 134, 134, 10: 134, 134, 134, 17: 134, 32: 134, 134, 134, 134, 83: 134, 87: 134},
		{139, 2: 139, 139, 139, 10: 139, 139, 139, 17: 139, 83: 139, 87: 139},
		{31: 460, 52: 457, 456, 458, 170: 459, 198: 698, 201: 455},
		{137, 4: 137},
		// 325
		{141, 2: 141, 141, 141, 10: 141, 141, 141, 17: 141, 83: 141, 286: 703},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 407, 409, 184: 702},
		{142, 2: 142, 142, 142, 10: 142, 142, 142, 17: 142, 83: 142},
		{144, 2: 144, 144, 144, 10: 144, 144, 144, 17: 144, 83: 144},
		{145, 2: 145, 145, 145, 10: 145, 145, 145, 17: 145, 83: 145},
		// 330
		{243: 617, 705},
		{146, 2: 146, 146, 146, 10: 146, 146, 146, 17: 146, 83: 146},
		{80, 2: 80, 80, 10: 80, 80, 80, 17: 708, 193: 707},
		{72, 2: 72, 72, 10: 72, 72, 719, 194: 718},
		{215: 709},
		// 335
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 552, 183: 712, 204: 711, 216: 710},
		{79, 2: 79, 79, 716, 10: 79, 79, 79},
		{78, 2: 78, 78, 78, 10: 78, 78, 78},
		{76, 2: 76, 76, 76, 10: 76, 76, 76, 37: 714, 715, 277: 713},
		{75, 2: 75, 75, 75, 10: 75, 75, 75},
		// 340
		{74, 2: 74, 74, 74, 10: 74, 74, 74},
		{73, 2: 73, 73, 73, 10: 73, 73, 73},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 552, 183: 712, 204: 717},
		{77, 2: 77, 77, 77, 10: 77, 77, 77},
		{70, 2: 70, 70, 10: 70, 722, 197: 721},
		// 345
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 720},
		{71, 2: 71, 71, 7: 580, 9: 567, 71, 71, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{68, 2: 68, 68, 10: 726, 196: 725},
		{215: 723},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 552, 183: 712, 204: 711, 216: 724},
		// 350
		{69, 2: 69, 69, 716, 10: 69},
		{162, 2: 162, 162},
		{89: 730, 729, 211: 728, 727},
		{67, 2: 67, 67, 731, 51: 732},
		{64, 2: 64, 64, 64, 51: 64},
		// 355
		{63, 2: 63, 63, 63, 51: 63},
		{62, 2: 62, 62, 62, 51: 62},
		{89: 730, 729, 211: 728, 734},
		{89: 730, 729, 211: 728, 733},
		{65, 2: 65, 65},
		// 360
		{66, 2: 66, 66},
		{165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 32: 165, 165, 165, 165, 165, 165, 165, 165, 165, 165},
		{7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 36: 739, 203: 738, 256: 748},
		{6: 173, 36: 739, 39: 745, 203: 744, 228: 743},
		{6: 176, 36: 176, 39: 176},
		// 365
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 740},
		{7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 41: 741},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 742},
		{6: 174, 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 36: 174, 39: 174},
		{6: 747},
		// 370
		{6: 175, 36: 175, 39: 175},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 746},
		{6: 172, 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 177, 32: 177, 177, 177, 177, 177, 177, 177, 177, 177, 177},
		{6: 173, 36: 739, 39: 745, 203: 744, 228: 749},
		// 375
		{6: 750},
		{178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 178, 32: 178, 178, 178, 178, 178, 178, 178, 178, 178, 178},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 752},
		{7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 40: 753},
		{42: 763, 762, 764, 756, 759, 755, 133: 761, 760, 757, 137: 758, 222: 754},
		// 380
		{771},
		{192, 4: 192, 7: 192, 139: 192, 168: 192, 192},
		{191, 4: 191, 7: 191, 139: 191, 168: 191, 191},
		{190, 4: 190, 7: 190, 139: 190, 168: 190, 190},
		{189, 4: 189, 7: 189, 139: 189, 168: 189, 189},
		// 385
		{188, 4: 188, 7: 188, 139: 188, 168: 188, 188},
		{187, 4: 187, 7: 187, 139: 187, 168: 187, 187},
		{186, 4: 186, 7: 186, 139: 186, 168: 186, 186},
		{185, 4: 185, 7: 185, 139: 185, 168: 185, 185},
		{184, 4: 184, 7: 184, 65: 768, 139: 184, 168: 184, 184},
		// 390
		{182, 4: 182, 7: 182, 65: 765, 139: 182, 168: 182, 182},
		{42: 766},
		{67: 767},
		{181, 4: 181, 7: 181, 139: 181, 168: 181, 181},
		{42: 769},
		// 395
		{67: 770},
		{183, 4: 183, 7: 183, 139: 183, 168: 183, 183},
		{193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 193, 32: 193, 193, 193, 193, 193, 193, 193, 193, 193, 193},
		{57: 776, 60: 777, 778, 775, 64: 779, 66: 774, 70: 780, 781, 263: 773},
		{13: 782},
		// 400
		{13: 203},
		{13: 202},
		{13: 201},
		{13: 200},
		{13: 199},
		// 405
		{13: 198},
		{13: 197},
		{13: 196},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 783},
		{784, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		// 410
		{204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 204, 32: 204, 204, 204, 204, 204, 204, 204, 204, 204, 204},
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 786},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 787},
		{206, 4: 789, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575, 275: 788},
		{791},
		// 415
		{86: 493, 93: 495, 494, 128: 790},
		{205},
		{209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 32: 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 793},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 794},
		// 420
		{795, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 32: 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 797},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 798},
		{799, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		// 425
		{211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 211, 32: 211, 211, 211, 211, 211, 211, 211, 211, 211, 211},
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 801},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 802},
		{803, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 32: 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
		// 430
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 805},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 806},
		{807, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 32: 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
		{1: 208, 5: 208, 208, 208, 208, 208, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 809},
		// 435
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 810},
		{811, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 214, 32: 214, 214, 214, 214, 214, 214, 214, 214, 214, 214},
		{1: 208, 5: 208, 208, 208, 208, 208, 14: 813, 31: 208, 42: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 86: 208, 89: 208, 93: 208, 208, 96: 208, 208, 208, 100: 208, 208, 208, 104: 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 176: 549, 814},
		{817},
		// 440
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 815},
		{816, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 32: 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
		{216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 32: 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 819},
		// 445
		{7: 580, 9: 567, 13: 820, 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 821, 288: 822},
		{219, 7: 580, 219, 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{218, 8: 824, 266: 823},
		{826},
		// 450
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 825},
		{217, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 220, 32: 220, 220, 220, 220, 220, 220, 220, 220, 220, 220},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 828, 258: 829},
		{222, 4: 222, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		// 455
		{830, 4: 831},
		{239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 32: 239, 239, 239, 239, 239, 239, 239, 239, 239, 239},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 832},
		{221, 4: 221, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{835, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		// 460
		{26, 429, 5: 428, 411, 26, 436, 26, 14: 26, 26, 26, 18: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 453, 409, 88: 26},
		{240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 32: 240, 240, 240, 240, 240, 240, 240, 240, 240, 240},
		{242, 242, 242, 242, 242, 242, 242, 580, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 32: 242, 242, 242, 242, 242, 242, 242, 242, 242, 242},
		{257, 257, 257, 257, 257, 257, 257, 580, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 257, 32: 257, 257, 257, 257, 257, 257, 257, 257, 257, 257},
		{57: 842, 60: 843, 844, 841, 64: 845, 66: 840, 261: 839},
		// 465
		{265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 32: 265, 265, 265, 265, 265, 265, 265, 265, 265, 265, 139: 265, 168: 265, 265},
		{264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 32: 264, 264, 264, 264, 264, 264, 264, 264, 264, 264, 139: 264, 168: 264, 264},
		{263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 32: 263, 263, 263, 263, 263, 263, 263, 263, 263, 263, 139: 263, 168: 263, 263},
		{262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 32: 262, 262, 262, 262, 262, 262, 262, 262, 262, 262, 139: 262, 168: 262, 262},
		{261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 32: 261, 261, 261, 261, 261, 261, 261, 261, 261, 261, 139: 261, 168: 261, 261},
		// 470
		{260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 32: 260, 260, 260, 260, 260, 260, 260, 260, 260, 260, 139: 260, 168: 260, 260},
		{259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 32: 259, 259, 259, 259, 259, 259, 259, 259, 259, 259, 139: 259, 168: 259, 259},
		{266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 32: 266, 266, 266, 266, 266, 266, 266, 266, 266, 266, 139: 266, 168: 266, 266},
		{267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 32: 267, 267, 267, 267, 267, 267, 267, 267, 267, 267, 139: 267, 168: 267, 267},
		{268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 32: 268, 268, 268, 268, 268, 268, 268, 268, 268, 268, 139: 268, 168: 268, 268},
		// 475
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 851, 409, 187: 850},
		{306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 32: 306, 306, 306, 306, 306, 306, 306, 306, 306, 306, 129: 306},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 32: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 129: 51, 133: 51, 51, 51, 137: 51},
		{31: 460, 170: 864},
		{31: 460, 170: 863},
		// 480
		{16: 633, 103: 632, 205: 630, 210: 859},
		{16: 633, 103: 632, 205: 630, 210: 856},
		{14: 664, 665, 90: 666, 89, 667, 199: 668, 857},
		{91: 858},
		{31: 122},
		// 485
		{14: 664, 665, 90: 666, 89, 667, 95: 89, 199: 668, 860},
		{91: 862, 95: 861},
		{31: 123},
		{31: 121},
		{125, 125, 125, 125, 125, 9: 125, 125, 125, 125, 17: 125, 32: 125, 125, 125, 125, 83: 125, 87: 125, 172: 125, 125, 125, 125, 188: 125, 125},
		// 490
		{126, 126, 126, 126, 126, 9: 126, 126, 126, 126, 17: 126, 32: 126, 126, 126, 126, 83: 126, 87: 126, 172: 126, 126, 126, 126, 188: 126, 126},
		{1: 84, 32: 84, 84, 84, 84},
		{123: 873, 125: 872, 207: 871, 231: 870},
		{123: 323, 125: 323},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 407, 409, 184: 869},
		// 495
		{123: 322, 125: 322},
		{2: 326, 326, 902},
		{2: 321, 321, 321, 13: 321},
		{1: 429, 110, 110, 110, 428, 411, 8: 436, 13: 110, 42: 419, 416, 418, 413, 448, 449, 426, 110, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 124: 110, 181: 900},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 628, 409, 130: 110, 181: 874},
		// 500
		{130: 875},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 877, 409, 255: 876},
		{18: 878},
		{2: 317, 317, 317, 13: 317, 18: 317, 49: 317, 124: 317},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 877, 409, 255: 879},
		// 505
		{2: 315, 315, 315, 13: 315, 49: 883, 124: 315, 240: 880, 882, 881},
		{2: 318, 318, 318, 13: 318},
		{2: 312, 312, 312, 13: 312, 124: 889, 279: 888, 887},
		{2: 314, 314, 314, 13: 314, 124: 314},
		{31: 884},
		// 510
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 635, 238: 885},
		{886, 126: 637},
		{2: 313, 313, 313, 13: 313, 124: 313},
		{2: 316, 316, 316, 13: 316},
		{2: 311, 311, 311, 13: 311},
		// 515
		{31: 890},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 894, 127: 893, 213: 892, 245: 891},
		{897, 4: 898},
		{309, 4: 309},
		{129: 895},
		// 520
		{88: 849},
		{1: 429, 5: 428, 411, 508, 436, 506, 31: 509, 42: 502, 501, 503, 413, 448, 449, 426, 520, 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 504, 452, 445, 446, 533, 531, 536, 528, 535, 408, 534, 530, 529, 527, 532, 84: 542, 409, 493, 89: 496, 93: 495, 494, 96: 540, 519, 497, 100: 499, 498, 500, 104: 505, 514, 526, 539, 515, 516, 523, 517, 521, 518, 524, 513, 511, 522, 525, 512, 121: 485, 464, 127: 465, 486, 131: 488, 489, 136: 492, 138: 466, 140: 487, 142: 541, 490, 491, 475, 468, 467, 472, 480, 479, 474, 483, 476, 473, 510, 481, 478, 477, 470, 482, 469, 484, 538, 537, 471, 896},
		{307, 4: 307, 7: 580, 9: 567, 14: 563, 566, 578, 18: 576, 579, 565, 564, 571, 570, 568, 572, 573, 569, 574, 577, 575},
		{2: 310, 310, 310, 13: 310},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 894, 127: 893, 213: 899},
		// 525
		{308, 4: 308},
		{2: 315, 315, 315, 13: 315, 49: 883, 124: 315, 240: 901, 882, 881},
		{2: 319, 319, 319, 13: 319},
		{123: 873, 125: 872, 207: 903},
		{2: 320, 320, 320, 13: 320},
		// 530
		{2: 327, 327},
		{1: 56, 5: 56, 56, 8: 56, 42: 56, 56, 56, 56, 56, 56, 56, 50: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 179: 909, 208: 916},
		{1: 56, 5: 56, 56, 8: 56, 42: 56, 56, 56, 56, 56, 56, 56, 50: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 179: 909, 208: 914},
		{1: 56, 5: 56, 56, 8: 56, 42: 56, 56, 56, 56, 56, 56, 56, 50: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 179: 909, 208: 908},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 911, 409},
		// 535
		{96: 910},
		{1: 55, 5: 55, 55, 8: 55, 42: 55, 55, 55, 55, 55, 55, 55, 50: 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{87: 912},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 913},
		{2: 328, 328},
		// 540
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 915},
		{2: 329, 329},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 407, 409, 184: 917},
		{2: 330, 330},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 945, 292: 944},
		// 545
		{123: 324, 125: 324, 234: 868, 867, 936},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 923, 232: 922, 267: 921},
		{4: 929, 13: 614, 192: 928},
		{4: 60, 13: 60},
		{141: 924},
		// 550
		{31: 925},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 894, 127: 893, 213: 892, 245: 926},
		{927, 4: 898},
		{4: 58, 13: 58},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 463, 182: 931},
		// 555
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 923, 232: 930},
		{4: 59, 13: 59},
		{2: 80, 80, 10: 80, 80, 80, 17: 708, 193: 932},
		{2: 72, 72, 10: 72, 72, 719, 194: 933},
		{2: 70, 70, 10: 70, 722, 197: 934},
		// 560
		{2: 68, 68, 10: 726, 196: 935},
		{2: 61, 61},
		{123: 873, 125: 872, 207: 871, 231: 937},
		{4: 902, 13: 614, 192: 938},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 463, 182: 939},
		// 565
		{2: 80, 80, 10: 80, 80, 80, 17: 708, 193: 940},
		{2: 72, 72, 10: 72, 72, 719, 194: 941},
		{2: 70, 70, 10: 70, 722, 197: 942},
		{2: 68, 68, 10: 726, 196: 943},
		{2: 325, 325},
		// 570
		{4: 947, 13: 614, 192: 946},
		{4: 332, 13: 332},
		{2: 82, 82, 10: 82, 82, 82, 17: 82, 83: 463, 182: 949},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 542, 409, 121: 485, 948},
		{4: 331, 13: 331},
		// 575
		{2: 80, 80, 10: 80, 80, 80, 17: 708, 193: 950},
		{2: 72, 72, 10: 72, 72, 719, 194: 951},
		{2: 70, 70, 10: 70, 722, 197: 952},
		{2: 68, 68, 10: 726, 196: 953},
		{2: 333, 333},
		// 580
		{1: 54, 5: 54, 54, 8: 54, 42: 54, 54, 54, 54, 54, 54, 54, 50: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 179: 960, 209: 997},
		{1: 54, 5: 54, 54, 8: 54, 42: 54, 54, 54, 54, 54, 54, 54, 50: 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 179: 960, 209: 971},
		{195: 958},
		{195: 334},
		{87: 54, 179: 960, 209: 959},
		// 585
		{87: 963},
		{7: 961},
		{96: 962},
		{1: 53, 5: 53, 53, 8: 53, 42: 53, 53, 53, 53, 53, 53, 53, 50: 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 87: 53},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 964},
		// 590
		{31: 965},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 851, 409, 187: 967, 281: 966},
		{968, 4: 969},
		{2, 4: 2},
		{2: 336, 336},
		// 595
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 851, 409, 187: 970},
		{1, 4: 1},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 636, 409, 178: 972},
		{2: 349, 349, 31: 974, 274: 973},
		{2: 350, 350},
		// 600
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 851, 409, 187: 977, 239: 976, 273: 975},
		{994, 4: 995},
		{347, 4: 347},
		{42: 763, 762, 764, 756, 759, 755, 133: 761, 760, 757, 137: 758, 222: 978},
		{344, 4: 344, 7: 982, 139: 983, 168: 985, 984, 246: 981, 282: 980, 979},
		// 605
		{345, 4: 345},
		{343, 4: 343, 7: 982, 139: 983, 168: 985, 984, 246: 993},
		{342, 4: 342, 7: 342, 139: 342, 168: 342, 342},
		{139: 992},
		{339, 4: 339, 7: 339, 139: 339, 168: 339, 339},
		// 610
		{42: 989, 988, 990, 68: 991, 86: 493, 89: 496, 93: 495, 494, 98: 497, 100: 499, 498, 500, 128: 486, 131: 488, 489, 136: 492, 138: 987, 140: 487, 143: 490, 491},
		{86: 986},
		{337, 4: 337, 7: 337, 139: 337, 168: 337, 337},
		{338, 4: 338, 7: 338, 139: 338, 168: 338, 338},
		{86: 848},
		// 615
		{86: 847},
		{86: 846},
		{86: 838},
		{340, 4: 340, 7: 340, 139: 340, 168: 340, 340},
		{341, 4: 341, 7: 341, 139: 341, 168: 341, 341},
		// 620
		{2: 348, 348},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 851, 409, 187: 977, 239: 996},
		{346, 4: 346},
		{1: 429, 5: 428, 411, 8: 436, 42: 419, 416, 418, 413, 448, 449, 426, 50: 425, 421, 423, 424, 427, 410, 412, 417, 414, 422, 431, 432, 433, 420, 434, 450, 415, 451, 430, 452, 445, 446, 437, 438, 447, 439, 444, 408, 440, 441, 442, 435, 443, 84: 407, 409, 184: 998},
		{2: 351, 351},
		// 625
		{1: 404, 354, 354, 32: 87, 87, 400, 87, 55: 394, 395, 58: 399, 63: 401, 180: 403, 185: 402, 397, 190: 391, 214: 379, 217: 380, 396, 381, 383, 382, 223: 384, 398, 385, 387, 386, 229: 378, 388, 233: 389, 247: 390, 250: 1000, 392, 405, 393},
		{2: 371, 371},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Errorf(format string, a ...interface{}) error
	AppendError(err error)
	AppendWarn(err error)
	Errors() (warns []error, errs []error)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEOFCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer, parser *Parser) int {
	const yyError = 303

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	parser.yylval = yySymType{}
	yyS := parser.cache

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yychar = yylex1(yylex, &parser.yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		*parser.yyVAL = parser.yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if !ok || msg == "" {
				msg = "syntax error"
			}
			// ignore goyacc error message
			yylex.AppendError(yylex.Errorf(""))
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEOFCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
		parser.cache = yyS
	}
	parser.yyVAL = &yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 2:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 3:
		{
			if yyS[yypt-0].statement != nil {
				parser.result = append(parser.result, yyS[yypt-0].statement)
			}
		}
	case 20:
		{
			parser.yyVAL.statement = nil
		}
	case 21:
		{
			parser.yyVAL.statement = &ast.BeginStmt{}
		}
	case 22:
		{
			parser.yyVAL.statement = &ast.CommitStmt{}
		}
	case 23:
		{
			parser.yyVAL.statement = &ast.CreateGraphStmt{
				IfNotExists: yyS[yypt-1].item.(bool),
				Graph:       yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 24:
		{
			cl := &ast.CreateLabelStmt{
				IfNotExists: yyS[yypt-2].item.(bool),
				Label:       yyS[yypt-1].item.(model.CIStr),
			}
			if yyS[yypt-0].item != nil {
				cl.Properties = yyS[yypt-0].item.([]*ast.LabelProperty)
			}
			parser.yyVAL.statement = cl
		}
	case 25:
		{
			parser.yyVAL.item = nil
		}
	case 26:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 27:
		{
			parser.yyVAL.item = []*ast.LabelProperty{yyS[yypt-0].item.(*ast.LabelProperty)}
		}
	case 28:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.LabelProperty), yyS[yypt-0].item.(*ast.LabelProperty))
		}
	case 29:
		{
			lp := &ast.LabelProperty{
				Name: yyS[yypt-2].item.(model.CIStr),
				Type: yyS[yypt-1].item.(ast.DataType),
			}
			if yyS[yypt-0].item != nil {
				lp.Options = yyS[yypt-0].item.([]*ast.LabelPropertyOption)
			}
			parser.yyVAL.item = lp
		}
	case 30:
		{
			parser.yyVAL.item = nil
		}
	case 32:
		{
			parser.yyVAL.item = []*ast.LabelPropertyOption{yyS[yypt-0].item.(*ast.LabelPropertyOption)}
		}
	case 33:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.LabelPropertyOption), yyS[yypt-0].item.(*ast.LabelPropertyOption))
		}
	case 34:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNotNull,
			}
		}
	case 35:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeNull,
			}
		}
	case 36:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeDefault,
				Data: yyS[yypt-0].expr,
			}
		}
	case 37:
		{
			parser.yyVAL.item = &ast.LabelPropertyOption{
				Type: ast.LabelPropertyOptionTypeComment,
				Data: yyS[yypt-0].ident,
			}
		}
	case 38:
		{
			parser.yyVAL.statement = &ast.CreateIndexStmt{
				KeyType:     yyS[yypt-7].item.(ast.IndexKeyType),
				IfNotExists: yyS[yypt-5].item.(bool),
				LabelName:   yyS[yypt-3].item.(model.CIStr),
				Properties:  yyS[yypt-1].item.([]model.CIStr),
			}
		}
	case 39:
		{
			parser.yyVAL.item = ast.IndexKeyTypeNone
		}
	case 40:
		{
			parser.yyVAL.item = ast.IndexKeyTypeUnique
		}
	case 41:
		{
			ds := &ast.DeleteStmt{
				VariableReferences: yyS[yypt-6].item.([]*ast.VariableReference),
				From:               yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				ds.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ds.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ds.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ds.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ds.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ds.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ds
		}
	case 42:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 43:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.VariableReference), yyS[yypt-0].expr.(*ast.VariableReference))
		}
	case 44:
		{
			parser.yyVAL.statement = &ast.DropGraphStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Graph:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 45:
		{
			parser.yyVAL.statement = &ast.DropLabelStmt{
				IfExists: yyS[yypt-1].item.(bool),
				Label:    yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 46:
		{
			parser.yyVAL.statement = &ast.DropIndexStmt{
				IfExists:  yyS[yypt-3].item.(bool),
				IndexName: model.NewCIStr(yyS[yypt-2].ident),
				LabelName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 47:
		{
			parser.yyVAL.statement = &ast.ExplainStmt{
				Select: yyS[yypt-0].statement.(*ast.SelectStmt),
			}
		}
	case 48:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-0].item.([]*ast.GraphElementInsertion),
			}
			if yyS[yypt-1].item != nil {
				is.IntoGraphName = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.statement = is
		}
	case 49:
		{
			is := &ast.InsertStmt{
				Insertions: yyS[yypt-6].item.([]*ast.GraphElementInsertion),
				From:       yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-9].item != nil {
				is.PathPatternMacros = yyS[yypt-9].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-7].item != nil {
				is.IntoGraphName = yyS[yypt-7].item.(model.CIStr)
			}
			if yyS[yypt-4].item != nil {
				is.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				is.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				is.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				is.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				is.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = is
		}
	case 50:
		{
			parser.yyVAL.item = nil
		}
	case 52:
		{
			parser.yyVAL.item = yyS[yypt-0].item
		}
	case 53:
		{
			parser.yyVAL.item = []*ast.GraphElementInsertion{yyS[yypt-0].item.(*ast.GraphElementInsertion)}
		}
	case 54:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementInsertion), yyS[yypt-0].item.(*ast.GraphElementInsertion))
		}
	case 55:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeVertex,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-1].item != nil {
				insertion.VariableName = yyS[yypt-1].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 56:
		{
			insertion := &ast.GraphElementInsertion{
				InsertionType:       ast.InsertionTypeEdge,
				From:                yyS[yypt-3].ident,
				To:                  yyS[yypt-1].ident,
				LabelsAndProperties: yyS[yypt-0].item.(*ast.LabelsAndProperties),
			}
			if yyS[yypt-5].item != nil {
				insertion.VariableName = yyS[yypt-5].item.(*ast.VariableReference)
			}
			parser.yyVAL.item = insertion
		}
	case 58:
		{
			lps := &ast.LabelsAndProperties{}
			if yyS[yypt-1].item != nil {
				lps.Labels = yyS[yypt-1].item.([]model.CIStr)
			}
			if yyS[yypt-0].item != nil {
				lps.Assignments = yyS[yypt-0].item.([]*ast.PropertyAssignment)
			}
			parser.yyVAL.item = lps
		}
	case 59:
		{
			parser.yyVAL.item = nil
		}
	case 61:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 62:
		{
			parser.yyVAL.item = nil
		}
	case 64:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 65:
		{
			parser.yyVAL.item = []*ast.PropertyAssignment{yyS[yypt-0].item.(*ast.PropertyAssignment)}
		}
	case 66:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PropertyAssignment), yyS[yypt-0].item.(*ast.PropertyAssignment))
		}
	case 67:
		{
			parser.yyVAL.item = &ast.PropertyAssignment{
				PropertyAccess:  yyS[yypt-2].expr.(*ast.PropertyAccess),
				ValueExpression: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 68:
		{
			parser.yyVAL.expr = &ast.PropertyAccess{
				VariableName: yyS[yypt-2].expr.(*ast.VariableReference),
				PropertyName: yyS[yypt-0].item.(model.CIStr),
			}
		}
	case 90:
		{
			parser.yyVAL.expr = &ast.VariableReference{
				VariableName: yyS[yypt-0].ident,
			}
		}
	case 98:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].ident)
		}
	case 99:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 100:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 101:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 102:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 103:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 104:
		{
			parser.yyVAL.expr = ast.NewValueExpr(false)
		}
	case 105:
		{
			parser.yyVAL.expr = ast.NewValueExpr(true)
		}
	case 106:
		{
			d, err := types.NewDateLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(d)
		}
	case 107:
		{
			t, err := types.NewTimeLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 108:
		{
			t, err := types.NewTimestampLiteral(yyS[yypt-0].ident)
			if err != nil {
				yylex.AppendError(err)
				return 1
			}
			parser.yyVAL.expr = ast.NewValueExpr(t)
		}
	case 109:
		{
			i := &types.IntervalLiteral{
				Value: yyS[yypt-1].ident,
				Unit:  yyS[yypt-0].item.(types.DateTimeField),
			}
			parser.yyVAL.expr = ast.NewValueExpr(i)
		}
	case 110:
		{
			parser.yyVAL.item = types.DateTimeFieldYear
		}
	case 111:
		{
			parser.yyVAL.item = types.DateTimeFieldMonth
		}
	case 112:
		{
			parser.yyVAL.item = types.DateTimeFieldDay
		}
	case 113:
		{
			parser.yyVAL.item = types.DateTimeFieldHour
		}
	case 114:
		{
			parser.yyVAL.item = types.DateTimeFieldMinute
		}
	case 115:
		{
			parser.yyVAL.item = types.DateTimeFieldSecond
		}
	case 116:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 117:
		{
			parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Minus, V: yyS[yypt-0].expr}
		}
	case 118:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mul, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 119:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Div, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 120:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Mod, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 121:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Plus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 122:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Minus, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 123:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.EQ, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 124:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.NE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 125:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 126:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LT, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 127:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.GE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 128:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LE, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 129:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicOr, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 130:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicXor, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 131:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.LogicAnd, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 132:
		{
			v, ok := yyS[yypt-0].expr.(*ast.ExistsSubqueryExpr)
			if ok {
				v.Not = true
				parser.yyVAL.expr = yyS[yypt-0].expr
			} else {
				parser.yyVAL.expr = &ast.UnaryOperationExpr{Op: opcode.Not, V: yyS[yypt-0].expr}
			}
		}
	case 133:
		{
			parser.yyVAL.expr = &ast.BinaryOperationExpr{Op: opcode.Concat, L: yyS[yypt-2].expr, R: yyS[yypt-0].expr}
		}
	case 134:
		{
			parser.yyVAL.expr = &ast.ParenthesesExpr{Expr: yyS[yypt-1].expr}
		}
	case 135:
		{
			parser.yyVAL.expr = &ast.FuncCallExpr{
				FnName: model.NewCIStr(yyS[yypt-3].ident),
				Args:   yyS[yypt-1].item.([]ast.ExprNode),
			}
		}
	case 152:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 153:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 154:
		{
			parser.yyVAL.expr = &ast.SubstrFuncExpr{
				Expr:  yyS[yypt-4].expr,
				Start: yyS[yypt-2].expr,
				For:   yyS[yypt-1].expr,
			}
		}
	case 156:
		{
			parser.yyVAL.expr = nil
		}
	case 157:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 158:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F: yyS[yypt-3].ident,
				Args: []ast.ExprNode{
					ast.NewValueExpr(1),
				},
			}
		}
	case 159:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 160:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 161:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 162:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 163:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 164:
		{
			parser.yyVAL.expr = &ast.AggregateFuncExpr{
				F:        yyS[yypt-4].ident,
				Args:     []ast.ExprNode{yyS[yypt-1].expr},
				Distinct: yyS[yypt-2].item.(bool),
			}
		}
	case 165:
		{
			expr := &ast.AggregateFuncExpr{
				F:        yyS[yypt-5].ident,
				Args:     []ast.ExprNode{yyS[yypt-2].expr},
				Distinct: yyS[yypt-3].item.(bool),
			}
			if yyS[yypt-1].expr != nil {
				expr.Args = append(expr.Args, yyS[yypt-1].expr)
			}
			parser.yyVAL.expr = expr
		}
	case 166:
		{
			parser.yyVAL.item = false
		}
	case 167:
		{
			parser.yyVAL.item = true
		}
	case 168:
		{
			parser.yyVAL.expr = nil
		}
	case 169:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 170:
		{
			parser.yyVAL.expr = &ast.ExtractFuncExpr{
				ExtractField: yyS[yypt-3].item.(ast.ExtractField),
				Expr:         yyS[yypt-1].expr,
			}
		}
	case 171:
		{
			parser.yyVAL.item = ast.ExtractFieldYear
		}
	case 172:
		{
			parser.yyVAL.item = ast.ExtractFieldMonth
		}
	case 173:
		{
			parser.yyVAL.item = ast.ExtractFieldDay
		}
	case 174:
		{
			parser.yyVAL.item = ast.ExtractFieldHour
		}
	case 175:
		{
			parser.yyVAL.item = ast.ExtractFieldMinute
		}
	case 176:
		{
			parser.yyVAL.item = ast.ExtractFieldSecond
		}
	case 177:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneHour
		}
	case 178:
		{
			parser.yyVAL.item = ast.ExtractFieldTimezoneMinute
		}
	case 179:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-2].expr,
			}
		}
	case 180:
		{
			parser.yyVAL.expr = &ast.IsNullExpr{
				Expr: yyS[yypt-3].expr,
				Not:  true,
			}
		}
	case 181:
		{
			parser.yyVAL.expr = &ast.CastFuncExpr{
				Expr:     yyS[yypt-3].expr,
				DataType: yyS[yypt-1].item.(ast.DataType),
			}
		}
	case 182:
		{
			parser.yyVAL.item = ast.DataTypeString
		}
	case 183:
		{
			parser.yyVAL.item = ast.DataTypeBoolean
		}
	case 184:
		{
			parser.yyVAL.item = ast.DataTypeInteger
		}
	case 185:
		{
			parser.yyVAL.item = ast.DataTypeInt
		}
	case 186:
		{
			parser.yyVAL.item = ast.DataTypeLong
		}
	case 187:
		{
			parser.yyVAL.item = ast.DataTypeFloat
		}
	case 188:
		{
			parser.yyVAL.item = ast.DataTypeDouble
		}
	case 189:
		{
			parser.yyVAL.item = ast.DataTypeDate
		}
	case 190:
		{
			parser.yyVAL.item = ast.DataTypeTime
		}
	case 191:
		{
			parser.yyVAL.item = ast.DataTypeTimeWithZone
		}
	case 192:
		{
			parser.yyVAL.item = ast.DataTypeTimestamp
		}
	case 193:
		{
			parser.yyVAL.item = ast.DataTypeTimestampWithZone
		}
	case 196:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				Value:       yyS[yypt-3].expr,
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 197:
		{
			parser.yyVAL.expr = &ast.CaseExpr{
				WhenClauses: yyS[yypt-2].item.([]*ast.WhenClause),
				ElseClause:  yyS[yypt-1].expr,
			}
		}
	case 198:
		{
			parser.yyVAL.item = []*ast.WhenClause{yyS[yypt-0].item.(*ast.WhenClause)}
		}
	case 199:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.WhenClause), yyS[yypt-0].item.(*ast.WhenClause))
		}
	case 200:
		{
			parser.yyVAL.item = &ast.WhenClause{
				Expr:   yyS[yypt-2].expr,
				Result: yyS[yypt-0].expr,
			}
		}
	case 201:
		{
			parser.yyVAL.expr = nil
		}
	case 202:
		{
			parser.yyVAL.expr = yyS[yypt-0].expr
		}
	case 203:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-2].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
			}
		}
	case 204:
		{
			parser.yyVAL.expr = &ast.PatternInExpr{
				Expr: yyS[yypt-3].expr,
				List: yyS[yypt-0].item.([]ast.ExprNode),
				Not:  true,
			}
		}
	case 205:
		{
			parser.yyVAL.item = yyS[yypt-1].item
		}
	case 206:
		{
			parser.yyVAL.item = []ast.ExprNode{yyS[yypt-0].expr}
		}
	case 207:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]ast.ExprNode), yyS[yypt-0].expr)
		}
	case 208:
		{
			parser.yyVAL.expr = &ast.ExistsSubqueryExpr{
				Sel: yyS[yypt-0].expr,
			}
		}
	case 209:
		{
			parser.yyVAL.expr = &ast.SubqueryExpr{
				Query: yyS[yypt-1].statement.(*ast.SelectStmt),
			}
		}
	case 212:
		{
			ss := &ast.SelectStmt{
				Select: yyS[yypt-6].item.(*ast.SelectClause),
				From:   yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-7].item != nil {
				ss.PathPatternMacros = yyS[yypt-7].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				ss.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				ss.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				ss.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				ss.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				ss.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = ss
		}
	case 213:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Distinct: yyS[yypt-1].item.(bool),
				Elements: yyS[yypt-0].item.([]*ast.SelectElement),
			}
		}
	case 214:
		{
			parser.yyVAL.item = &ast.SelectClause{
				Star: true,
			}
		}
	case 215:
		{
			parser.yyVAL.item = []*ast.SelectElement{yyS[yypt-0].item.(*ast.SelectElement)}
		}
	case 216:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.SelectElement), yyS[yypt-0].item.(*ast.SelectElement))
		}
	case 217:
		{
			parser.yyVAL.item = &ast.SelectElement{
				ExpAsVar: yyS[yypt-0].item.(*ast.ExpAsVar),
			}
		}
	case 218:
		{
			parser.yyVAL.item = &ast.SelectElement{
				Identifier: yyS[yypt-2].ident,
				Prefix:     yyS[yypt-0].item.(string),
			}
		}
	case 219:
		{
			ev := &ast.ExpAsVar{
				Expr: yyS[yypt-1].expr.(ast.ExprNode),
			}
			if yyS[yypt-0].item != nil {
				ev.AsName = yyS[yypt-0].item.(model.CIStr)
			}
			parser.yyVAL.item = ev
		}
	case 220:
		{
			parser.yyVAL.item = ""
		}
	case 221:
		{
			parser.yyVAL.item = yyS[yypt-1].ident
		}
	case 222:
		{
			parser.yyVAL.item = nil
		}
	case 223:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 224:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 225:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 226:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.MatchClauseList)
		}
	case 227:
		{
			parser.yyVAL.item = &ast.MatchClauseList{
				Matches: []*ast.MatchClause{yyS[yypt-0].item.(*ast.MatchClause)},
			}
		}
	case 228:
		{
			ml := yyS[yypt-2].item.(*ast.MatchClauseList)
			ml.Matches = append(ml.Matches, yyS[yypt-0].item.(*ast.MatchClause))
			parser.yyVAL.item = ml
		}
	case 229:
		{
			mc := &ast.MatchClause{
				Paths: yyS[yypt-2].item.([]*ast.PathPattern),
			}
			if yyS[yypt-1].item != nil {
				mc.Graph = yyS[yypt-1].item.(model.CIStr)
			}
			parser.yyVAL.item = mc
		}
	case 230:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(model.CIStr)
		}
	case 231:
		{
			parser.yyVAL.item = nil
		}
	case 234:
		{
			parser.yyVAL.item = []*ast.PathPattern{yyS[yypt-0].item.(*ast.PathPattern)}
		}
	case 235:
		{
			parser.yyVAL.item = yyS[yypt-1].item.([]*ast.PathPattern)
		}
	case 236:
		{
			parser.yyVAL.item = yyS[yypt-0].item.(*ast.PathPattern)
		}
	case 237:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.PathPattern), yyS[yypt-0].item.(*ast.PathPattern))
		}
	case 238:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternSimple
			parser.yyVAL.item = pp
		}
	case 239:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAny
			parser.yyVAL.item = pp
		}
	case 240:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyShortest
			parser.yyVAL.item = pp
		}
	case 241:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllShortest
			parser.yyVAL.item = pp
		}
	case 242:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKShortest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 243:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAnyCheapest
			parser.yyVAL.item = pp
		}
	case 244:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAllCheapest
			parser.yyVAL.item = pp
		}
	case 245:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternTopKCheapest
			pp.TopK = yyS[yypt-2].item.(int64)
			parser.yyVAL.item = pp
		}
	case 246:
		{
			pp := yyS[yypt-0].item.(*ast.PathPattern)
			pp.Tp = ast.PathPatternAll
			parser.yyVAL.item = pp
		}
	case 247:
		{
			parser.yyVAL.item = &ast.PathPattern{Vertices: []*ast.VertexPattern{yyS[yypt-0].item.(*ast.VertexPattern)}}
		}
	case 248:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.ReachabilityPathExpr))
			parser.yyVAL.item = pp
		}
	case 249:
		{
			pp := yyS[yypt-2].item.(*ast.PathPattern)
			pp.Vertices = append(pp.Vertices, yyS[yypt-0].item.(*ast.VertexPattern))
			pp.Connections = append(pp.Connections, yyS[yypt-1].item.(*ast.EdgePattern))
			parser.yyVAL.item = pp
		}
	case 250:
		{
			parser.yyVAL.item = &ast.PathPattern{
				Vertices:    []*ast.VertexPattern{yyS[yypt-2].item.(*ast.VertexPattern), yyS[yypt-0].item.(*ast.VertexPattern)},
				Connections: []ast.VertexPairConnection{yyS[yypt-1].item.(*ast.QuantifiedPathExpr)},
			}
		}
	case 251:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionOutgoing,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 252:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionIncoming,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 253:
		{
			parser.yyVAL.item = &ast.ReachabilityPathExpr{
				Labels:     yyS[yypt-2].item.([]model.CIStr),
				Direction:  ast.EdgeDirectionAnyDirected,
				Quantifier: yyS[yypt-1].item.(*ast.PatternQuantifier),
			}
		}
	case 254:
		{
			parser.yyVAL.item = &ast.VertexPattern{Variable: yyS[yypt-1].item.(*ast.VariableSpec)}
		}
	case 255:
		{
			parser.yyVAL.item = (*ast.VertexPattern)(nil)
		}
	case 257:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionOutgoing,
			}
		}
	case 258:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionOutgoing}
		}
	case 259:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionIncoming,
			}
		}
	case 260:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionIncoming}
		}
	case 261:
		{
			parser.yyVAL.item = &ast.EdgePattern{
				Variable:  yyS[yypt-1].item.(*ast.VariableSpec),
				Direction: ast.EdgeDirectionAnyDirected,
			}
		}
	case 262:
		{
			parser.yyVAL.item = &ast.EdgePattern{Direction: ast.EdgeDirectionAnyDirected}
		}
	case 263:
		{
			v := &ast.VariableSpec{
				Name:   yyS[yypt-1].item.(model.CIStr),
				Labels: yyS[yypt-0].item.([]model.CIStr),
			}
			if v.Name.L == "" {
				v.Anonymous = true
			}
			parser.yyVAL.item = v
		}
	case 264:
		{
			parser.yyVAL.item = model.CIStr{}
		}
	case 265:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 266:
		{
			parser.yyVAL.item = yyS[yypt-0].item.([]model.CIStr)
		}
	case 267:
		{
			parser.yyVAL.item = []model.CIStr(nil)
		}
	case 271:
		{
			parser.yyVAL.item = []model.CIStr{yyS[yypt-0].item.(model.CIStr)}
		}
	case 272:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}
	case 273:
		{
			parser.yyVAL.item = &ast.QuantifiedPathExpr{
				Edge:       yyS[yypt-1].item.(*ast.EdgePattern),
				Quantifier: yyS[yypt-0].item.(*ast.PatternQuantifier),
			}
		}
	case 274:
		{
			q := &ast.QuantifiedPathExpr{
				Edge:        yyS[yypt-5].item.(*ast.EdgePattern),
				Quantifier:  yyS[yypt-0].item.(*ast.PatternQuantifier),
				Source:      yyS[yypt-6].item.(*ast.VertexPattern),
				Destination: yyS[yypt-4].item.(*ast.VertexPattern),
			}
			if yyS[yypt-3].item != nil {
				q.Where = yyS[yypt-3].item.(ast.ExprNode)
			}
			if yyS[yypt-2].item != nil {
				q.Cost = yyS[yypt-2].item.(ast.ExprNode)
			}
			parser.yyVAL.item = q
		}
	case 275:
		{
			parser.yyVAL.item = yyS[yypt-0].expr.(ast.ExprNode)
		}
	case 276:
		{
			parser.yyVAL.item = nil
		}
	case 278:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierZeroOrMore, M: math.MaxInt64}
		}
	case 279:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOneOrMore, N: 1, M: math.MaxInt64}
		}
	case 280:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierOptional, N: 0, M: 1}
		}
	case 281:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierExactlyN, N: yyS[yypt-1].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 282:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierNOrMore, N: yyS[yypt-2].item.(int64), M: math.MaxInt64}
		}
	case 283:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenNAndM, N: yyS[yypt-3].item.(int64), M: yyS[yypt-1].item.(int64)}
		}
	case 284:
		{
			parser.yyVAL.item = &ast.PatternQuantifier{Tp: ast.PatternQuantifierBetweenZeroAndM, N: 0, M: yyS[yypt-1].item.(int64)}
		}
	case 285:
		{
			parser.yyVAL.item = (*ast.PatternQuantifier)(nil)
		}
	case 287:
		{
			parser.yyVAL.item = nil
		}
	case 289:
		{
			parser.yyVAL.item = []*ast.PathPatternMacro{yyS[yypt-0].item.(*ast.PathPatternMacro)}
		}
	case 290:
		{
			parser.yyVAL.item = append(yyS[yypt-1].item.([]*ast.PathPatternMacro), yyS[yypt-0].item.(*ast.PathPatternMacro))
		}
	case 291:
		{
			p := &ast.PathPatternMacro{
				Name: model.NewCIStr(yyS[yypt-3].ident),
				Path: yyS[yypt-1].item.(*ast.PathPattern),
			}
			if yyS[yypt-0].item != nil {
				p.Where = yyS[yypt-0].item.(ast.ExprNode)
			}
			parser.yyVAL.item = p
		}
	case 292:
		{
			parser.yyVAL.item = nil
		}
	case 293:
		{
			parser.yyVAL.item = yyS[yypt-0].expr
		}
	case 294:
		{
			parser.yyVAL.item = nil
		}
	case 295:
		{
			parser.yyVAL.item = &ast.GroupByClause{Items: yyS[yypt-0].item.([]*ast.ByItem)}
		}
	case 296:
		{
			parser.yyVAL.item = []*ast.ByItem{yyS[yypt-0].item.(*ast.ByItem)}
		}
	case 297:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.ByItem), yyS[yypt-0].item.(*ast.ByItem))
		}
	case 298:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr:      yyS[yypt-0].item.(*ast.ExpAsVar),
				NullOrder: true,
			}
		}
	case 299:
		{
			parser.yyVAL.item = &ast.ByItem{
				Expr: yyS[yypt-1].item.(*ast.ExpAsVar),
				Desc: yyS[yypt-0].item.(bool),
			}
		}
	case 300:
		{
			parser.yyVAL.item = false
		}
	case 301:
		{
			parser.yyVAL.item = true
		}
	case 302:
		{
			parser.yyVAL.item = nil
		}
	case 303:
		{
			parser.yyVAL.item = &ast.HavingClause{
				Expr: yyS[yypt-0].expr,
			}
		}
	case 304:
		{
			parser.yyVAL.item = nil
		}
	case 305:
		{
			parser.yyVAL.item = &ast.OrderByClause{
				Items: yyS[yypt-0].item.([]*ast.ByItem),
			}
		}
	case 306:
		{
			parser.yyVAL.item = nil
		}
	case 307:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count: yyS[yypt-0].expr,
			}
		}
	case 308:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-0].expr.(ast.ExprNode),
				Offset: yyS[yypt-2].expr.(ast.ExprNode),
			}
		}
	case 309:
		{
			parser.yyVAL.item = &ast.LimitClause{
				Count:  yyS[yypt-2].expr.(ast.ExprNode),
				Offset: yyS[yypt-0].expr.(ast.ExprNode),
			}
		}
	case 311:
		{
			parser.yyVAL.expr = &ast.BindVariable{}
		}
	case 312:
		{
			parser.yyVAL.expr = ast.NewValueExpr(yyS[yypt-0].item)
		}
	case 313:
		{
			us := &ast.UpdateStmt{
				Updates: yyS[yypt-6].item.([]*ast.GraphElementUpdate),
				From:    yyS[yypt-5].item.(*ast.MatchClauseList),
			}
			if yyS[yypt-8].item != nil {
				us.PathPatternMacros = yyS[yypt-8].item.([]*ast.PathPatternMacro)
			}
			if yyS[yypt-4].item != nil {
				us.Where = yyS[yypt-4].item.(ast.ExprNode)
			}
			if yyS[yypt-3].item != nil {
				us.GroupBy = yyS[yypt-3].item.(*ast.GroupByClause)
			}
			if yyS[yypt-2].item != nil {
				us.Having = yyS[yypt-2].item.(*ast.HavingClause)
			}
			if yyS[yypt-1].item != nil {
				us.OrderBy = yyS[yypt-1].item.(*ast.OrderByClause)
			}
			if yyS[yypt-0].item != nil {
				us.Limit = yyS[yypt-0].item.(*ast.LimitClause)
			}
			parser.yyVAL.statement = us
		}
	case 314:
		{
			parser.yyVAL.item = []*ast.GraphElementUpdate{yyS[yypt-0].item.(*ast.GraphElementUpdate)}
		}
	case 315:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]*ast.GraphElementUpdate), yyS[yypt-0].item.(*ast.GraphElementUpdate))
		}
	case 316:
		{
			parser.yyVAL.item = &ast.GraphElementUpdate{
				VariableName: yyS[yypt-4].expr.(*ast.VariableReference),
				Assignments:  yyS[yypt-1].item.([]*ast.PropertyAssignment),
			}
		}
	case 317:
		{
			parser.yyVAL.statement = &ast.UseStmt{}
		}
	case 318:
		{
			parser.yyVAL.item = false
		}
	case 319:
		{
			parser.yyVAL.item = true
		}
	case 320:
		{
			parser.yyVAL.item = false
		}
	case 321:
		{
			parser.yyVAL.item = true
		}
	case 322:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 323:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 324:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 325:
		{
			parser.yyVAL.item = model.NewCIStr(yyS[yypt-0].ident)
		}
	case 373:
		{
			parser.yyVAL.item = append(yyS[yypt-2].item.([]model.CIStr), yyS[yypt-0].item.(model.CIStr))
		}

	}

	if !parser.lexer.skipPositionRecording {
		yySetOffset(parser.yyVAL, parser.yyVAL.offset)
	}

	if yyEx != nil && yyEx.Reduced(r, exState, parser.yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
